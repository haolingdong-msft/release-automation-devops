// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.dev.models.BuildRetentionSample;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * A historical overview of build retention information. This includes a list of snapshots taken about build retention
 * usage, and a list of builds that have exceeded the default 30 day retention policy.
 */
@Fluent
public final class BuildRetentionHistoryInner {
    /*
     * A list of builds that are older than the default retention policy, but are not marked as retained. Something is causing these builds to not get cleaned up.
     */
    @JsonProperty(value = "buildRetentionSamples")
    private List<BuildRetentionSample> buildRetentionSamples;

    /**
     * Creates an instance of BuildRetentionHistoryInner class.
     */
    public BuildRetentionHistoryInner() {
    }

    /**
     * Get the buildRetentionSamples property: A list of builds that are older than the default retention policy, but
     * are not marked as retained. Something is causing these builds to not get cleaned up.
     * 
     * @return the buildRetentionSamples value.
     */
    public List<BuildRetentionSample> buildRetentionSamples() {
        return this.buildRetentionSamples;
    }

    /**
     * Set the buildRetentionSamples property: A list of builds that are older than the default retention policy, but
     * are not marked as retained. Something is causing these builds to not get cleaned up.
     * 
     * @param buildRetentionSamples the buildRetentionSamples value to set.
     * @return the BuildRetentionHistoryInner object itself.
     */
    public BuildRetentionHistoryInner withBuildRetentionSamples(List<BuildRetentionSample> buildRetentionSamples) {
        this.buildRetentionSamples = buildRetentionSamples;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (buildRetentionSamples() != null) {
            buildRetentionSamples().forEach(e -> e.validate());
        }
    }
}

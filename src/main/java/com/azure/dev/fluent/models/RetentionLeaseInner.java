// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * A valid retention lease prevents automated systems from deleting a pipeline run.
 */
@Fluent
public final class RetentionLeaseInner {
    /*
     * When the lease was created.
     */
    @JsonProperty(value = "createdOn")
    private OffsetDateTime createdOn;

    /*
     * The pipeline definition of the run.
     */
    @JsonProperty(value = "definitionId")
    private Integer definitionId;

    /*
     * The unique identifier for this lease.
     */
    @JsonProperty(value = "leaseId")
    private Integer leaseId;

    /*
     * Non-unique string that identifies the owner of a retention lease.
     */
    @JsonProperty(value = "ownerId")
    private String ownerId;

    /*
     * If set, this lease will also prevent the pipeline from being deleted while the lease is still valid.
     */
    @JsonProperty(value = "protectPipeline")
    private Boolean protectPipeline;

    /*
     * The pipeline run protected by this lease.
     */
    @JsonProperty(value = "runId")
    private Integer runId;

    /*
     * The last day the lease is considered valid.
     */
    @JsonProperty(value = "validUntil")
    private OffsetDateTime validUntil;

    /**
     * Creates an instance of RetentionLeaseInner class.
     */
    public RetentionLeaseInner() {
    }

    /**
     * Get the createdOn property: When the lease was created.
     * 
     * @return the createdOn value.
     */
    public OffsetDateTime createdOn() {
        return this.createdOn;
    }

    /**
     * Set the createdOn property: When the lease was created.
     * 
     * @param createdOn the createdOn value to set.
     * @return the RetentionLeaseInner object itself.
     */
    public RetentionLeaseInner withCreatedOn(OffsetDateTime createdOn) {
        this.createdOn = createdOn;
        return this;
    }

    /**
     * Get the definitionId property: The pipeline definition of the run.
     * 
     * @return the definitionId value.
     */
    public Integer definitionId() {
        return this.definitionId;
    }

    /**
     * Set the definitionId property: The pipeline definition of the run.
     * 
     * @param definitionId the definitionId value to set.
     * @return the RetentionLeaseInner object itself.
     */
    public RetentionLeaseInner withDefinitionId(Integer definitionId) {
        this.definitionId = definitionId;
        return this;
    }

    /**
     * Get the leaseId property: The unique identifier for this lease.
     * 
     * @return the leaseId value.
     */
    public Integer leaseId() {
        return this.leaseId;
    }

    /**
     * Set the leaseId property: The unique identifier for this lease.
     * 
     * @param leaseId the leaseId value to set.
     * @return the RetentionLeaseInner object itself.
     */
    public RetentionLeaseInner withLeaseId(Integer leaseId) {
        this.leaseId = leaseId;
        return this;
    }

    /**
     * Get the ownerId property: Non-unique string that identifies the owner of a retention lease.
     * 
     * @return the ownerId value.
     */
    public String ownerId() {
        return this.ownerId;
    }

    /**
     * Set the ownerId property: Non-unique string that identifies the owner of a retention lease.
     * 
     * @param ownerId the ownerId value to set.
     * @return the RetentionLeaseInner object itself.
     */
    public RetentionLeaseInner withOwnerId(String ownerId) {
        this.ownerId = ownerId;
        return this;
    }

    /**
     * Get the protectPipeline property: If set, this lease will also prevent the pipeline from being deleted while the
     * lease is still valid.
     * 
     * @return the protectPipeline value.
     */
    public Boolean protectPipeline() {
        return this.protectPipeline;
    }

    /**
     * Set the protectPipeline property: If set, this lease will also prevent the pipeline from being deleted while the
     * lease is still valid.
     * 
     * @param protectPipeline the protectPipeline value to set.
     * @return the RetentionLeaseInner object itself.
     */
    public RetentionLeaseInner withProtectPipeline(Boolean protectPipeline) {
        this.protectPipeline = protectPipeline;
        return this;
    }

    /**
     * Get the runId property: The pipeline run protected by this lease.
     * 
     * @return the runId value.
     */
    public Integer runId() {
        return this.runId;
    }

    /**
     * Set the runId property: The pipeline run protected by this lease.
     * 
     * @param runId the runId value to set.
     * @return the RetentionLeaseInner object itself.
     */
    public RetentionLeaseInner withRunId(Integer runId) {
        this.runId = runId;
        return this;
    }

    /**
     * Get the validUntil property: The last day the lease is considered valid.
     * 
     * @return the validUntil value.
     */
    public OffsetDateTime validUntil() {
        return this.validUntil;
    }

    /**
     * Set the validUntil property: The last day the lease is considered valid.
     * 
     * @param validUntil the validUntil value to set.
     * @return the RetentionLeaseInner object itself.
     */
    public RetentionLeaseInner withValidUntil(OffsetDateTime validUntil) {
        this.validUntil = validUntil;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}

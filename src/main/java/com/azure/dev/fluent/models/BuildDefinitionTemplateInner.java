// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;
import java.util.UUID;

/**
 * Represents a template from which new build definitions can be created.
 */
@Fluent
public final class BuildDefinitionTemplateInner {
    /*
     * Indicates whether the template can be deleted.
     */
    @JsonProperty(value = "canDelete")
    private Boolean canDelete;

    /*
     * The template category.
     */
    @JsonProperty(value = "category")
    private String category;

    /*
     * An optional hosted agent queue for the template to use by default.
     */
    @JsonProperty(value = "defaultHostedQueue")
    private String defaultHostedQueue;

    /*
     * A description of the template.
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * Dictionary of <string>
     */
    @JsonProperty(value = "icons")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> icons;

    /*
     * The ID of the task whose icon is used when showing this template in the UI.
     */
    @JsonProperty(value = "iconTaskId")
    private UUID iconTaskId;

    /*
     * The ID of the template.
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * The name of the template.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * The actual template.
     */
    @JsonProperty(value = "template")
    private BuildDefinitionInner template;

    /**
     * Creates an instance of BuildDefinitionTemplateInner class.
     */
    public BuildDefinitionTemplateInner() {
    }

    /**
     * Get the canDelete property: Indicates whether the template can be deleted.
     * 
     * @return the canDelete value.
     */
    public Boolean canDelete() {
        return this.canDelete;
    }

    /**
     * Set the canDelete property: Indicates whether the template can be deleted.
     * 
     * @param canDelete the canDelete value to set.
     * @return the BuildDefinitionTemplateInner object itself.
     */
    public BuildDefinitionTemplateInner withCanDelete(Boolean canDelete) {
        this.canDelete = canDelete;
        return this;
    }

    /**
     * Get the category property: The template category.
     * 
     * @return the category value.
     */
    public String category() {
        return this.category;
    }

    /**
     * Set the category property: The template category.
     * 
     * @param category the category value to set.
     * @return the BuildDefinitionTemplateInner object itself.
     */
    public BuildDefinitionTemplateInner withCategory(String category) {
        this.category = category;
        return this;
    }

    /**
     * Get the defaultHostedQueue property: An optional hosted agent queue for the template to use by default.
     * 
     * @return the defaultHostedQueue value.
     */
    public String defaultHostedQueue() {
        return this.defaultHostedQueue;
    }

    /**
     * Set the defaultHostedQueue property: An optional hosted agent queue for the template to use by default.
     * 
     * @param defaultHostedQueue the defaultHostedQueue value to set.
     * @return the BuildDefinitionTemplateInner object itself.
     */
    public BuildDefinitionTemplateInner withDefaultHostedQueue(String defaultHostedQueue) {
        this.defaultHostedQueue = defaultHostedQueue;
        return this;
    }

    /**
     * Get the description property: A description of the template.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: A description of the template.
     * 
     * @param description the description value to set.
     * @return the BuildDefinitionTemplateInner object itself.
     */
    public BuildDefinitionTemplateInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the icons property: Dictionary of &lt;string&gt;.
     * 
     * @return the icons value.
     */
    public Map<String, String> icons() {
        return this.icons;
    }

    /**
     * Set the icons property: Dictionary of &lt;string&gt;.
     * 
     * @param icons the icons value to set.
     * @return the BuildDefinitionTemplateInner object itself.
     */
    public BuildDefinitionTemplateInner withIcons(Map<String, String> icons) {
        this.icons = icons;
        return this;
    }

    /**
     * Get the iconTaskId property: The ID of the task whose icon is used when showing this template in the UI.
     * 
     * @return the iconTaskId value.
     */
    public UUID iconTaskId() {
        return this.iconTaskId;
    }

    /**
     * Set the iconTaskId property: The ID of the task whose icon is used when showing this template in the UI.
     * 
     * @param iconTaskId the iconTaskId value to set.
     * @return the BuildDefinitionTemplateInner object itself.
     */
    public BuildDefinitionTemplateInner withIconTaskId(UUID iconTaskId) {
        this.iconTaskId = iconTaskId;
        return this;
    }

    /**
     * Get the id property: The ID of the template.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ID of the template.
     * 
     * @param id the id value to set.
     * @return the BuildDefinitionTemplateInner object itself.
     */
    public BuildDefinitionTemplateInner withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: The name of the template.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the template.
     * 
     * @param name the name value to set.
     * @return the BuildDefinitionTemplateInner object itself.
     */
    public BuildDefinitionTemplateInner withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the template property: The actual template.
     * 
     * @return the template value.
     */
    public BuildDefinitionInner template() {
        return this.template;
    }

    /**
     * Set the template property: The actual template.
     * 
     * @param template the template value to set.
     * @return the BuildDefinitionTemplateInner object itself.
     */
    public BuildDefinitionTemplateInner withTemplate(BuildDefinitionInner template) {
        this.template = template;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (template() != null) {
            template().validate();
        }
    }
}

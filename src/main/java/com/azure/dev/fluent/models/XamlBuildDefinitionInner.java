// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.dev.models.BuildReason;
import com.azure.dev.models.BuildRepository;
import com.azure.dev.models.DefinitionQueueStatus;
import com.azure.dev.models.DefinitionReference;
import com.azure.dev.models.DefinitionTriggerType;
import com.azure.dev.models.DefinitionType;
import com.azure.dev.models.ReferenceLinks;
import com.azure.dev.models.TeamProjectReference;
import com.azure.dev.models.XamlBuildReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * The XamlBuildDefinition model.
 */
@Fluent
public final class XamlBuildDefinitionInner extends DefinitionReference {
    /*
     * The class to represent a collection of REST reference links.
     */
    @JsonProperty(value = "_links")
    private ReferenceLinks links;

    /*
     * Batch size of the definition
     */
    @JsonProperty(value = "batchSize")
    private Integer batchSize;

    /*
     * The buildArgs property.
     */
    @JsonProperty(value = "buildArgs")
    private String buildArgs;

    /*
     * The continuous integration quiet period
     */
    @JsonProperty(value = "continuousIntegrationQuietPeriod")
    private Integer continuousIntegrationQuietPeriod;

    /*
     * The build controller
     */
    @JsonProperty(value = "controller")
    private BuildControllerInner controller;

    /*
     * The date this definition was created
     */
    @JsonProperty(value = "createdOn")
    private OffsetDateTime createdOn;

    /*
     * Default drop location for builds from this definition
     */
    @JsonProperty(value = "defaultDropLocation")
    private String defaultDropLocation;

    /*
     * Description of the definition
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The last build on this definition
     */
    @JsonProperty(value = "lastBuild")
    private XamlBuildReference lastBuild;

    /*
     * The repository
     */
    @JsonProperty(value = "repository")
    private BuildRepository repository;

    /*
     * The reasons supported by the template
     */
    @JsonProperty(value = "supportedReasons")
    private BuildReason supportedReasons;

    /*
     * How builds are triggered from this definition
     */
    @JsonProperty(value = "triggerType")
    private DefinitionTriggerType triggerType;

    /**
     * Creates an instance of XamlBuildDefinitionInner class.
     */
    public XamlBuildDefinitionInner() {
    }

    /**
     * Get the links property: The class to represent a collection of REST reference links.
     * 
     * @return the links value.
     */
    public ReferenceLinks links() {
        return this.links;
    }

    /**
     * Set the links property: The class to represent a collection of REST reference links.
     * 
     * @param links the links value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withLinks(ReferenceLinks links) {
        this.links = links;
        return this;
    }

    /**
     * Get the batchSize property: Batch size of the definition.
     * 
     * @return the batchSize value.
     */
    public Integer batchSize() {
        return this.batchSize;
    }

    /**
     * Set the batchSize property: Batch size of the definition.
     * 
     * @param batchSize the batchSize value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withBatchSize(Integer batchSize) {
        this.batchSize = batchSize;
        return this;
    }

    /**
     * Get the buildArgs property: The buildArgs property.
     * 
     * @return the buildArgs value.
     */
    public String buildArgs() {
        return this.buildArgs;
    }

    /**
     * Set the buildArgs property: The buildArgs property.
     * 
     * @param buildArgs the buildArgs value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withBuildArgs(String buildArgs) {
        this.buildArgs = buildArgs;
        return this;
    }

    /**
     * Get the continuousIntegrationQuietPeriod property: The continuous integration quiet period.
     * 
     * @return the continuousIntegrationQuietPeriod value.
     */
    public Integer continuousIntegrationQuietPeriod() {
        return this.continuousIntegrationQuietPeriod;
    }

    /**
     * Set the continuousIntegrationQuietPeriod property: The continuous integration quiet period.
     * 
     * @param continuousIntegrationQuietPeriod the continuousIntegrationQuietPeriod value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withContinuousIntegrationQuietPeriod(Integer continuousIntegrationQuietPeriod) {
        this.continuousIntegrationQuietPeriod = continuousIntegrationQuietPeriod;
        return this;
    }

    /**
     * Get the controller property: The build controller.
     * 
     * @return the controller value.
     */
    public BuildControllerInner controller() {
        return this.controller;
    }

    /**
     * Set the controller property: The build controller.
     * 
     * @param controller the controller value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withController(BuildControllerInner controller) {
        this.controller = controller;
        return this;
    }

    /**
     * Get the createdOn property: The date this definition was created.
     * 
     * @return the createdOn value.
     */
    public OffsetDateTime createdOn() {
        return this.createdOn;
    }

    /**
     * Set the createdOn property: The date this definition was created.
     * 
     * @param createdOn the createdOn value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withCreatedOn(OffsetDateTime createdOn) {
        this.createdOn = createdOn;
        return this;
    }

    /**
     * Get the defaultDropLocation property: Default drop location for builds from this definition.
     * 
     * @return the defaultDropLocation value.
     */
    public String defaultDropLocation() {
        return this.defaultDropLocation;
    }

    /**
     * Set the defaultDropLocation property: Default drop location for builds from this definition.
     * 
     * @param defaultDropLocation the defaultDropLocation value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withDefaultDropLocation(String defaultDropLocation) {
        this.defaultDropLocation = defaultDropLocation;
        return this;
    }

    /**
     * Get the description property: Description of the definition.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: Description of the definition.
     * 
     * @param description the description value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the lastBuild property: The last build on this definition.
     * 
     * @return the lastBuild value.
     */
    public XamlBuildReference lastBuild() {
        return this.lastBuild;
    }

    /**
     * Set the lastBuild property: The last build on this definition.
     * 
     * @param lastBuild the lastBuild value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withLastBuild(XamlBuildReference lastBuild) {
        this.lastBuild = lastBuild;
        return this;
    }

    /**
     * Get the repository property: The repository.
     * 
     * @return the repository value.
     */
    public BuildRepository repository() {
        return this.repository;
    }

    /**
     * Set the repository property: The repository.
     * 
     * @param repository the repository value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withRepository(BuildRepository repository) {
        this.repository = repository;
        return this;
    }

    /**
     * Get the supportedReasons property: The reasons supported by the template.
     * 
     * @return the supportedReasons value.
     */
    public BuildReason supportedReasons() {
        return this.supportedReasons;
    }

    /**
     * Set the supportedReasons property: The reasons supported by the template.
     * 
     * @param supportedReasons the supportedReasons value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withSupportedReasons(BuildReason supportedReasons) {
        this.supportedReasons = supportedReasons;
        return this;
    }

    /**
     * Get the triggerType property: How builds are triggered from this definition.
     * 
     * @return the triggerType value.
     */
    public DefinitionTriggerType triggerType() {
        return this.triggerType;
    }

    /**
     * Set the triggerType property: How builds are triggered from this definition.
     * 
     * @param triggerType the triggerType value to set.
     * @return the XamlBuildDefinitionInner object itself.
     */
    public XamlBuildDefinitionInner withTriggerType(DefinitionTriggerType triggerType) {
        this.triggerType = triggerType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withCreatedDate(OffsetDateTime createdDate) {
        super.withCreatedDate(createdDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withId(Integer id) {
        super.withId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withPath(String path) {
        super.withPath(path);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withProject(TeamProjectReference project) {
        super.withProject(project);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withQueueStatus(DefinitionQueueStatus queueStatus) {
        super.withQueueStatus(queueStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withRevision(Integer revision) {
        super.withRevision(revision);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withType(DefinitionType type) {
        super.withType(type);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withUri(String uri) {
        super.withUri(uri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public XamlBuildDefinitionInner withUrl(String url) {
        super.withUrl(url);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (links() != null) {
            links().validate();
        }
        if (controller() != null) {
            controller().validate();
        }
        if (lastBuild() != null) {
            lastBuild().validate();
        }
        if (repository() != null) {
            repository().validate();
        }
    }
}

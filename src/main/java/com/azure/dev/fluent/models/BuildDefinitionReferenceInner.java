// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.dev.models.AgentPoolQueue;
import com.azure.dev.models.DefinitionQuality;
import com.azure.dev.models.DefinitionQueueStatus;
import com.azure.dev.models.DefinitionReference;
import com.azure.dev.models.DefinitionType;
import com.azure.dev.models.IdentityRef;
import com.azure.dev.models.ReferenceLinks;
import com.azure.dev.models.TeamProjectReference;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Represents a reference to a build definition.
 */
@Fluent
public class BuildDefinitionReferenceInner extends DefinitionReference {
    /*
     * The class to represent a collection of REST reference links.
     */
    @JsonProperty(value = "_links")
    private ReferenceLinks links;

    /*
     * The author of the definition.
     */
    @JsonProperty(value = "authoredBy")
    private IdentityRef authoredBy;

    /*
     * A reference to the definition that this definition is a draft of, if this is a draft definition.
     */
    @JsonProperty(value = "draftOf")
    private DefinitionReference draftOf;

    /*
     * The list of drafts associated with this definition, if this is not a draft definition.
     */
    @JsonProperty(value = "drafts")
    private List<DefinitionReference> drafts;

    /*
     * Data representation of a build.
     */
    @JsonProperty(value = "latestBuild")
    private BuildInner latestBuild;

    /*
     * Data representation of a build.
     */
    @JsonProperty(value = "latestCompletedBuild")
    private BuildInner latestCompletedBuild;

    /*
     * The metrics property.
     */
    @JsonProperty(value = "metrics")
    private List<BuildMetricInner> metrics;

    /*
     * The quality of the definition document (draft, etc.)
     */
    @JsonProperty(value = "quality")
    private DefinitionQuality quality;

    /*
     * The default queue for builds run against this definition.
     */
    @JsonProperty(value = "queue")
    private AgentPoolQueue queue;

    /**
     * Creates an instance of BuildDefinitionReferenceInner class.
     */
    public BuildDefinitionReferenceInner() {
    }

    /**
     * Get the links property: The class to represent a collection of REST reference links.
     * 
     * @return the links value.
     */
    public ReferenceLinks links() {
        return this.links;
    }

    /**
     * Set the links property: The class to represent a collection of REST reference links.
     * 
     * @param links the links value to set.
     * @return the BuildDefinitionReferenceInner object itself.
     */
    public BuildDefinitionReferenceInner withLinks(ReferenceLinks links) {
        this.links = links;
        return this;
    }

    /**
     * Get the authoredBy property: The author of the definition.
     * 
     * @return the authoredBy value.
     */
    public IdentityRef authoredBy() {
        return this.authoredBy;
    }

    /**
     * Set the authoredBy property: The author of the definition.
     * 
     * @param authoredBy the authoredBy value to set.
     * @return the BuildDefinitionReferenceInner object itself.
     */
    public BuildDefinitionReferenceInner withAuthoredBy(IdentityRef authoredBy) {
        this.authoredBy = authoredBy;
        return this;
    }

    /**
     * Get the draftOf property: A reference to the definition that this definition is a draft of, if this is a draft
     * definition.
     * 
     * @return the draftOf value.
     */
    public DefinitionReference draftOf() {
        return this.draftOf;
    }

    /**
     * Set the draftOf property: A reference to the definition that this definition is a draft of, if this is a draft
     * definition.
     * 
     * @param draftOf the draftOf value to set.
     * @return the BuildDefinitionReferenceInner object itself.
     */
    public BuildDefinitionReferenceInner withDraftOf(DefinitionReference draftOf) {
        this.draftOf = draftOf;
        return this;
    }

    /**
     * Get the drafts property: The list of drafts associated with this definition, if this is not a draft definition.
     * 
     * @return the drafts value.
     */
    public List<DefinitionReference> drafts() {
        return this.drafts;
    }

    /**
     * Set the drafts property: The list of drafts associated with this definition, if this is not a draft definition.
     * 
     * @param drafts the drafts value to set.
     * @return the BuildDefinitionReferenceInner object itself.
     */
    public BuildDefinitionReferenceInner withDrafts(List<DefinitionReference> drafts) {
        this.drafts = drafts;
        return this;
    }

    /**
     * Get the latestBuild property: Data representation of a build.
     * 
     * @return the latestBuild value.
     */
    public BuildInner latestBuild() {
        return this.latestBuild;
    }

    /**
     * Set the latestBuild property: Data representation of a build.
     * 
     * @param latestBuild the latestBuild value to set.
     * @return the BuildDefinitionReferenceInner object itself.
     */
    public BuildDefinitionReferenceInner withLatestBuild(BuildInner latestBuild) {
        this.latestBuild = latestBuild;
        return this;
    }

    /**
     * Get the latestCompletedBuild property: Data representation of a build.
     * 
     * @return the latestCompletedBuild value.
     */
    public BuildInner latestCompletedBuild() {
        return this.latestCompletedBuild;
    }

    /**
     * Set the latestCompletedBuild property: Data representation of a build.
     * 
     * @param latestCompletedBuild the latestCompletedBuild value to set.
     * @return the BuildDefinitionReferenceInner object itself.
     */
    public BuildDefinitionReferenceInner withLatestCompletedBuild(BuildInner latestCompletedBuild) {
        this.latestCompletedBuild = latestCompletedBuild;
        return this;
    }

    /**
     * Get the metrics property: The metrics property.
     * 
     * @return the metrics value.
     */
    public List<BuildMetricInner> metrics() {
        return this.metrics;
    }

    /**
     * Set the metrics property: The metrics property.
     * 
     * @param metrics the metrics value to set.
     * @return the BuildDefinitionReferenceInner object itself.
     */
    public BuildDefinitionReferenceInner withMetrics(List<BuildMetricInner> metrics) {
        this.metrics = metrics;
        return this;
    }

    /**
     * Get the quality property: The quality of the definition document (draft, etc.).
     * 
     * @return the quality value.
     */
    public DefinitionQuality quality() {
        return this.quality;
    }

    /**
     * Set the quality property: The quality of the definition document (draft, etc.).
     * 
     * @param quality the quality value to set.
     * @return the BuildDefinitionReferenceInner object itself.
     */
    public BuildDefinitionReferenceInner withQuality(DefinitionQuality quality) {
        this.quality = quality;
        return this;
    }

    /**
     * Get the queue property: The default queue for builds run against this definition.
     * 
     * @return the queue value.
     */
    public AgentPoolQueue queue() {
        return this.queue;
    }

    /**
     * Set the queue property: The default queue for builds run against this definition.
     * 
     * @param queue the queue value to set.
     * @return the BuildDefinitionReferenceInner object itself.
     */
    public BuildDefinitionReferenceInner withQueue(AgentPoolQueue queue) {
        this.queue = queue;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withCreatedDate(OffsetDateTime createdDate) {
        super.withCreatedDate(createdDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withId(Integer id) {
        super.withId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withPath(String path) {
        super.withPath(path);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withProject(TeamProjectReference project) {
        super.withProject(project);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withQueueStatus(DefinitionQueueStatus queueStatus) {
        super.withQueueStatus(queueStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withRevision(Integer revision) {
        super.withRevision(revision);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withType(DefinitionType type) {
        super.withType(type);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withUri(String uri) {
        super.withUri(uri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinitionReferenceInner withUrl(String url) {
        super.withUrl(url);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (links() != null) {
            links().validate();
        }
        if (authoredBy() != null) {
            authoredBy().validate();
        }
        if (draftOf() != null) {
            draftOf().validate();
        }
        if (drafts() != null) {
            drafts().forEach(e -> e.validate());
        }
        if (latestBuild() != null) {
            latestBuild().validate();
        }
        if (latestCompletedBuild() != null) {
            latestCompletedBuild().validate();
        }
        if (metrics() != null) {
            metrics().forEach(e -> e.validate());
        }
        if (queue() != null) {
            queue().validate();
        }
    }
}

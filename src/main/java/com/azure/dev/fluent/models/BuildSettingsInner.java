// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.dev.models.RetentionPolicy;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents system-wide build settings.
 */
@Fluent
public final class BuildSettingsInner {
    /*
     * The number of days to keep records of deleted builds.
     */
    @JsonProperty(value = "daysToKeepDeletedBuildsBeforeDestroy")
    private Integer daysToKeepDeletedBuildsBeforeDestroy;

    /*
     * The default retention policy.
     */
    @JsonProperty(value = "defaultRetentionPolicy")
    private RetentionPolicy defaultRetentionPolicy;

    /*
     * The maximum retention policy.
     */
    @JsonProperty(value = "maximumRetentionPolicy")
    private RetentionPolicy maximumRetentionPolicy;

    /**
     * Creates an instance of BuildSettingsInner class.
     */
    public BuildSettingsInner() {
    }

    /**
     * Get the daysToKeepDeletedBuildsBeforeDestroy property: The number of days to keep records of deleted builds.
     * 
     * @return the daysToKeepDeletedBuildsBeforeDestroy value.
     */
    public Integer daysToKeepDeletedBuildsBeforeDestroy() {
        return this.daysToKeepDeletedBuildsBeforeDestroy;
    }

    /**
     * Set the daysToKeepDeletedBuildsBeforeDestroy property: The number of days to keep records of deleted builds.
     * 
     * @param daysToKeepDeletedBuildsBeforeDestroy the daysToKeepDeletedBuildsBeforeDestroy value to set.
     * @return the BuildSettingsInner object itself.
     */
    public BuildSettingsInner withDaysToKeepDeletedBuildsBeforeDestroy(Integer daysToKeepDeletedBuildsBeforeDestroy) {
        this.daysToKeepDeletedBuildsBeforeDestroy = daysToKeepDeletedBuildsBeforeDestroy;
        return this;
    }

    /**
     * Get the defaultRetentionPolicy property: The default retention policy.
     * 
     * @return the defaultRetentionPolicy value.
     */
    public RetentionPolicy defaultRetentionPolicy() {
        return this.defaultRetentionPolicy;
    }

    /**
     * Set the defaultRetentionPolicy property: The default retention policy.
     * 
     * @param defaultRetentionPolicy the defaultRetentionPolicy value to set.
     * @return the BuildSettingsInner object itself.
     */
    public BuildSettingsInner withDefaultRetentionPolicy(RetentionPolicy defaultRetentionPolicy) {
        this.defaultRetentionPolicy = defaultRetentionPolicy;
        return this;
    }

    /**
     * Get the maximumRetentionPolicy property: The maximum retention policy.
     * 
     * @return the maximumRetentionPolicy value.
     */
    public RetentionPolicy maximumRetentionPolicy() {
        return this.maximumRetentionPolicy;
    }

    /**
     * Set the maximumRetentionPolicy property: The maximum retention policy.
     * 
     * @param maximumRetentionPolicy the maximumRetentionPolicy value to set.
     * @return the BuildSettingsInner object itself.
     */
    public BuildSettingsInner withMaximumRetentionPolicy(RetentionPolicy maximumRetentionPolicy) {
        this.maximumRetentionPolicy = maximumRetentionPolicy;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (defaultRetentionPolicy() != null) {
            defaultRetentionPolicy().validate();
        }
        if (maximumRetentionPolicy() != null) {
            maximumRetentionPolicy().validate();
        }
    }
}

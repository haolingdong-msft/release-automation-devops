// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.dev.models.RetentionSetting;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Contains the settings for the retention rules.
 */
@Fluent
public final class ProjectRetentionSettingInner {
    /*
     * The rules for artifact retention. Artifacts can not live longer than a run, so will be overridden by a shorter run purge setting.
     */
    @JsonProperty(value = "purgeArtifacts")
    private RetentionSetting purgeArtifacts;

    /*
     * The rules for pull request pipeline run retention.
     */
    @JsonProperty(value = "purgePullRequestRuns")
    private RetentionSetting purgePullRequestRuns;

    /*
     * The rules for pipeline run retention.
     */
    @JsonProperty(value = "purgeRuns")
    private RetentionSetting purgeRuns;

    /*
     * The rules for retaining runs per protected branch.
     */
    @JsonProperty(value = "retainRunsPerProtectedBranch")
    private RetentionSetting retainRunsPerProtectedBranch;

    /**
     * Creates an instance of ProjectRetentionSettingInner class.
     */
    public ProjectRetentionSettingInner() {
    }

    /**
     * Get the purgeArtifacts property: The rules for artifact retention. Artifacts can not live longer than a run, so
     * will be overridden by a shorter run purge setting.
     * 
     * @return the purgeArtifacts value.
     */
    public RetentionSetting purgeArtifacts() {
        return this.purgeArtifacts;
    }

    /**
     * Set the purgeArtifacts property: The rules for artifact retention. Artifacts can not live longer than a run, so
     * will be overridden by a shorter run purge setting.
     * 
     * @param purgeArtifacts the purgeArtifacts value to set.
     * @return the ProjectRetentionSettingInner object itself.
     */
    public ProjectRetentionSettingInner withPurgeArtifacts(RetentionSetting purgeArtifacts) {
        this.purgeArtifacts = purgeArtifacts;
        return this;
    }

    /**
     * Get the purgePullRequestRuns property: The rules for pull request pipeline run retention.
     * 
     * @return the purgePullRequestRuns value.
     */
    public RetentionSetting purgePullRequestRuns() {
        return this.purgePullRequestRuns;
    }

    /**
     * Set the purgePullRequestRuns property: The rules for pull request pipeline run retention.
     * 
     * @param purgePullRequestRuns the purgePullRequestRuns value to set.
     * @return the ProjectRetentionSettingInner object itself.
     */
    public ProjectRetentionSettingInner withPurgePullRequestRuns(RetentionSetting purgePullRequestRuns) {
        this.purgePullRequestRuns = purgePullRequestRuns;
        return this;
    }

    /**
     * Get the purgeRuns property: The rules for pipeline run retention.
     * 
     * @return the purgeRuns value.
     */
    public RetentionSetting purgeRuns() {
        return this.purgeRuns;
    }

    /**
     * Set the purgeRuns property: The rules for pipeline run retention.
     * 
     * @param purgeRuns the purgeRuns value to set.
     * @return the ProjectRetentionSettingInner object itself.
     */
    public ProjectRetentionSettingInner withPurgeRuns(RetentionSetting purgeRuns) {
        this.purgeRuns = purgeRuns;
        return this;
    }

    /**
     * Get the retainRunsPerProtectedBranch property: The rules for retaining runs per protected branch.
     * 
     * @return the retainRunsPerProtectedBranch value.
     */
    public RetentionSetting retainRunsPerProtectedBranch() {
        return this.retainRunsPerProtectedBranch;
    }

    /**
     * Set the retainRunsPerProtectedBranch property: The rules for retaining runs per protected branch.
     * 
     * @param retainRunsPerProtectedBranch the retainRunsPerProtectedBranch value to set.
     * @return the ProjectRetentionSettingInner object itself.
     */
    public ProjectRetentionSettingInner
        withRetainRunsPerProtectedBranch(RetentionSetting retainRunsPerProtectedBranch) {
        this.retainRunsPerProtectedBranch = retainRunsPerProtectedBranch;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (purgeArtifacts() != null) {
            purgeArtifacts().validate();
        }
        if (purgePullRequestRuns() != null) {
            purgePullRequestRuns().validate();
        }
        if (purgeRuns() != null) {
            purgeRuns().validate();
        }
        if (retainRunsPerProtectedBranch() != null) {
            retainRunsPerProtectedBranch().validate();
        }
    }
}

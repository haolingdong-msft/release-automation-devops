// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.dev.models.AgentPoolQueue;
import com.azure.dev.models.BuildAuthorizationScope;
import com.azure.dev.models.BuildDefinitionReference32;
import com.azure.dev.models.BuildDefinitionStep;
import com.azure.dev.models.BuildDefinitionVariable;
import com.azure.dev.models.BuildOption;
import com.azure.dev.models.BuildRepository;
import com.azure.dev.models.BuildTrigger;
import com.azure.dev.models.DefinitionQuality;
import com.azure.dev.models.DefinitionQueueStatus;
import com.azure.dev.models.DefinitionReference;
import com.azure.dev.models.DefinitionType;
import com.azure.dev.models.Demand;
import com.azure.dev.models.IdentityRef;
import com.azure.dev.models.ProcessParameters;
import com.azure.dev.models.ReferenceLinks;
import com.azure.dev.models.RetentionPolicy;
import com.azure.dev.models.TeamProjectReference;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * For back-compat with extensions that use the old Steps format instead of Process and Phases.
 */
@Fluent
public final class BuildDefinition32Inner extends BuildDefinitionReference32 {
    /*
     * Indicates whether badges are enabled for this definition
     */
    @JsonProperty(value = "badgeEnabled")
    private Boolean badgeEnabled;

    /*
     * The build property.
     */
    @JsonProperty(value = "build")
    private List<BuildDefinitionStep> build;

    /*
     * The build number format
     */
    @JsonProperty(value = "buildNumberFormat")
    private String buildNumberFormat;

    /*
     * The comment entered when saving the definition
     */
    @JsonProperty(value = "comment")
    private String comment;

    /*
     * The demands property.
     */
    @JsonProperty(value = "demands")
    private List<Demand> demands;

    /*
     * The description
     */
    @JsonProperty(value = "description")
    private String description;

    /*
     * The drop location for the definition
     */
    @JsonProperty(value = "dropLocation")
    private String dropLocation;

    /*
     * The job authorization scope for builds which are queued against this definition
     */
    @JsonProperty(value = "jobAuthorizationScope")
    private BuildAuthorizationScope jobAuthorizationScope;

    /*
     * The job cancel timeout in minutes for builds which are cancelled by user for this definition
     */
    @JsonProperty(value = "jobCancelTimeoutInMinutes")
    private Integer jobCancelTimeoutInMinutes;

    /*
     * The job execution timeout in minutes for builds which are queued against this definition
     */
    @JsonProperty(value = "jobTimeoutInMinutes")
    private Integer jobTimeoutInMinutes;

    /*
     * Data representation of a build.
     */
    @JsonProperty(value = "latestBuild")
    private BuildInner latestBuild;

    /*
     * Data representation of a build.
     */
    @JsonProperty(value = "latestCompletedBuild")
    private BuildInner latestCompletedBuild;

    /*
     * The options property.
     */
    @JsonProperty(value = "options")
    private List<BuildOption> options;

    /*
     * Process Parameters
     */
    @JsonProperty(value = "processParameters")
    private ProcessParameters processParameters;

    /*
     * The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
     */
    @JsonProperty(value = "properties")
    private PropertiesCollectionInner properties;

    /*
     * The repository
     */
    @JsonProperty(value = "repository")
    private BuildRepository repository;

    /*
     * The retentionRules property.
     */
    @JsonProperty(value = "retentionRules")
    private List<RetentionPolicy> retentionRules;

    /*
     * The tags property.
     */
    @JsonProperty(value = "tags")
    private List<String> tags;

    /*
     * The triggers property.
     */
    @JsonProperty(value = "triggers")
    private List<BuildTrigger> triggers;

    /*
     * Dictionary of <BuildDefinitionVariable>
     */
    @JsonProperty(value = "variables")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, BuildDefinitionVariable> variables;

    /**
     * Creates an instance of BuildDefinition32Inner class.
     */
    public BuildDefinition32Inner() {
    }

    /**
     * Get the badgeEnabled property: Indicates whether badges are enabled for this definition.
     * 
     * @return the badgeEnabled value.
     */
    public Boolean badgeEnabled() {
        return this.badgeEnabled;
    }

    /**
     * Set the badgeEnabled property: Indicates whether badges are enabled for this definition.
     * 
     * @param badgeEnabled the badgeEnabled value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withBadgeEnabled(Boolean badgeEnabled) {
        this.badgeEnabled = badgeEnabled;
        return this;
    }

    /**
     * Get the build property: The build property.
     * 
     * @return the build value.
     */
    public List<BuildDefinitionStep> build() {
        return this.build;
    }

    /**
     * Set the build property: The build property.
     * 
     * @param build the build value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withBuild(List<BuildDefinitionStep> build) {
        this.build = build;
        return this;
    }

    /**
     * Get the buildNumberFormat property: The build number format.
     * 
     * @return the buildNumberFormat value.
     */
    public String buildNumberFormat() {
        return this.buildNumberFormat;
    }

    /**
     * Set the buildNumberFormat property: The build number format.
     * 
     * @param buildNumberFormat the buildNumberFormat value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withBuildNumberFormat(String buildNumberFormat) {
        this.buildNumberFormat = buildNumberFormat;
        return this;
    }

    /**
     * Get the comment property: The comment entered when saving the definition.
     * 
     * @return the comment value.
     */
    public String comment() {
        return this.comment;
    }

    /**
     * Set the comment property: The comment entered when saving the definition.
     * 
     * @param comment the comment value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withComment(String comment) {
        this.comment = comment;
        return this;
    }

    /**
     * Get the demands property: The demands property.
     * 
     * @return the demands value.
     */
    public List<Demand> demands() {
        return this.demands;
    }

    /**
     * Set the demands property: The demands property.
     * 
     * @param demands the demands value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withDemands(List<Demand> demands) {
        this.demands = demands;
        return this;
    }

    /**
     * Get the description property: The description.
     * 
     * @return the description value.
     */
    public String description() {
        return this.description;
    }

    /**
     * Set the description property: The description.
     * 
     * @param description the description value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withDescription(String description) {
        this.description = description;
        return this;
    }

    /**
     * Get the dropLocation property: The drop location for the definition.
     * 
     * @return the dropLocation value.
     */
    public String dropLocation() {
        return this.dropLocation;
    }

    /**
     * Set the dropLocation property: The drop location for the definition.
     * 
     * @param dropLocation the dropLocation value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withDropLocation(String dropLocation) {
        this.dropLocation = dropLocation;
        return this;
    }

    /**
     * Get the jobAuthorizationScope property: The job authorization scope for builds which are queued against this
     * definition.
     * 
     * @return the jobAuthorizationScope value.
     */
    public BuildAuthorizationScope jobAuthorizationScope() {
        return this.jobAuthorizationScope;
    }

    /**
     * Set the jobAuthorizationScope property: The job authorization scope for builds which are queued against this
     * definition.
     * 
     * @param jobAuthorizationScope the jobAuthorizationScope value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withJobAuthorizationScope(BuildAuthorizationScope jobAuthorizationScope) {
        this.jobAuthorizationScope = jobAuthorizationScope;
        return this;
    }

    /**
     * Get the jobCancelTimeoutInMinutes property: The job cancel timeout in minutes for builds which are cancelled by
     * user for this definition.
     * 
     * @return the jobCancelTimeoutInMinutes value.
     */
    public Integer jobCancelTimeoutInMinutes() {
        return this.jobCancelTimeoutInMinutes;
    }

    /**
     * Set the jobCancelTimeoutInMinutes property: The job cancel timeout in minutes for builds which are cancelled by
     * user for this definition.
     * 
     * @param jobCancelTimeoutInMinutes the jobCancelTimeoutInMinutes value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withJobCancelTimeoutInMinutes(Integer jobCancelTimeoutInMinutes) {
        this.jobCancelTimeoutInMinutes = jobCancelTimeoutInMinutes;
        return this;
    }

    /**
     * Get the jobTimeoutInMinutes property: The job execution timeout in minutes for builds which are queued against
     * this definition.
     * 
     * @return the jobTimeoutInMinutes value.
     */
    public Integer jobTimeoutInMinutes() {
        return this.jobTimeoutInMinutes;
    }

    /**
     * Set the jobTimeoutInMinutes property: The job execution timeout in minutes for builds which are queued against
     * this definition.
     * 
     * @param jobTimeoutInMinutes the jobTimeoutInMinutes value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withJobTimeoutInMinutes(Integer jobTimeoutInMinutes) {
        this.jobTimeoutInMinutes = jobTimeoutInMinutes;
        return this;
    }

    /**
     * Get the latestBuild property: Data representation of a build.
     * 
     * @return the latestBuild value.
     */
    public BuildInner latestBuild() {
        return this.latestBuild;
    }

    /**
     * Set the latestBuild property: Data representation of a build.
     * 
     * @param latestBuild the latestBuild value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withLatestBuild(BuildInner latestBuild) {
        this.latestBuild = latestBuild;
        return this;
    }

    /**
     * Get the latestCompletedBuild property: Data representation of a build.
     * 
     * @return the latestCompletedBuild value.
     */
    public BuildInner latestCompletedBuild() {
        return this.latestCompletedBuild;
    }

    /**
     * Set the latestCompletedBuild property: Data representation of a build.
     * 
     * @param latestCompletedBuild the latestCompletedBuild value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withLatestCompletedBuild(BuildInner latestCompletedBuild) {
        this.latestCompletedBuild = latestCompletedBuild;
        return this;
    }

    /**
     * Get the options property: The options property.
     * 
     * @return the options value.
     */
    public List<BuildOption> options() {
        return this.options;
    }

    /**
     * Set the options property: The options property.
     * 
     * @param options the options value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withOptions(List<BuildOption> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the processParameters property: Process Parameters.
     * 
     * @return the processParameters value.
     */
    public ProcessParameters processParameters() {
        return this.processParameters;
    }

    /**
     * Set the processParameters property: Process Parameters.
     * 
     * @param processParameters the processParameters value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withProcessParameters(ProcessParameters processParameters) {
        this.processParameters = processParameters;
        return this;
    }

    /**
     * Get the properties property: The class represents a property bag as a collection of key-value pairs. Values of
     * all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of
     * type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String.
     * Byte[] expected as base64 encoded string.
     * 
     * @return the properties value.
     */
    public PropertiesCollectionInner properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The class represents a property bag as a collection of key-value pairs. Values of
     * all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of
     * type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String.
     * Byte[] expected as base64 encoded string.
     * 
     * @param properties the properties value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withProperties(PropertiesCollectionInner properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the repository property: The repository.
     * 
     * @return the repository value.
     */
    public BuildRepository repository() {
        return this.repository;
    }

    /**
     * Set the repository property: The repository.
     * 
     * @param repository the repository value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withRepository(BuildRepository repository) {
        this.repository = repository;
        return this;
    }

    /**
     * Get the retentionRules property: The retentionRules property.
     * 
     * @return the retentionRules value.
     */
    public List<RetentionPolicy> retentionRules() {
        return this.retentionRules;
    }

    /**
     * Set the retentionRules property: The retentionRules property.
     * 
     * @param retentionRules the retentionRules value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withRetentionRules(List<RetentionPolicy> retentionRules) {
        this.retentionRules = retentionRules;
        return this;
    }

    /**
     * Get the tags property: The tags property.
     * 
     * @return the tags value.
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags property.
     * 
     * @param tags the tags value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withTags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the triggers property: The triggers property.
     * 
     * @return the triggers value.
     */
    public List<BuildTrigger> triggers() {
        return this.triggers;
    }

    /**
     * Set the triggers property: The triggers property.
     * 
     * @param triggers the triggers value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withTriggers(List<BuildTrigger> triggers) {
        this.triggers = triggers;
        return this;
    }

    /**
     * Get the variables property: Dictionary of &lt;BuildDefinitionVariable&gt;.
     * 
     * @return the variables value.
     */
    public Map<String, BuildDefinitionVariable> variables() {
        return this.variables;
    }

    /**
     * Set the variables property: Dictionary of &lt;BuildDefinitionVariable&gt;.
     * 
     * @param variables the variables value to set.
     * @return the BuildDefinition32Inner object itself.
     */
    public BuildDefinition32Inner withVariables(Map<String, BuildDefinitionVariable> variables) {
        this.variables = variables;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withLinks(ReferenceLinks links) {
        super.withLinks(links);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withAuthoredBy(IdentityRef authoredBy) {
        super.withAuthoredBy(authoredBy);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withDraftOf(DefinitionReference draftOf) {
        super.withDraftOf(draftOf);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withDrafts(List<DefinitionReference> drafts) {
        super.withDrafts(drafts);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withMetrics(List<BuildMetricInner> metrics) {
        super.withMetrics(metrics);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withQuality(DefinitionQuality quality) {
        super.withQuality(quality);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withQueue(AgentPoolQueue queue) {
        super.withQueue(queue);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withCreatedDate(OffsetDateTime createdDate) {
        super.withCreatedDate(createdDate);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withId(Integer id) {
        super.withId(id);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withName(String name) {
        super.withName(name);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withPath(String path) {
        super.withPath(path);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withProject(TeamProjectReference project) {
        super.withProject(project);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withQueueStatus(DefinitionQueueStatus queueStatus) {
        super.withQueueStatus(queueStatus);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withRevision(Integer revision) {
        super.withRevision(revision);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withType(DefinitionType type) {
        super.withType(type);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withUri(String uri) {
        super.withUri(uri);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public BuildDefinition32Inner withUrl(String url) {
        super.withUrl(url);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
        if (build() != null) {
            build().forEach(e -> e.validate());
        }
        if (demands() != null) {
            demands().forEach(e -> e.validate());
        }
        if (latestBuild() != null) {
            latestBuild().validate();
        }
        if (latestCompletedBuild() != null) {
            latestCompletedBuild().validate();
        }
        if (options() != null) {
            options().forEach(e -> e.validate());
        }
        if (processParameters() != null) {
            processParameters().validate();
        }
        if (properties() != null) {
            properties().validate();
        }
        if (repository() != null) {
            repository().validate();
        }
        if (retentionRules() != null) {
            retentionRules().forEach(e -> e.validate());
        }
        if (triggers() != null) {
            triggers().forEach(e -> e.validate());
        }
        if (variables() != null) {
            variables().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }
}

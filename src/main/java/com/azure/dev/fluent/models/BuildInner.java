// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.dev.models.AgentPoolQueue;
import com.azure.dev.models.AgentSpecification;
import com.azure.dev.models.BuildLogReference;
import com.azure.dev.models.BuildReason;
import com.azure.dev.models.BuildRepository;
import com.azure.dev.models.BuildRequestValidationResult;
import com.azure.dev.models.BuildResult;
import com.azure.dev.models.BuildStatus;
import com.azure.dev.models.DefinitionReference;
import com.azure.dev.models.Demand;
import com.azure.dev.models.IdentityRef;
import com.azure.dev.models.QueueOptions;
import com.azure.dev.models.QueuePriority;
import com.azure.dev.models.ReferenceLinks;
import com.azure.dev.models.TaskOrchestrationPlanReference;
import com.azure.dev.models.TeamProjectReference;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;

/**
 * Data representation of a build.
 */
@Fluent
public final class BuildInner {
    /*
     * The class to represent a collection of REST reference links.
     */
    @JsonProperty(value = "_links")
    private ReferenceLinks links;

    /*
     * The agent specification for the build.
     */
    @JsonProperty(value = "agentSpecification")
    private AgentSpecification agentSpecification;

    /*
     * Append Commit Message To BuildNumber in UI.
     */
    @JsonProperty(value = "appendCommitMessageToRunName")
    private Boolean appendCommitMessageToRunName;

    /*
     * The build number/name of the build.
     */
    @JsonProperty(value = "buildNumber")
    private String buildNumber;

    /*
     * The build number revision.
     */
    @JsonProperty(value = "buildNumberRevision")
    private Integer buildNumberRevision;

    /*
     * The build controller. This is only set if the definition type is Xaml.
     */
    @JsonProperty(value = "controller")
    private BuildControllerInner controller;

    /*
     * The definition associated with the build.
     */
    @JsonProperty(value = "definition")
    private DefinitionReference definition;

    /*
     * Indicates whether the build has been deleted.
     */
    @JsonProperty(value = "deleted")
    private Boolean deleted;

    /*
     * The identity of the process or person that deleted the build.
     */
    @JsonProperty(value = "deletedBy")
    private IdentityRef deletedBy;

    /*
     * The date the build was deleted.
     */
    @JsonProperty(value = "deletedDate")
    private OffsetDateTime deletedDate;

    /*
     * The description of how the build was deleted.
     */
    @JsonProperty(value = "deletedReason")
    private String deletedReason;

    /*
     * A list of demands that represents the agent capabilities required by this build.
     */
    @JsonProperty(value = "demands")
    private List<Demand> demands;

    /*
     * The time that the build was completed.
     */
    @JsonProperty(value = "finishTime")
    private OffsetDateTime finishTime;

    /*
     * The ID of the build.
     */
    @JsonProperty(value = "id")
    private Integer id;

    /*
     * The identity representing the process or person that last changed the build.
     */
    @JsonProperty(value = "lastChangedBy")
    private IdentityRef lastChangedBy;

    /*
     * The date the build was last changed.
     */
    @JsonProperty(value = "lastChangedDate")
    private OffsetDateTime lastChangedDate;

    /*
     * Information about the build logs.
     */
    @JsonProperty(value = "logs")
    private BuildLogReference logs;

    /*
     * The orchestration plan for the build.
     */
    @JsonProperty(value = "orchestrationPlan")
    private TaskOrchestrationPlanReference orchestrationPlan;

    /*
     * The parameters for the build.
     */
    @JsonProperty(value = "parameters")
    private String parameters;

    /*
     * Orchestration plans associated with the build (build, cleanup)
     */
    @JsonProperty(value = "plans")
    private List<TaskOrchestrationPlanReference> plans;

    /*
     * Azure Pipelines does not support job priority. This field is deprecated.
     */
    @JsonProperty(value = "priority")
    private QueuePriority priority;

    /*
     * The team project.
     */
    @JsonProperty(value = "project")
    private TeamProjectReference project;

    /*
     * The class represents a property bag as a collection of key-value pairs. Values of all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String. Byte[] expected as base64 encoded string.
     */
    @JsonProperty(value = "properties")
    private PropertiesCollectionInner properties;

    /*
     * The quality of the xaml build (good, bad, etc.)
     */
    @JsonProperty(value = "quality")
    private String quality;

    /*
     * The queue. This is only set if the definition type is Build. WARNING: this field is deprecated and does not corresponds to the jobs queues.
     */
    @JsonProperty(value = "queue")
    private AgentPoolQueue queue;

    /*
     * Additional options for queueing the build.
     */
    @JsonProperty(value = "queueOptions")
    private QueueOptions queueOptions;

    /*
     * The current position of the build in the queue.
     */
    @JsonProperty(value = "queuePosition")
    private Integer queuePosition;

    /*
     * The time that the build was queued.
     */
    @JsonProperty(value = "queueTime")
    private OffsetDateTime queueTime;

    /*
     * The reason that the build was created.
     */
    @JsonProperty(value = "reason")
    private BuildReason reason;

    /*
     * The repository.
     */
    @JsonProperty(value = "repository")
    private BuildRepository repository;

    /*
     * The identity that queued the build.
     */
    @JsonProperty(value = "requestedBy")
    private IdentityRef requestedBy;

    /*
     * The identity on whose behalf the build was queued.
     */
    @JsonProperty(value = "requestedFor")
    private IdentityRef requestedFor;

    /*
     * The build result.
     */
    @JsonProperty(value = "result")
    private BuildResult result;

    /*
     * Indicates whether the build is retained by a release.
     */
    @JsonProperty(value = "retainedByRelease")
    private Boolean retainedByRelease;

    /*
     * The source branch.
     */
    @JsonProperty(value = "sourceBranch")
    private String sourceBranch;

    /*
     * The source version.
     */
    @JsonProperty(value = "sourceVersion")
    private String sourceVersion;

    /*
     * The time that the build was started.
     */
    @JsonProperty(value = "startTime")
    private OffsetDateTime startTime;

    /*
     * The status of the build.
     */
    @JsonProperty(value = "status")
    private BuildStatus status;

    /*
     * The tags property.
     */
    @JsonProperty(value = "tags")
    private List<String> tags;

    /*
     * Parameters to template expression evaluation
     */
    @JsonProperty(value = "templateParameters")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> templateParameters;

    /*
     * The build that triggered this build via a Build completion trigger.
     */
    @JsonProperty(value = "triggeredByBuild")
    private BuildInner triggeredByBuild;

    /*
     * Sourceprovider-specific information about what triggered the build
     */
    @JsonProperty(value = "triggerInfo")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> triggerInfo;

    /*
     * The URI of the build.
     */
    @JsonProperty(value = "uri")
    private String uri;

    /*
     * The REST URL of the build.
     */
    @JsonProperty(value = "url")
    private String url;

    /*
     * The validationResults property.
     */
    @JsonProperty(value = "validationResults")
    private List<BuildRequestValidationResult> validationResults;

    /**
     * Creates an instance of BuildInner class.
     */
    public BuildInner() {
    }

    /**
     * Get the links property: The class to represent a collection of REST reference links.
     * 
     * @return the links value.
     */
    public ReferenceLinks links() {
        return this.links;
    }

    /**
     * Set the links property: The class to represent a collection of REST reference links.
     * 
     * @param links the links value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withLinks(ReferenceLinks links) {
        this.links = links;
        return this;
    }

    /**
     * Get the agentSpecification property: The agent specification for the build.
     * 
     * @return the agentSpecification value.
     */
    public AgentSpecification agentSpecification() {
        return this.agentSpecification;
    }

    /**
     * Set the agentSpecification property: The agent specification for the build.
     * 
     * @param agentSpecification the agentSpecification value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withAgentSpecification(AgentSpecification agentSpecification) {
        this.agentSpecification = agentSpecification;
        return this;
    }

    /**
     * Get the appendCommitMessageToRunName property: Append Commit Message To BuildNumber in UI.
     * 
     * @return the appendCommitMessageToRunName value.
     */
    public Boolean appendCommitMessageToRunName() {
        return this.appendCommitMessageToRunName;
    }

    /**
     * Set the appendCommitMessageToRunName property: Append Commit Message To BuildNumber in UI.
     * 
     * @param appendCommitMessageToRunName the appendCommitMessageToRunName value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withAppendCommitMessageToRunName(Boolean appendCommitMessageToRunName) {
        this.appendCommitMessageToRunName = appendCommitMessageToRunName;
        return this;
    }

    /**
     * Get the buildNumber property: The build number/name of the build.
     * 
     * @return the buildNumber value.
     */
    public String buildNumber() {
        return this.buildNumber;
    }

    /**
     * Set the buildNumber property: The build number/name of the build.
     * 
     * @param buildNumber the buildNumber value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withBuildNumber(String buildNumber) {
        this.buildNumber = buildNumber;
        return this;
    }

    /**
     * Get the buildNumberRevision property: The build number revision.
     * 
     * @return the buildNumberRevision value.
     */
    public Integer buildNumberRevision() {
        return this.buildNumberRevision;
    }

    /**
     * Set the buildNumberRevision property: The build number revision.
     * 
     * @param buildNumberRevision the buildNumberRevision value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withBuildNumberRevision(Integer buildNumberRevision) {
        this.buildNumberRevision = buildNumberRevision;
        return this;
    }

    /**
     * Get the controller property: The build controller. This is only set if the definition type is Xaml.
     * 
     * @return the controller value.
     */
    public BuildControllerInner controller() {
        return this.controller;
    }

    /**
     * Set the controller property: The build controller. This is only set if the definition type is Xaml.
     * 
     * @param controller the controller value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withController(BuildControllerInner controller) {
        this.controller = controller;
        return this;
    }

    /**
     * Get the definition property: The definition associated with the build.
     * 
     * @return the definition value.
     */
    public DefinitionReference definition() {
        return this.definition;
    }

    /**
     * Set the definition property: The definition associated with the build.
     * 
     * @param definition the definition value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withDefinition(DefinitionReference definition) {
        this.definition = definition;
        return this;
    }

    /**
     * Get the deleted property: Indicates whether the build has been deleted.
     * 
     * @return the deleted value.
     */
    public Boolean deleted() {
        return this.deleted;
    }

    /**
     * Set the deleted property: Indicates whether the build has been deleted.
     * 
     * @param deleted the deleted value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }

    /**
     * Get the deletedBy property: The identity of the process or person that deleted the build.
     * 
     * @return the deletedBy value.
     */
    public IdentityRef deletedBy() {
        return this.deletedBy;
    }

    /**
     * Set the deletedBy property: The identity of the process or person that deleted the build.
     * 
     * @param deletedBy the deletedBy value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withDeletedBy(IdentityRef deletedBy) {
        this.deletedBy = deletedBy;
        return this;
    }

    /**
     * Get the deletedDate property: The date the build was deleted.
     * 
     * @return the deletedDate value.
     */
    public OffsetDateTime deletedDate() {
        return this.deletedDate;
    }

    /**
     * Set the deletedDate property: The date the build was deleted.
     * 
     * @param deletedDate the deletedDate value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withDeletedDate(OffsetDateTime deletedDate) {
        this.deletedDate = deletedDate;
        return this;
    }

    /**
     * Get the deletedReason property: The description of how the build was deleted.
     * 
     * @return the deletedReason value.
     */
    public String deletedReason() {
        return this.deletedReason;
    }

    /**
     * Set the deletedReason property: The description of how the build was deleted.
     * 
     * @param deletedReason the deletedReason value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withDeletedReason(String deletedReason) {
        this.deletedReason = deletedReason;
        return this;
    }

    /**
     * Get the demands property: A list of demands that represents the agent capabilities required by this build.
     * 
     * @return the demands value.
     */
    public List<Demand> demands() {
        return this.demands;
    }

    /**
     * Set the demands property: A list of demands that represents the agent capabilities required by this build.
     * 
     * @param demands the demands value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withDemands(List<Demand> demands) {
        this.demands = demands;
        return this;
    }

    /**
     * Get the finishTime property: The time that the build was completed.
     * 
     * @return the finishTime value.
     */
    public OffsetDateTime finishTime() {
        return this.finishTime;
    }

    /**
     * Set the finishTime property: The time that the build was completed.
     * 
     * @param finishTime the finishTime value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withFinishTime(OffsetDateTime finishTime) {
        this.finishTime = finishTime;
        return this;
    }

    /**
     * Get the id property: The ID of the build.
     * 
     * @return the id value.
     */
    public Integer id() {
        return this.id;
    }

    /**
     * Set the id property: The ID of the build.
     * 
     * @param id the id value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withId(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Get the lastChangedBy property: The identity representing the process or person that last changed the build.
     * 
     * @return the lastChangedBy value.
     */
    public IdentityRef lastChangedBy() {
        return this.lastChangedBy;
    }

    /**
     * Set the lastChangedBy property: The identity representing the process or person that last changed the build.
     * 
     * @param lastChangedBy the lastChangedBy value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withLastChangedBy(IdentityRef lastChangedBy) {
        this.lastChangedBy = lastChangedBy;
        return this;
    }

    /**
     * Get the lastChangedDate property: The date the build was last changed.
     * 
     * @return the lastChangedDate value.
     */
    public OffsetDateTime lastChangedDate() {
        return this.lastChangedDate;
    }

    /**
     * Set the lastChangedDate property: The date the build was last changed.
     * 
     * @param lastChangedDate the lastChangedDate value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withLastChangedDate(OffsetDateTime lastChangedDate) {
        this.lastChangedDate = lastChangedDate;
        return this;
    }

    /**
     * Get the logs property: Information about the build logs.
     * 
     * @return the logs value.
     */
    public BuildLogReference logs() {
        return this.logs;
    }

    /**
     * Set the logs property: Information about the build logs.
     * 
     * @param logs the logs value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withLogs(BuildLogReference logs) {
        this.logs = logs;
        return this;
    }

    /**
     * Get the orchestrationPlan property: The orchestration plan for the build.
     * 
     * @return the orchestrationPlan value.
     */
    public TaskOrchestrationPlanReference orchestrationPlan() {
        return this.orchestrationPlan;
    }

    /**
     * Set the orchestrationPlan property: The orchestration plan for the build.
     * 
     * @param orchestrationPlan the orchestrationPlan value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withOrchestrationPlan(TaskOrchestrationPlanReference orchestrationPlan) {
        this.orchestrationPlan = orchestrationPlan;
        return this;
    }

    /**
     * Get the parameters property: The parameters for the build.
     * 
     * @return the parameters value.
     */
    public String parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: The parameters for the build.
     * 
     * @param parameters the parameters value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withParameters(String parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the plans property: Orchestration plans associated with the build (build, cleanup).
     * 
     * @return the plans value.
     */
    public List<TaskOrchestrationPlanReference> plans() {
        return this.plans;
    }

    /**
     * Set the plans property: Orchestration plans associated with the build (build, cleanup).
     * 
     * @param plans the plans value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withPlans(List<TaskOrchestrationPlanReference> plans) {
        this.plans = plans;
        return this;
    }

    /**
     * Get the priority property: Azure Pipelines does not support job priority. This field is deprecated.
     * 
     * @return the priority value.
     */
    public QueuePriority priority() {
        return this.priority;
    }

    /**
     * Set the priority property: Azure Pipelines does not support job priority. This field is deprecated.
     * 
     * @param priority the priority value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withPriority(QueuePriority priority) {
        this.priority = priority;
        return this;
    }

    /**
     * Get the project property: The team project.
     * 
     * @return the project value.
     */
    public TeamProjectReference project() {
        return this.project;
    }

    /**
     * Set the project property: The team project.
     * 
     * @param project the project value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withProject(TeamProjectReference project) {
        this.project = project;
        return this;
    }

    /**
     * Get the properties property: The class represents a property bag as a collection of key-value pairs. Values of
     * all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of
     * type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String.
     * Byte[] expected as base64 encoded string.
     * 
     * @return the properties value.
     */
    public PropertiesCollectionInner properties() {
        return this.properties;
    }

    /**
     * Set the properties property: The class represents a property bag as a collection of key-value pairs. Values of
     * all primitive types (any type with a `TypeCode != TypeCode.Object`) except for `DBNull` are accepted. Values of
     * type Byte[], Int32, Double, DateType and String preserve their type, other primitives are retuned as a String.
     * Byte[] expected as base64 encoded string.
     * 
     * @param properties the properties value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withProperties(PropertiesCollectionInner properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the quality property: The quality of the xaml build (good, bad, etc.).
     * 
     * @return the quality value.
     */
    public String quality() {
        return this.quality;
    }

    /**
     * Set the quality property: The quality of the xaml build (good, bad, etc.).
     * 
     * @param quality the quality value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withQuality(String quality) {
        this.quality = quality;
        return this;
    }

    /**
     * Get the queue property: The queue. This is only set if the definition type is Build. WARNING: this field is
     * deprecated and does not corresponds to the jobs queues.
     * 
     * @return the queue value.
     */
    public AgentPoolQueue queue() {
        return this.queue;
    }

    /**
     * Set the queue property: The queue. This is only set if the definition type is Build. WARNING: this field is
     * deprecated and does not corresponds to the jobs queues.
     * 
     * @param queue the queue value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withQueue(AgentPoolQueue queue) {
        this.queue = queue;
        return this;
    }

    /**
     * Get the queueOptions property: Additional options for queueing the build.
     * 
     * @return the queueOptions value.
     */
    public QueueOptions queueOptions() {
        return this.queueOptions;
    }

    /**
     * Set the queueOptions property: Additional options for queueing the build.
     * 
     * @param queueOptions the queueOptions value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withQueueOptions(QueueOptions queueOptions) {
        this.queueOptions = queueOptions;
        return this;
    }

    /**
     * Get the queuePosition property: The current position of the build in the queue.
     * 
     * @return the queuePosition value.
     */
    public Integer queuePosition() {
        return this.queuePosition;
    }

    /**
     * Set the queuePosition property: The current position of the build in the queue.
     * 
     * @param queuePosition the queuePosition value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withQueuePosition(Integer queuePosition) {
        this.queuePosition = queuePosition;
        return this;
    }

    /**
     * Get the queueTime property: The time that the build was queued.
     * 
     * @return the queueTime value.
     */
    public OffsetDateTime queueTime() {
        return this.queueTime;
    }

    /**
     * Set the queueTime property: The time that the build was queued.
     * 
     * @param queueTime the queueTime value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withQueueTime(OffsetDateTime queueTime) {
        this.queueTime = queueTime;
        return this;
    }

    /**
     * Get the reason property: The reason that the build was created.
     * 
     * @return the reason value.
     */
    public BuildReason reason() {
        return this.reason;
    }

    /**
     * Set the reason property: The reason that the build was created.
     * 
     * @param reason the reason value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withReason(BuildReason reason) {
        this.reason = reason;
        return this;
    }

    /**
     * Get the repository property: The repository.
     * 
     * @return the repository value.
     */
    public BuildRepository repository() {
        return this.repository;
    }

    /**
     * Set the repository property: The repository.
     * 
     * @param repository the repository value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withRepository(BuildRepository repository) {
        this.repository = repository;
        return this;
    }

    /**
     * Get the requestedBy property: The identity that queued the build.
     * 
     * @return the requestedBy value.
     */
    public IdentityRef requestedBy() {
        return this.requestedBy;
    }

    /**
     * Set the requestedBy property: The identity that queued the build.
     * 
     * @param requestedBy the requestedBy value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withRequestedBy(IdentityRef requestedBy) {
        this.requestedBy = requestedBy;
        return this;
    }

    /**
     * Get the requestedFor property: The identity on whose behalf the build was queued.
     * 
     * @return the requestedFor value.
     */
    public IdentityRef requestedFor() {
        return this.requestedFor;
    }

    /**
     * Set the requestedFor property: The identity on whose behalf the build was queued.
     * 
     * @param requestedFor the requestedFor value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withRequestedFor(IdentityRef requestedFor) {
        this.requestedFor = requestedFor;
        return this;
    }

    /**
     * Get the result property: The build result.
     * 
     * @return the result value.
     */
    public BuildResult result() {
        return this.result;
    }

    /**
     * Set the result property: The build result.
     * 
     * @param result the result value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withResult(BuildResult result) {
        this.result = result;
        return this;
    }

    /**
     * Get the retainedByRelease property: Indicates whether the build is retained by a release.
     * 
     * @return the retainedByRelease value.
     */
    public Boolean retainedByRelease() {
        return this.retainedByRelease;
    }

    /**
     * Set the retainedByRelease property: Indicates whether the build is retained by a release.
     * 
     * @param retainedByRelease the retainedByRelease value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withRetainedByRelease(Boolean retainedByRelease) {
        this.retainedByRelease = retainedByRelease;
        return this;
    }

    /**
     * Get the sourceBranch property: The source branch.
     * 
     * @return the sourceBranch value.
     */
    public String sourceBranch() {
        return this.sourceBranch;
    }

    /**
     * Set the sourceBranch property: The source branch.
     * 
     * @param sourceBranch the sourceBranch value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withSourceBranch(String sourceBranch) {
        this.sourceBranch = sourceBranch;
        return this;
    }

    /**
     * Get the sourceVersion property: The source version.
     * 
     * @return the sourceVersion value.
     */
    public String sourceVersion() {
        return this.sourceVersion;
    }

    /**
     * Set the sourceVersion property: The source version.
     * 
     * @param sourceVersion the sourceVersion value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withSourceVersion(String sourceVersion) {
        this.sourceVersion = sourceVersion;
        return this;
    }

    /**
     * Get the startTime property: The time that the build was started.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The time that the build was started.
     * 
     * @param startTime the startTime value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the status property: The status of the build.
     * 
     * @return the status value.
     */
    public BuildStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The status of the build.
     * 
     * @param status the status value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withStatus(BuildStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Get the tags property: The tags property.
     * 
     * @return the tags value.
     */
    public List<String> tags() {
        return this.tags;
    }

    /**
     * Set the tags property: The tags property.
     * 
     * @param tags the tags value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withTags(List<String> tags) {
        this.tags = tags;
        return this;
    }

    /**
     * Get the templateParameters property: Parameters to template expression evaluation.
     * 
     * @return the templateParameters value.
     */
    public Map<String, String> templateParameters() {
        return this.templateParameters;
    }

    /**
     * Set the templateParameters property: Parameters to template expression evaluation.
     * 
     * @param templateParameters the templateParameters value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withTemplateParameters(Map<String, String> templateParameters) {
        this.templateParameters = templateParameters;
        return this;
    }

    /**
     * Get the triggeredByBuild property: The build that triggered this build via a Build completion trigger.
     * 
     * @return the triggeredByBuild value.
     */
    public BuildInner triggeredByBuild() {
        return this.triggeredByBuild;
    }

    /**
     * Set the triggeredByBuild property: The build that triggered this build via a Build completion trigger.
     * 
     * @param triggeredByBuild the triggeredByBuild value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withTriggeredByBuild(BuildInner triggeredByBuild) {
        this.triggeredByBuild = triggeredByBuild;
        return this;
    }

    /**
     * Get the triggerInfo property: Sourceprovider-specific information about what triggered the build.
     * 
     * @return the triggerInfo value.
     */
    public Map<String, String> triggerInfo() {
        return this.triggerInfo;
    }

    /**
     * Set the triggerInfo property: Sourceprovider-specific information about what triggered the build.
     * 
     * @param triggerInfo the triggerInfo value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withTriggerInfo(Map<String, String> triggerInfo) {
        this.triggerInfo = triggerInfo;
        return this;
    }

    /**
     * Get the uri property: The URI of the build.
     * 
     * @return the uri value.
     */
    public String uri() {
        return this.uri;
    }

    /**
     * Set the uri property: The URI of the build.
     * 
     * @param uri the uri value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withUri(String uri) {
        this.uri = uri;
        return this;
    }

    /**
     * Get the url property: The REST URL of the build.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: The REST URL of the build.
     * 
     * @param url the url value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the validationResults property: The validationResults property.
     * 
     * @return the validationResults value.
     */
    public List<BuildRequestValidationResult> validationResults() {
        return this.validationResults;
    }

    /**
     * Set the validationResults property: The validationResults property.
     * 
     * @param validationResults the validationResults value to set.
     * @return the BuildInner object itself.
     */
    public BuildInner withValidationResults(List<BuildRequestValidationResult> validationResults) {
        this.validationResults = validationResults;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (links() != null) {
            links().validate();
        }
        if (agentSpecification() != null) {
            agentSpecification().validate();
        }
        if (controller() != null) {
            controller().validate();
        }
        if (definition() != null) {
            definition().validate();
        }
        if (deletedBy() != null) {
            deletedBy().validate();
        }
        if (demands() != null) {
            demands().forEach(e -> e.validate());
        }
        if (lastChangedBy() != null) {
            lastChangedBy().validate();
        }
        if (logs() != null) {
            logs().validate();
        }
        if (orchestrationPlan() != null) {
            orchestrationPlan().validate();
        }
        if (plans() != null) {
            plans().forEach(e -> e.validate());
        }
        if (project() != null) {
            project().validate();
        }
        if (properties() != null) {
            properties().validate();
        }
        if (queue() != null) {
            queue().validate();
        }
        if (repository() != null) {
            repository().validate();
        }
        if (requestedBy() != null) {
            requestedBy().validate();
        }
        if (requestedFor() != null) {
            requestedFor().validate();
        }
        if (triggeredByBuild() != null) {
            triggeredByBuild().validate();
        }
        if (validationResults() != null) {
            validationResults().forEach(e -> e.validate());
        }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.fluent.models;

import com.azure.core.annotation.Fluent;
import com.azure.dev.models.SourceRepository;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * A set of repositories returned from the source provider.
 */
@Fluent
public final class SourceRepositoriesInner {
    /*
     * A token used to continue this paged request; 'null' if the request is complete
     */
    @JsonProperty(value = "continuationToken")
    private String continuationToken;

    /*
     * The number of repositories requested for each page
     */
    @JsonProperty(value = "pageLength")
    private Integer pageLength;

    /*
     * A list of repositories
     */
    @JsonProperty(value = "repositories")
    private List<SourceRepository> repositories;

    /*
     * The total number of pages, or '-1' if unknown
     */
    @JsonProperty(value = "totalPageCount")
    private Integer totalPageCount;

    /**
     * Creates an instance of SourceRepositoriesInner class.
     */
    public SourceRepositoriesInner() {
    }

    /**
     * Get the continuationToken property: A token used to continue this paged request; 'null' if the request is
     * complete.
     * 
     * @return the continuationToken value.
     */
    public String continuationToken() {
        return this.continuationToken;
    }

    /**
     * Set the continuationToken property: A token used to continue this paged request; 'null' if the request is
     * complete.
     * 
     * @param continuationToken the continuationToken value to set.
     * @return the SourceRepositoriesInner object itself.
     */
    public SourceRepositoriesInner withContinuationToken(String continuationToken) {
        this.continuationToken = continuationToken;
        return this;
    }

    /**
     * Get the pageLength property: The number of repositories requested for each page.
     * 
     * @return the pageLength value.
     */
    public Integer pageLength() {
        return this.pageLength;
    }

    /**
     * Set the pageLength property: The number of repositories requested for each page.
     * 
     * @param pageLength the pageLength value to set.
     * @return the SourceRepositoriesInner object itself.
     */
    public SourceRepositoriesInner withPageLength(Integer pageLength) {
        this.pageLength = pageLength;
        return this;
    }

    /**
     * Get the repositories property: A list of repositories.
     * 
     * @return the repositories value.
     */
    public List<SourceRepository> repositories() {
        return this.repositories;
    }

    /**
     * Set the repositories property: A list of repositories.
     * 
     * @param repositories the repositories value to set.
     * @return the SourceRepositoriesInner object itself.
     */
    public SourceRepositoriesInner withRepositories(List<SourceRepository> repositories) {
        this.repositories = repositories;
        return this;
    }

    /**
     * Get the totalPageCount property: The total number of pages, or '-1' if unknown.
     * 
     * @return the totalPageCount value.
     */
    public Integer totalPageCount() {
        return this.totalPageCount;
    }

    /**
     * Set the totalPageCount property: The total number of pages, or '-1' if unknown.
     * 
     * @param totalPageCount the totalPageCount value to set.
     * @return the SourceRepositoriesInner object itself.
     */
    public SourceRepositoriesInner withTotalPageCount(Integer totalPageCount) {
        this.totalPageCount = totalPageCount;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (repositories() != null) {
            repositories().forEach(e -> e.validate());
        }
    }
}

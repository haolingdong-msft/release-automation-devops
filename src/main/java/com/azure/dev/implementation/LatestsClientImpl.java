// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.dev.fluent.LatestsClient;
import com.azure.dev.fluent.models.BuildInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in LatestsClient.
 */
public final class LatestsClientImpl implements LatestsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LatestsService service;

    /**
     * The service client containing this operation class.
     */
    private final DevClientImpl client;

    /**
     * Initializes an instance of LatestsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    LatestsClientImpl(DevClientImpl client) {
        this.service = RestProxy.create(LatestsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientLatests to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientLatests")
    public interface LatestsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/latest/{definition}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BuildInner>> get(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("definition") String definition, @QueryParam("branchName") String branchName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets the latest build for a definition, optionally scoped to a specific branch.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definition definition name with optional leading folder path, or the definition id.
     * @param branchName optional parameter that indicates the specific branch to use. If not specified, the default
     * branch is used.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the latest build for a definition, optionally scoped to a specific branch along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildInner>> getWithResponseAsync(String organization, String project, String definition,
        String branchName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (definition == null) {
            return Mono.error(new IllegalArgumentException("Parameter definition is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), organization, project, definition,
                branchName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the latest build for a definition, optionally scoped to a specific branch.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definition definition name with optional leading folder path, or the definition id.
     * @param branchName optional parameter that indicates the specific branch to use. If not specified, the default
     * branch is used.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the latest build for a definition, optionally scoped to a specific branch along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildInner>> getWithResponseAsync(String organization, String project, String definition,
        String branchName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (definition == null) {
            return Mono.error(new IllegalArgumentException("Parameter definition is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), organization, project, definition, branchName,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the latest build for a definition, optionally scoped to a specific branch.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definition definition name with optional leading folder path, or the definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the latest build for a definition, optionally scoped to a specific branch on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BuildInner> getAsync(String organization, String project, String definition) {
        final String branchName = null;
        return getWithResponseAsync(organization, project, definition, branchName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the latest build for a definition, optionally scoped to a specific branch.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definition definition name with optional leading folder path, or the definition id.
     * @param branchName optional parameter that indicates the specific branch to use. If not specified, the default
     * branch is used.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the latest build for a definition, optionally scoped to a specific branch along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BuildInner> getWithResponse(String organization, String project, String definition,
        String branchName, Context context) {
        return getWithResponseAsync(organization, project, definition, branchName, context).block();
    }

    /**
     * Gets the latest build for a definition, optionally scoped to a specific branch.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definition definition name with optional leading folder path, or the definition id.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the latest build for a definition, optionally scoped to a specific branch.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildInner get(String organization, String project, String definition) {
        final String branchName = null;
        return getWithResponse(organization, project, definition, branchName, Context.NONE).getValue();
    }
}

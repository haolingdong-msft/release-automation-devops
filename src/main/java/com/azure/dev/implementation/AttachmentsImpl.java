// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.AttachmentsClient;
import com.azure.dev.fluent.models.AttachmentInner;
import com.azure.dev.models.Attachment;
import com.azure.dev.models.Attachments;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

public final class AttachmentsImpl implements Attachments {
    private static final ClientLogger LOGGER = new ClientLogger(AttachmentsImpl.class);

    private final AttachmentsClient innerClient;

    private final com.azure.dev.DevManager serviceManager;

    public AttachmentsImpl(AttachmentsClient innerClient, com.azure.dev.DevManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Void> getWithResponse(String organization, String project, int buildId, UUID timelineId,
        UUID recordId, String type, String name, Context context) {
        return this.serviceClient()
            .getWithResponse(organization, project, buildId, timelineId, recordId, type, name, context);
    }

    public void get(String organization, String project, int buildId, UUID timelineId, UUID recordId, String type,
        String name) {
        this.serviceClient().get(organization, project, buildId, timelineId, recordId, type, name);
    }

    public Response<List<Attachment>> listWithResponse(String organization, String project, int buildId, String type,
        Context context) {
        Response<List<AttachmentInner>> inner
            = this.serviceClient().listWithResponse(organization, project, buildId, type, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new AttachmentImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<Attachment> list(String organization, String project, int buildId, String type) {
        List<AttachmentInner> inner = this.serviceClient().list(organization, project, buildId, type);
        if (inner != null) {
            return Collections.unmodifiableList(
                inner.stream().map(inner1 -> new AttachmentImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    private AttachmentsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.dev.DevManager manager() {
        return this.serviceManager;
    }
}

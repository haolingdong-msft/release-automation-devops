// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.dev.fluent.ArtifactsClient;
import com.azure.dev.fluent.models.ArtifactInner;
import com.azure.dev.fluent.models.BuildArtifactInner;
import com.azure.dev.models.GetArtifactExpandOptions;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in ArtifactsClient.
 */
public final class ArtifactsClientImpl implements ArtifactsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final ArtifactsService service;

    /**
     * The service client containing this operation class.
     */
    private final DevClientImpl client;

    /**
     * Initializes an instance of ArtifactsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    ArtifactsClientImpl(DevClientImpl client) {
        this.service
            = RestProxy.create(ArtifactsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientArtifacts to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientArtifacts")
    public interface ArtifactsService {
        @Headers({ "Content-Type: application/json" })
        @Post("/{organization}/{project}/_apis/build/builds/{buildId}/artifacts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BuildArtifactInner>> create(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") BuildArtifactInner body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/artifacts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<BuildArtifactInner>>> list(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/artifacts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BuildArtifactInner>> getArtifact(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("artifactName") String artifactName,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/artifacts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> getFile(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("artifactName") String artifactName,
            @QueryParam("fileId") String fileId, @QueryParam("fileName") String fileName,
            @QueryParam("api-version") String apiVersion, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/pipelines/{pipelineId}/runs/{runId}/artifacts")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<ArtifactInner>> get(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("pipelineId") int pipelineId, @PathParam("runId") int runId,
            @QueryParam("artifactName") String artifactName, @QueryParam("$expand") GetArtifactExpandOptions expand,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Associates an artifact with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an artifact produced by a build along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildArtifactInner>> createWithResponseAsync(String organization, String project, int buildId,
        BuildArtifactInner body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.create(this.client.getEndpoint(), organization, project, buildId,
                this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Associates an artifact with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The artifact.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an artifact produced by a build along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildArtifactInner>> createWithResponseAsync(String organization, String project, int buildId,
        BuildArtifactInner body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.create(this.client.getEndpoint(), organization, project, buildId, this.client.getApiVersion(),
            body, accept, context);
    }

    /**
     * Associates an artifact with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an artifact produced by a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BuildArtifactInner> createAsync(String organization, String project, int buildId,
        BuildArtifactInner body) {
        return createWithResponseAsync(organization, project, buildId, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Associates an artifact with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The artifact.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an artifact produced by a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BuildArtifactInner> createWithResponse(String organization, String project, int buildId,
        BuildArtifactInner body, Context context) {
        return createWithResponseAsync(organization, project, buildId, body, context).block();
    }

    /**
     * Associates an artifact with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents an artifact produced by a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildArtifactInner create(String organization, String project, int buildId, BuildArtifactInner body) {
        return createWithResponse(organization, project, buildId, body, Context.NONE).getValue();
    }

    /**
     * Gets all artifacts for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all artifacts for a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildArtifactInner>>> listWithResponseAsync(String organization, String project,
        int buildId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), organization, project, buildId,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all artifacts for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all artifacts for a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildArtifactInner>>> listWithResponseAsync(String organization, String project,
        int buildId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), organization, project, buildId, this.client.getApiVersion(),
            accept, context);
    }

    /**
     * Gets all artifacts for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all artifacts for a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<BuildArtifactInner>> listAsync(String organization, String project, int buildId) {
        return listWithResponseAsync(organization, project, buildId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets all artifacts for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all artifacts for a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<BuildArtifactInner>> listWithResponse(String organization, String project, int buildId,
        Context context) {
        return listWithResponseAsync(organization, project, buildId, context).block();
    }

    /**
     * Gets all artifacts for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all artifacts for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<BuildArtifactInner> list(String organization, String project, int buildId) {
        return listWithResponse(organization, project, buildId, Context.NONE).getValue();
    }

    /**
     * Gets a specific artifact for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact for a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildArtifactInner>> getArtifactWithResponseAsync(String organization, String project,
        int buildId, String artifactName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getArtifact(this.client.getEndpoint(), organization, project, buildId,
                artifactName, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a specific artifact for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact for a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildArtifactInner>> getArtifactWithResponseAsync(String organization, String project,
        int buildId, String artifactName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getArtifact(this.client.getEndpoint(), organization, project, buildId, artifactName,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets a specific artifact for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact for a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BuildArtifactInner> getArtifactAsync(String organization, String project, int buildId,
        String artifactName) {
        return getArtifactWithResponseAsync(organization, project, buildId, artifactName)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a specific artifact for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact for a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BuildArtifactInner> getArtifactWithResponse(String organization, String project, int buildId,
        String artifactName, Context context) {
        return getArtifactWithResponseAsync(organization, project, buildId, artifactName, context).block();
    }

    /**
     * Gets a specific artifact for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildArtifactInner getArtifact(String organization, String project, int buildId, String artifactName) {
        return getArtifactWithResponse(organization, project, buildId, artifactName, Context.NONE).getValue();
    }

    /**
     * Gets a file from the build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @param fileId The primary key for the file.
     * @param fileName The name that the file will be set to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file from the build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> getFileWithResponseAsync(String organization, String project, int buildId,
        String artifactName, String fileId, String fileName) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        if (fileId == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileId is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.getFile(this.client.getEndpoint(), organization, project, buildId,
                artifactName, fileId, fileName, this.client.getApiVersion(), context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a file from the build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @param fileId The primary key for the file.
     * @param fileName The name that the file will be set to.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file from the build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> getFileWithResponseAsync(String organization, String project, int buildId,
        String artifactName, String fileId, String fileName, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        if (fileId == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileId is required and cannot be null."));
        }
        if (fileName == null) {
            return Mono.error(new IllegalArgumentException("Parameter fileName is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service.getFile(this.client.getEndpoint(), organization, project, buildId, artifactName, fileId,
            fileName, this.client.getApiVersion(), context);
    }

    /**
     * Gets a file from the build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @param fileId The primary key for the file.
     * @param fileName The name that the file will be set to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file from the build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> getFileAsync(String organization, String project, int buildId, String artifactName,
        String fileId, String fileName) {
        return getFileWithResponseAsync(organization, project, buildId, artifactName, fileId, fileName)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Gets a file from the build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @param fileId The primary key for the file.
     * @param fileName The name that the file will be set to.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a file from the build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> getFileWithResponse(String organization, String project, int buildId, String artifactName,
        String fileId, String fileName, Context context) {
        return getFileWithResponseAsync(organization, project, buildId, artifactName, fileId, fileName, context)
            .block();
    }

    /**
     * Gets a file from the build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param artifactName The name of the artifact.
     * @param fileId The primary key for the file.
     * @param fileName The name that the file will be set to.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void getFile(String organization, String project, int buildId, String artifactName, String fileId,
        String fileName) {
        getFileWithResponse(organization, project, buildId, artifactName, fileId, fileName, Context.NONE);
    }

    /**
     * Get a specific artifact from a pipeline run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param pipelineId ID of the pipeline.
     * @param runId ID of the run of that pipeline.
     * @param artifactName Name of the artifact.
     * @param expand Expand options. Default is None.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact from a pipeline run along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArtifactInner>> getWithResponseAsync(String organization, String project, int pipelineId,
        int runId, String artifactName, GetArtifactExpandOptions expand) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), organization, project, pipelineId, runId,
                artifactName, expand, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Get a specific artifact from a pipeline run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param pipelineId ID of the pipeline.
     * @param runId ID of the run of that pipeline.
     * @param artifactName Name of the artifact.
     * @param expand Expand options. Default is None.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact from a pipeline run along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<ArtifactInner>> getWithResponseAsync(String organization, String project, int pipelineId,
        int runId, String artifactName, GetArtifactExpandOptions expand, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (artifactName == null) {
            return Mono.error(new IllegalArgumentException("Parameter artifactName is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), organization, project, pipelineId, runId, artifactName, expand,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Get a specific artifact from a pipeline run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param pipelineId ID of the pipeline.
     * @param runId ID of the run of that pipeline.
     * @param artifactName Name of the artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact from a pipeline run on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<ArtifactInner> getAsync(String organization, String project, int pipelineId, int runId,
        String artifactName) {
        final GetArtifactExpandOptions expand = null;
        return getWithResponseAsync(organization, project, pipelineId, runId, artifactName, expand)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Get a specific artifact from a pipeline run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param pipelineId ID of the pipeline.
     * @param runId ID of the run of that pipeline.
     * @param artifactName Name of the artifact.
     * @param expand Expand options. Default is None.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact from a pipeline run along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<ArtifactInner> getWithResponse(String organization, String project, int pipelineId, int runId,
        String artifactName, GetArtifactExpandOptions expand, Context context) {
        return getWithResponseAsync(organization, project, pipelineId, runId, artifactName, expand, context).block();
    }

    /**
     * Get a specific artifact from a pipeline run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param pipelineId ID of the pipeline.
     * @param runId ID of the run of that pipeline.
     * @param artifactName Name of the artifact.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a specific artifact from a pipeline run.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public ArtifactInner get(String organization, String project, int pipelineId, int runId, String artifactName) {
        final GetArtifactExpandOptions expand = null;
        return getWithResponse(organization, project, pipelineId, runId, artifactName, expand, Context.NONE).getValue();
    }
}

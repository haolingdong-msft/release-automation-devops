// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.LeasesClient;
import com.azure.dev.fluent.models.RetentionLeaseInner;
import com.azure.dev.models.Leases;
import com.azure.dev.models.NewRetentionLease;
import com.azure.dev.models.RetentionLease;
import com.azure.dev.models.RetentionLeaseUpdate;
import java.util.Collections;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

public final class LeasesImpl implements Leases {
    private static final ClientLogger LOGGER = new ClientLogger(LeasesImpl.class);

    private final LeasesClient innerClient;

    private final com.azure.dev.DevManager serviceManager;

    public LeasesImpl(LeasesClient innerClient, com.azure.dev.DevManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<List<RetentionLease>> addWithResponse(String organization, String project,
        List<NewRetentionLease> body, Context context) {
        Response<List<RetentionLeaseInner>> inner
            = this.serviceClient().addWithResponse(organization, project, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new RetentionLeaseImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<RetentionLease> add(String organization, String project, List<NewRetentionLease> body) {
        List<RetentionLeaseInner> inner = this.serviceClient().add(organization, project, body);
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new RetentionLeaseImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<Void> deleteWithResponse(String organization, String project, String ids, Context context) {
        return this.serviceClient().deleteWithResponse(organization, project, ids, context);
    }

    public void delete(String organization, String project, String ids) {
        this.serviceClient().delete(organization, project, ids);
    }

    public Response<List<RetentionLease>> getRetentionLeasesByMinimalRetentionLeasesWithResponse(String organization,
        String project, String leasesToFetch, Context context) {
        Response<List<RetentionLeaseInner>> inner = this.serviceClient()
            .getRetentionLeasesByMinimalRetentionLeasesWithResponse(organization, project, leasesToFetch, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new RetentionLeaseImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<RetentionLease> getRetentionLeasesByMinimalRetentionLeases(String organization, String project,
        String leasesToFetch) {
        List<RetentionLeaseInner> inner
            = this.serviceClient().getRetentionLeasesByMinimalRetentionLeases(organization, project, leasesToFetch);
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new RetentionLeaseImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<RetentionLease> getWithResponse(String organization, String project, int leaseId, Context context) {
        Response<RetentionLeaseInner> inner
            = this.serviceClient().getWithResponse(organization, project, leaseId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RetentionLeaseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RetentionLease get(String organization, String project, int leaseId) {
        RetentionLeaseInner inner = this.serviceClient().get(organization, project, leaseId);
        if (inner != null) {
            return new RetentionLeaseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<RetentionLease> updateWithResponse(String organization, String project, int leaseId,
        RetentionLeaseUpdate body, Context context) {
        Response<RetentionLeaseInner> inner
            = this.serviceClient().updateWithResponse(organization, project, leaseId, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new RetentionLeaseImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public RetentionLease update(String organization, String project, int leaseId, RetentionLeaseUpdate body) {
        RetentionLeaseInner inner = this.serviceClient().update(organization, project, leaseId, body);
        if (inner != null) {
            return new RetentionLeaseImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<List<RetentionLease>> getRetentionLeasesByUserIdWithResponse(String organization, String project,
        UUID userOwnerId, Integer definitionId, Integer runId, Context context) {
        Response<List<RetentionLeaseInner>> inner = this.serviceClient()
            .getRetentionLeasesByUserIdWithResponse(organization, project, userOwnerId, definitionId, runId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new RetentionLeaseImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<RetentionLease> getRetentionLeasesByUserId(String organization, String project, UUID userOwnerId) {
        List<RetentionLeaseInner> inner
            = this.serviceClient().getRetentionLeasesByUserId(organization, project, userOwnerId);
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new RetentionLeaseImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<RetentionLease>> getRetentionLeasesByOwnerIdWithResponse(String organization, String project,
        String ownerId, Integer definitionId, Integer runId, Context context) {
        Response<List<RetentionLeaseInner>> inner = this.serviceClient()
            .getRetentionLeasesByOwnerIdWithResponse(organization, project, ownerId, definitionId, runId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new RetentionLeaseImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<RetentionLease> getRetentionLeasesByOwnerId(String organization, String project) {
        List<RetentionLeaseInner> inner = this.serviceClient().getRetentionLeasesByOwnerId(organization, project);
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new RetentionLeaseImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    private LeasesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.dev.DevManager manager() {
        return this.serviceManager;
    }
}

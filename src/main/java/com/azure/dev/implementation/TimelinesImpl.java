// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.TimelinesClient;
import com.azure.dev.fluent.models.TimelineInner;
import com.azure.dev.models.Timeline;
import com.azure.dev.models.Timelines;
import java.util.UUID;

public final class TimelinesImpl implements Timelines {
    private static final ClientLogger LOGGER = new ClientLogger(TimelinesImpl.class);

    private final TimelinesClient innerClient;

    private final com.azure.dev.DevManager serviceManager;

    public TimelinesImpl(TimelinesClient innerClient, com.azure.dev.DevManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Timeline> getWithResponse(String organization, String project, int buildId, UUID timelineId,
        Integer changeId, UUID planId, Context context) {
        Response<TimelineInner> inner = this.serviceClient()
            .getWithResponse(organization, project, buildId, timelineId, changeId, planId, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new TimelineImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Timeline get(String organization, String project, int buildId, UUID timelineId) {
        TimelineInner inner = this.serviceClient().get(organization, project, buildId, timelineId);
        if (inner != null) {
            return new TimelineImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private TimelinesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.dev.DevManager manager() {
        return this.serviceManager;
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.ServiceClient;
import com.azure.core.http.HttpHeaderName;
import com.azure.core.http.HttpHeaders;
import com.azure.core.http.HttpPipeline;
import com.azure.core.http.HttpResponse;
import com.azure.core.http.rest.Response;
import com.azure.core.management.AzureEnvironment;
import com.azure.core.management.exception.ManagementError;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.management.polling.PollerFactory;
import com.azure.core.management.polling.PollResult;
import com.azure.core.util.Context;
import com.azure.core.util.CoreUtils;
import com.azure.core.util.logging.ClientLogger;
import com.azure.core.util.polling.AsyncPollResponse;
import com.azure.core.util.polling.LongRunningOperationStatus;
import com.azure.core.util.polling.PollerFlux;
import com.azure.core.util.serializer.SerializerAdapter;
import com.azure.core.util.serializer.SerializerEncoding;
import com.azure.dev.fluent.ArtifactsClient;
import com.azure.dev.fluent.AttachmentsClient;
import com.azure.dev.fluent.AuthorizedresourcesClient;
import com.azure.dev.fluent.BadgesClient;
import com.azure.dev.fluent.BuildsClient;
import com.azure.dev.fluent.ControllersClient;
import com.azure.dev.fluent.DefinitionsClient;
import com.azure.dev.fluent.DevClient;
import com.azure.dev.fluent.FoldersClient;
import com.azure.dev.fluent.GeneralSettingsClient;
import com.azure.dev.fluent.HistoriesClient;
import com.azure.dev.fluent.LatestsClient;
import com.azure.dev.fluent.LeasesClient;
import com.azure.dev.fluent.LogsClient;
import com.azure.dev.fluent.MetricsClient;
import com.azure.dev.fluent.OptionsClient;
import com.azure.dev.fluent.PipelinesClient;
import com.azure.dev.fluent.PreviewsClient;
import com.azure.dev.fluent.PropertiesClient;
import com.azure.dev.fluent.ReportsClient;
import com.azure.dev.fluent.ResourcesClient;
import com.azure.dev.fluent.ResourceUsagesClient;
import com.azure.dev.fluent.RetentionsClient;
import com.azure.dev.fluent.RunsClient;
import com.azure.dev.fluent.SettingsClient;
import com.azure.dev.fluent.SourceProvidersClient;
import com.azure.dev.fluent.StagesClient;
import com.azure.dev.fluent.StatusClient;
import com.azure.dev.fluent.TagsClient;
import com.azure.dev.fluent.TemplatesClient;
import com.azure.dev.fluent.TimelinesClient;
import com.azure.dev.fluent.YamlsClient;
import java.io.IOException;
import java.lang.reflect.Type;
import java.nio.ByteBuffer;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.time.Duration;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

/**
 * Initializes a new instance of the DevClientImpl type.
 */
@ServiceClient(builder = DevClientBuilder.class)
public final class DevClientImpl implements DevClient {
    /**
     * server parameter.
     */
    private final String endpoint;

    /**
     * Gets server parameter.
     * 
     * @return the endpoint value.
     */
    public String getEndpoint() {
        return this.endpoint;
    }

    /**
     * Api Version.
     */
    private final String apiVersion;

    /**
     * Gets Api Version.
     * 
     * @return the apiVersion value.
     */
    public String getApiVersion() {
        return this.apiVersion;
    }

    /**
     * The HTTP pipeline to send requests through.
     */
    private final HttpPipeline httpPipeline;

    /**
     * Gets The HTTP pipeline to send requests through.
     * 
     * @return the httpPipeline value.
     */
    public HttpPipeline getHttpPipeline() {
        return this.httpPipeline;
    }

    /**
     * The serializer to serialize an object into a string.
     */
    private final SerializerAdapter serializerAdapter;

    /**
     * Gets The serializer to serialize an object into a string.
     * 
     * @return the serializerAdapter value.
     */
    SerializerAdapter getSerializerAdapter() {
        return this.serializerAdapter;
    }

    /**
     * The default poll interval for long-running operation.
     */
    private final Duration defaultPollInterval;

    /**
     * Gets The default poll interval for long-running operation.
     * 
     * @return the defaultPollInterval value.
     */
    public Duration getDefaultPollInterval() {
        return this.defaultPollInterval;
    }

    /**
     * The ControllersClient object to access its operations.
     */
    private final ControllersClient controllers;

    /**
     * Gets the ControllersClient object to access its operations.
     * 
     * @return the ControllersClient object.
     */
    public ControllersClient getControllers() {
        return this.controllers;
    }

    /**
     * The ResourceUsagesClient object to access its operations.
     */
    private final ResourceUsagesClient resourceUsages;

    /**
     * Gets the ResourceUsagesClient object to access its operations.
     * 
     * @return the ResourceUsagesClient object.
     */
    public ResourceUsagesClient getResourceUsages() {
        return this.resourceUsages;
    }

    /**
     * The HistoriesClient object to access its operations.
     */
    private final HistoriesClient histories;

    /**
     * Gets the HistoriesClient object to access its operations.
     * 
     * @return the HistoriesClient object.
     */
    public HistoriesClient getHistories() {
        return this.histories;
    }

    /**
     * The BadgesClient object to access its operations.
     */
    private final BadgesClient badges;

    /**
     * Gets the BadgesClient object to access its operations.
     * 
     * @return the BadgesClient object.
     */
    public BadgesClient getBadges() {
        return this.badges;
    }

    /**
     * The AuthorizedresourcesClient object to access its operations.
     */
    private final AuthorizedresourcesClient authorizedresources;

    /**
     * Gets the AuthorizedresourcesClient object to access its operations.
     * 
     * @return the AuthorizedresourcesClient object.
     */
    public AuthorizedresourcesClient getAuthorizedresources() {
        return this.authorizedresources;
    }

    /**
     * The BuildsClient object to access its operations.
     */
    private final BuildsClient builds;

    /**
     * Gets the BuildsClient object to access its operations.
     * 
     * @return the BuildsClient object.
     */
    public BuildsClient getBuilds() {
        return this.builds;
    }

    /**
     * The AttachmentsClient object to access its operations.
     */
    private final AttachmentsClient attachments;

    /**
     * Gets the AttachmentsClient object to access its operations.
     * 
     * @return the AttachmentsClient object.
     */
    public AttachmentsClient getAttachments() {
        return this.attachments;
    }

    /**
     * The ArtifactsClient object to access its operations.
     */
    private final ArtifactsClient artifacts;

    /**
     * Gets the ArtifactsClient object to access its operations.
     * 
     * @return the ArtifactsClient object.
     */
    public ArtifactsClient getArtifacts() {
        return this.artifacts;
    }

    /**
     * The PropertiesClient object to access its operations.
     */
    private final PropertiesClient properties;

    /**
     * Gets the PropertiesClient object to access its operations.
     * 
     * @return the PropertiesClient object.
     */
    public PropertiesClient getProperties() {
        return this.properties;
    }

    /**
     * The ReportsClient object to access its operations.
     */
    private final ReportsClient reports;

    /**
     * Gets the ReportsClient object to access its operations.
     * 
     * @return the ReportsClient object.
     */
    public ReportsClient getReports() {
        return this.reports;
    }

    /**
     * The StagesClient object to access its operations.
     */
    private final StagesClient stages;

    /**
     * Gets the StagesClient object to access its operations.
     * 
     * @return the StagesClient object.
     */
    public StagesClient getStages() {
        return this.stages;
    }

    /**
     * The TagsClient object to access its operations.
     */
    private final TagsClient tags;

    /**
     * Gets the TagsClient object to access its operations.
     * 
     * @return the TagsClient object.
     */
    public TagsClient getTags() {
        return this.tags;
    }

    /**
     * The TimelinesClient object to access its operations.
     */
    private final TimelinesClient timelines;

    /**
     * Gets the TimelinesClient object to access its operations.
     * 
     * @return the TimelinesClient object.
     */
    public TimelinesClient getTimelines() {
        return this.timelines;
    }

    /**
     * The DefinitionsClient object to access its operations.
     */
    private final DefinitionsClient definitions;

    /**
     * Gets the DefinitionsClient object to access its operations.
     * 
     * @return the DefinitionsClient object.
     */
    public DefinitionsClient getDefinitions() {
        return this.definitions;
    }

    /**
     * The MetricsClient object to access its operations.
     */
    private final MetricsClient metrics;

    /**
     * Gets the MetricsClient object to access its operations.
     * 
     * @return the MetricsClient object.
     */
    public MetricsClient getMetrics() {
        return this.metrics;
    }

    /**
     * The ResourcesClient object to access its operations.
     */
    private final ResourcesClient resources;

    /**
     * Gets the ResourcesClient object to access its operations.
     * 
     * @return the ResourcesClient object.
     */
    public ResourcesClient getResources() {
        return this.resources;
    }

    /**
     * The YamlsClient object to access its operations.
     */
    private final YamlsClient yamls;

    /**
     * Gets the YamlsClient object to access its operations.
     * 
     * @return the YamlsClient object.
     */
    public YamlsClient getYamls() {
        return this.yamls;
    }

    /**
     * The TemplatesClient object to access its operations.
     */
    private final TemplatesClient templates;

    /**
     * Gets the TemplatesClient object to access its operations.
     * 
     * @return the TemplatesClient object.
     */
    public TemplatesClient getTemplates() {
        return this.templates;
    }

    /**
     * The FoldersClient object to access its operations.
     */
    private final FoldersClient folders;

    /**
     * Gets the FoldersClient object to access its operations.
     * 
     * @return the FoldersClient object.
     */
    public FoldersClient getFolders() {
        return this.folders;
    }

    /**
     * The GeneralSettingsClient object to access its operations.
     */
    private final GeneralSettingsClient generalSettings;

    /**
     * Gets the GeneralSettingsClient object to access its operations.
     * 
     * @return the GeneralSettingsClient object.
     */
    public GeneralSettingsClient getGeneralSettings() {
        return this.generalSettings;
    }

    /**
     * The LatestsClient object to access its operations.
     */
    private final LatestsClient latests;

    /**
     * Gets the LatestsClient object to access its operations.
     * 
     * @return the LatestsClient object.
     */
    public LatestsClient getLatests() {
        return this.latests;
    }

    /**
     * The OptionsClient object to access its operations.
     */
    private final OptionsClient options;

    /**
     * Gets the OptionsClient object to access its operations.
     * 
     * @return the OptionsClient object.
     */
    public OptionsClient getOptions() {
        return this.options;
    }

    /**
     * The RetentionsClient object to access its operations.
     */
    private final RetentionsClient retentions;

    /**
     * Gets the RetentionsClient object to access its operations.
     * 
     * @return the RetentionsClient object.
     */
    public RetentionsClient getRetentions() {
        return this.retentions;
    }

    /**
     * The LeasesClient object to access its operations.
     */
    private final LeasesClient leases;

    /**
     * Gets the LeasesClient object to access its operations.
     * 
     * @return the LeasesClient object.
     */
    public LeasesClient getLeases() {
        return this.leases;
    }

    /**
     * The SettingsClient object to access its operations.
     */
    private final SettingsClient settings;

    /**
     * Gets the SettingsClient object to access its operations.
     * 
     * @return the SettingsClient object.
     */
    public SettingsClient getSettings() {
        return this.settings;
    }

    /**
     * The StatusClient object to access its operations.
     */
    private final StatusClient status;

    /**
     * Gets the StatusClient object to access its operations.
     * 
     * @return the StatusClient object.
     */
    public StatusClient getStatus() {
        return this.status;
    }

    /**
     * The SourceProvidersClient object to access its operations.
     */
    private final SourceProvidersClient sourceProviders;

    /**
     * Gets the SourceProvidersClient object to access its operations.
     * 
     * @return the SourceProvidersClient object.
     */
    public SourceProvidersClient getSourceProviders() {
        return this.sourceProviders;
    }

    /**
     * The PipelinesClient object to access its operations.
     */
    private final PipelinesClient pipelines;

    /**
     * Gets the PipelinesClient object to access its operations.
     * 
     * @return the PipelinesClient object.
     */
    public PipelinesClient getPipelines() {
        return this.pipelines;
    }

    /**
     * The PreviewsClient object to access its operations.
     */
    private final PreviewsClient previews;

    /**
     * Gets the PreviewsClient object to access its operations.
     * 
     * @return the PreviewsClient object.
     */
    public PreviewsClient getPreviews() {
        return this.previews;
    }

    /**
     * The RunsClient object to access its operations.
     */
    private final RunsClient runs;

    /**
     * Gets the RunsClient object to access its operations.
     * 
     * @return the RunsClient object.
     */
    public RunsClient getRuns() {
        return this.runs;
    }

    /**
     * The LogsClient object to access its operations.
     */
    private final LogsClient logs;

    /**
     * Gets the LogsClient object to access its operations.
     * 
     * @return the LogsClient object.
     */
    public LogsClient getLogs() {
        return this.logs;
    }

    /**
     * Initializes an instance of DevClient client.
     * 
     * @param httpPipeline The HTTP pipeline to send requests through.
     * @param serializerAdapter The serializer to serialize an object into a string.
     * @param defaultPollInterval The default poll interval for long-running operation.
     * @param environment The Azure environment.
     * @param endpoint server parameter.
     */
    DevClientImpl(HttpPipeline httpPipeline, SerializerAdapter serializerAdapter, Duration defaultPollInterval,
        AzureEnvironment environment, String endpoint) {
        this.httpPipeline = httpPipeline;
        this.serializerAdapter = serializerAdapter;
        this.defaultPollInterval = defaultPollInterval;
        this.endpoint = endpoint;
        this.apiVersion = "7.2-preview";
        this.controllers = new ControllersClientImpl(this);
        this.resourceUsages = new ResourceUsagesClientImpl(this);
        this.histories = new HistoriesClientImpl(this);
        this.badges = new BadgesClientImpl(this);
        this.authorizedresources = new AuthorizedresourcesClientImpl(this);
        this.builds = new BuildsClientImpl(this);
        this.attachments = new AttachmentsClientImpl(this);
        this.artifacts = new ArtifactsClientImpl(this);
        this.properties = new PropertiesClientImpl(this);
        this.reports = new ReportsClientImpl(this);
        this.stages = new StagesClientImpl(this);
        this.tags = new TagsClientImpl(this);
        this.timelines = new TimelinesClientImpl(this);
        this.definitions = new DefinitionsClientImpl(this);
        this.metrics = new MetricsClientImpl(this);
        this.resources = new ResourcesClientImpl(this);
        this.yamls = new YamlsClientImpl(this);
        this.templates = new TemplatesClientImpl(this);
        this.folders = new FoldersClientImpl(this);
        this.generalSettings = new GeneralSettingsClientImpl(this);
        this.latests = new LatestsClientImpl(this);
        this.options = new OptionsClientImpl(this);
        this.retentions = new RetentionsClientImpl(this);
        this.leases = new LeasesClientImpl(this);
        this.settings = new SettingsClientImpl(this);
        this.status = new StatusClientImpl(this);
        this.sourceProviders = new SourceProvidersClientImpl(this);
        this.pipelines = new PipelinesClientImpl(this);
        this.previews = new PreviewsClientImpl(this);
        this.runs = new RunsClientImpl(this);
        this.logs = new LogsClientImpl(this);
    }

    /**
     * Gets default client context.
     * 
     * @return the default client context.
     */
    public Context getContext() {
        return Context.NONE;
    }

    /**
     * Merges default client context with provided context.
     * 
     * @param context the context to be merged with default client context.
     * @return the merged context.
     */
    public Context mergeContext(Context context) {
        return CoreUtils.mergeContexts(this.getContext(), context);
    }

    /**
     * Gets long running operation result.
     * 
     * @param activationResponse the response of activation operation.
     * @param httpPipeline the http pipeline.
     * @param pollResultType type of poll result.
     * @param finalResultType type of final result.
     * @param context the context shared by all requests.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return poller flux for poll result and final result.
     */
    public <T, U> PollerFlux<PollResult<T>, U> getLroResult(Mono<Response<Flux<ByteBuffer>>> activationResponse,
        HttpPipeline httpPipeline, Type pollResultType, Type finalResultType, Context context) {
        return PollerFactory.create(serializerAdapter, httpPipeline, pollResultType, finalResultType,
            defaultPollInterval, activationResponse, context);
    }

    /**
     * Gets the final result, or an error, based on last async poll response.
     * 
     * @param response the last async poll response.
     * @param <T> type of poll result.
     * @param <U> type of final result.
     * @return the final result, or an error.
     */
    public <T, U> Mono<U> getLroFinalResultOrError(AsyncPollResponse<PollResult<T>, U> response) {
        if (response.getStatus() != LongRunningOperationStatus.SUCCESSFULLY_COMPLETED) {
            String errorMessage;
            ManagementError managementError = null;
            HttpResponse errorResponse = null;
            PollResult.Error lroError = response.getValue().getError();
            if (lroError != null) {
                errorResponse = new HttpResponseImpl(lroError.getResponseStatusCode(), lroError.getResponseHeaders(),
                    lroError.getResponseBody());

                errorMessage = response.getValue().getError().getMessage();
                String errorBody = response.getValue().getError().getResponseBody();
                if (errorBody != null) {
                    // try to deserialize error body to ManagementError
                    try {
                        managementError = this.getSerializerAdapter()
                            .deserialize(errorBody, ManagementError.class, SerializerEncoding.JSON);
                        if (managementError.getCode() == null || managementError.getMessage() == null) {
                            managementError = null;
                        }
                    } catch (IOException | RuntimeException ioe) {
                        LOGGER.logThrowableAsWarning(ioe);
                    }
                }
            } else {
                // fallback to default error message
                errorMessage = "Long running operation failed.";
            }
            if (managementError == null) {
                // fallback to default ManagementError
                managementError = new ManagementError(response.getStatus().toString(), errorMessage);
            }
            return Mono.error(new ManagementException(errorMessage, errorResponse, managementError));
        } else {
            return response.getFinalResult();
        }
    }

    private static final class HttpResponseImpl extends HttpResponse {
        private final int statusCode;

        private final byte[] responseBody;

        private final HttpHeaders httpHeaders;

        HttpResponseImpl(int statusCode, HttpHeaders httpHeaders, String responseBody) {
            super(null);
            this.statusCode = statusCode;
            this.httpHeaders = httpHeaders;
            this.responseBody = responseBody == null ? null : responseBody.getBytes(StandardCharsets.UTF_8);
        }

        public int getStatusCode() {
            return statusCode;
        }

        public String getHeaderValue(String s) {
            return httpHeaders.getValue(HttpHeaderName.fromString(s));
        }

        public HttpHeaders getHeaders() {
            return httpHeaders;
        }

        public Flux<ByteBuffer> getBody() {
            return Flux.just(ByteBuffer.wrap(responseBody));
        }

        public Mono<byte[]> getBodyAsByteArray() {
            return Mono.just(responseBody);
        }

        public Mono<String> getBodyAsString() {
            return Mono.just(new String(responseBody, StandardCharsets.UTF_8));
        }

        public Mono<String> getBodyAsString(Charset charset) {
            return Mono.just(new String(responseBody, charset));
        }
    }

    private static final ClientLogger LOGGER = new ClientLogger(DevClientImpl.class);
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.PropertiesClient;
import com.azure.dev.fluent.models.PropertiesCollectionInner;
import com.azure.dev.models.Properties;
import com.azure.dev.models.PropertiesCollection;

public final class PropertiesImpl implements Properties {
    private static final ClientLogger LOGGER = new ClientLogger(PropertiesImpl.class);

    private final PropertiesClient innerClient;

    private final com.azure.dev.DevManager serviceManager;

    public PropertiesImpl(PropertiesClient innerClient, com.azure.dev.DevManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<PropertiesCollection> getBuildPropertiesWithResponse(String organization, String project,
        int buildId, String filter, Context context) {
        Response<PropertiesCollectionInner> inner
            = this.serviceClient().getBuildPropertiesWithResponse(organization, project, buildId, filter, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PropertiesCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PropertiesCollection getBuildProperties(String organization, String project, int buildId) {
        PropertiesCollectionInner inner = this.serviceClient().getBuildProperties(organization, project, buildId);
        if (inner != null) {
            return new PropertiesCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PropertiesCollection> updateBuildPropertiesWithResponse(String organization, String project,
        int buildId, Object body, Context context) {
        Response<PropertiesCollectionInner> inner
            = this.serviceClient().updateBuildPropertiesWithResponse(organization, project, buildId, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PropertiesCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PropertiesCollection updateBuildProperties(String organization, String project, int buildId, Object body) {
        PropertiesCollectionInner inner
            = this.serviceClient().updateBuildProperties(organization, project, buildId, body);
        if (inner != null) {
            return new PropertiesCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PropertiesCollection> getDefinitionPropertiesWithResponse(String organization, String project,
        int definitionId, String filter, Context context) {
        Response<PropertiesCollectionInner> inner = this.serviceClient()
            .getDefinitionPropertiesWithResponse(organization, project, definitionId, filter, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PropertiesCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PropertiesCollection getDefinitionProperties(String organization, String project, int definitionId) {
        PropertiesCollectionInner inner
            = this.serviceClient().getDefinitionProperties(organization, project, definitionId);
        if (inner != null) {
            return new PropertiesCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<PropertiesCollection> updateDefinitionPropertiesWithResponse(String organization, String project,
        int definitionId, Object body, Context context) {
        Response<PropertiesCollectionInner> inner = this.serviceClient()
            .updateDefinitionPropertiesWithResponse(organization, project, definitionId, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new PropertiesCollectionImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public PropertiesCollection updateDefinitionProperties(String organization, String project, int definitionId,
        Object body) {
        PropertiesCollectionInner inner
            = this.serviceClient().updateDefinitionProperties(organization, project, definitionId, body);
        if (inner != null) {
            return new PropertiesCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    private PropertiesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.dev.DevManager manager() {
        return this.serviceManager;
    }
}

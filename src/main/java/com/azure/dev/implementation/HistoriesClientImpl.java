// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.dev.fluent.HistoriesClient;
import com.azure.dev.fluent.models.BuildRetentionHistoryInner;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in HistoriesClient.
 */
public final class HistoriesClientImpl implements HistoriesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final HistoriesService service;

    /**
     * The service client containing this operation class.
     */
    private final DevClientImpl client;

    /**
     * Initializes an instance of HistoriesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    HistoriesClientImpl(DevClientImpl client) {
        this.service
            = RestProxy.create(HistoriesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientHistories to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientHistories")
    public interface HistoriesService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/_apis/build/retention/history")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BuildRetentionHistoryInner>> get(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @QueryParam("daysToLookback") Integer daysToLookback,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Returns the retention history for the project collection. This includes pipelines that have custom retention
     * rules that may prevent the retention job from cleaning them up, runs per pipeline with retention type, files
     * associated with pipelines owned by the collection with retention type, and the number of files per pipeline.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param daysToLookback The daysToLookback parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a historical overview of build retention information along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildRetentionHistoryInner>> getWithResponseAsync(String organization,
        Integer daysToLookback) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), organization, daysToLookback,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns the retention history for the project collection. This includes pipelines that have custom retention
     * rules that may prevent the retention job from cleaning them up, runs per pipeline with retention type, files
     * associated with pipelines owned by the collection with retention type, and the number of files per pipeline.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param daysToLookback The daysToLookback parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a historical overview of build retention information along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildRetentionHistoryInner>> getWithResponseAsync(String organization, Integer daysToLookback,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), organization, daysToLookback, this.client.getApiVersion(), accept,
            context);
    }

    /**
     * Returns the retention history for the project collection. This includes pipelines that have custom retention
     * rules that may prevent the retention job from cleaning them up, runs per pipeline with retention type, files
     * associated with pipelines owned by the collection with retention type, and the number of files per pipeline.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a historical overview of build retention information on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BuildRetentionHistoryInner> getAsync(String organization) {
        final Integer daysToLookback = null;
        return getWithResponseAsync(organization, daysToLookback).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the retention history for the project collection. This includes pipelines that have custom retention
     * rules that may prevent the retention job from cleaning them up, runs per pipeline with retention type, files
     * associated with pipelines owned by the collection with retention type, and the number of files per pipeline.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param daysToLookback The daysToLookback parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a historical overview of build retention information along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BuildRetentionHistoryInner> getWithResponse(String organization, Integer daysToLookback,
        Context context) {
        return getWithResponseAsync(organization, daysToLookback, context).block();
    }

    /**
     * Returns the retention history for the project collection. This includes pipelines that have custom retention
     * rules that may prevent the retention job from cleaning them up, runs per pipeline with retention type, files
     * associated with pipelines owned by the collection with retention type, and the number of files per pipeline.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a historical overview of build retention information.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildRetentionHistoryInner get(String organization) {
        final Integer daysToLookback = null;
        return getWithResponse(organization, daysToLookback, Context.NONE).getValue();
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.FoldersClient;
import com.azure.dev.fluent.models.FolderInner;
import com.azure.dev.models.Folder;
import com.azure.dev.models.FolderQueryOrder;
import com.azure.dev.models.Folders;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class FoldersImpl implements Folders {
    private static final ClientLogger LOGGER = new ClientLogger(FoldersImpl.class);

    private final FoldersClient innerClient;

    private final com.azure.dev.DevManager serviceManager;

    public FoldersImpl(FoldersClient innerClient, com.azure.dev.DevManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<Folder> createWithResponse(String organization, String project, String path, FolderInner body,
        Context context) {
        Response<FolderInner> inner
            = this.serviceClient().createWithResponse(organization, project, path, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FolderImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Folder create(String organization, String project, String path, FolderInner body) {
        FolderInner inner = this.serviceClient().create(organization, project, path, body);
        if (inner != null) {
            return new FolderImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<Void> deleteWithResponse(String organization, String project, String path, Context context) {
        return this.serviceClient().deleteWithResponse(organization, project, path, context);
    }

    public void delete(String organization, String project, String path) {
        this.serviceClient().delete(organization, project, path);
    }

    public Response<Folder> updateWithResponse(String organization, String project, String path, FolderInner body,
        Context context) {
        Response<FolderInner> inner
            = this.serviceClient().updateWithResponse(organization, project, path, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                new FolderImpl(inner.getValue(), this.manager()));
        } else {
            return null;
        }
    }

    public Folder update(String organization, String project, String path, FolderInner body) {
        FolderInner inner = this.serviceClient().update(organization, project, path, body);
        if (inner != null) {
            return new FolderImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Response<List<Folder>> listWithResponse(String organization, String project, String path,
        FolderQueryOrder queryOrder, Context context) {
        Response<List<FolderInner>> inner
            = this.serviceClient().listWithResponse(organization, project, path, queryOrder, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new FolderImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<Folder> list(String organization, String project, String path) {
        List<FolderInner> inner = this.serviceClient().list(organization, project, path);
        if (inner != null) {
            return Collections.unmodifiableList(
                inner.stream().map(inner1 -> new FolderImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    private FoldersClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.dev.DevManager manager() {
        return this.serviceManager;
    }
}

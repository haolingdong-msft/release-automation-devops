// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.dev.fluent.YamlsClient;
import com.azure.dev.fluent.models.YamlBuildInner;
import java.time.OffsetDateTime;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in YamlsClient.
 */
public final class YamlsClientImpl implements YamlsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final YamlsService service;

    /**
     * The service client containing this operation class.
     */
    private final DevClientImpl client;

    /**
     * Initializes an instance of YamlsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    YamlsClientImpl(DevClientImpl client) {
        this.service = RestProxy.create(YamlsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientYamls to be used by the proxy service to perform REST calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientYamls")
    public interface YamlsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/definitions/{definitionId}/yaml")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<YamlBuildInner>> get(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("definitionId") int definitionId, @QueryParam("revision") Integer revision,
            @QueryParam("minMetricsTime") OffsetDateTime minMetricsTime,
            @QueryParam("propertyFilters") String propertyFilters,
            @QueryParam("includeLatestBuilds") Boolean includeLatestBuilds,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Converts a definition to YAML, optionally at a specific revision.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param revision The revision number to retrieve. If this is not specified, the latest version will be returned.
     * @param minMetricsTime If specified, indicates the date from which metrics should be included.
     * @param propertyFilters A comma-delimited list of properties to include in the results.
     * @param includeLatestBuilds The includeLatestBuilds parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a yaml build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<YamlBuildInner>> getWithResponseAsync(String organization, String project, int definitionId,
        Integer revision, OffsetDateTime minMetricsTime, String propertyFilters, Boolean includeLatestBuilds) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(
                context -> service.get(this.client.getEndpoint(), organization, project, definitionId, revision,
                    minMetricsTime, propertyFilters, includeLatestBuilds, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Converts a definition to YAML, optionally at a specific revision.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param revision The revision number to retrieve. If this is not specified, the latest version will be returned.
     * @param minMetricsTime If specified, indicates the date from which metrics should be included.
     * @param propertyFilters A comma-delimited list of properties to include in the results.
     * @param includeLatestBuilds The includeLatestBuilds parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a yaml build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<YamlBuildInner>> getWithResponseAsync(String organization, String project, int definitionId,
        Integer revision, OffsetDateTime minMetricsTime, String propertyFilters, Boolean includeLatestBuilds,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), organization, project, definitionId, revision, minMetricsTime,
            propertyFilters, includeLatestBuilds, this.client.getApiVersion(), accept, context);
    }

    /**
     * Converts a definition to YAML, optionally at a specific revision.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a yaml build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<YamlBuildInner> getAsync(String organization, String project, int definitionId) {
        final Integer revision = null;
        final OffsetDateTime minMetricsTime = null;
        final String propertyFilters = null;
        final Boolean includeLatestBuilds = null;
        return getWithResponseAsync(organization, project, definitionId, revision, minMetricsTime, propertyFilters,
            includeLatestBuilds).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Converts a definition to YAML, optionally at a specific revision.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param revision The revision number to retrieve. If this is not specified, the latest version will be returned.
     * @param minMetricsTime If specified, indicates the date from which metrics should be included.
     * @param propertyFilters A comma-delimited list of properties to include in the results.
     * @param includeLatestBuilds The includeLatestBuilds parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a yaml build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<YamlBuildInner> getWithResponse(String organization, String project, int definitionId,
        Integer revision, OffsetDateTime minMetricsTime, String propertyFilters, Boolean includeLatestBuilds,
        Context context) {
        return getWithResponseAsync(organization, project, definitionId, revision, minMetricsTime, propertyFilters,
            includeLatestBuilds, context).block();
    }

    /**
     * Converts a definition to YAML, optionally at a specific revision.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return represents a yaml build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public YamlBuildInner get(String organization, String project, int definitionId) {
        final Integer revision = null;
        final OffsetDateTime minMetricsTime = null;
        final String propertyFilters = null;
        final Boolean includeLatestBuilds = null;
        return getWithResponse(organization, project, definitionId, revision, minMetricsTime, propertyFilters,
            includeLatestBuilds, Context.NONE).getValue();
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.dev.fluent.BuildsClient;
import com.azure.dev.fluent.models.BuildInner;
import com.azure.dev.fluent.models.BuildLogInner;
import com.azure.dev.fluent.models.ChangeInner;
import com.azure.dev.fluent.models.ResourceRefInner;
import com.azure.dev.fluent.models.RetentionLeaseInner;
import com.azure.dev.models.BuildQueryOrder;
import com.azure.dev.models.BuildReason;
import com.azure.dev.models.BuildResult;
import com.azure.dev.models.BuildStatus;
import com.azure.dev.models.QueryDeletedOption;
import java.time.OffsetDateTime;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in BuildsClient.
 */
public final class BuildsClientImpl implements BuildsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final BuildsService service;

    /**
     * The service client containing this operation class.
     */
    private final DevClientImpl client;

    /**
     * Initializes an instance of BuildsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    BuildsClientImpl(DevClientImpl client) {
        this.service = RestProxy.create(BuildsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientBuilds to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientBuilds")
    public interface BuildsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<BuildInner>>> list(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @QueryParam("definitions") String definitions, @QueryParam("queues") String queues,
            @QueryParam("buildNumber") String buildNumber, @QueryParam("minTime") OffsetDateTime minTime,
            @QueryParam("maxTime") OffsetDateTime maxTime, @QueryParam("requestedFor") String requestedFor,
            @QueryParam("reasonFilter") BuildReason reasonFilter, @QueryParam("statusFilter") BuildStatus statusFilter,
            @QueryParam("resultFilter") BuildResult resultFilter, @QueryParam("tagFilters") String tagFilters,
            @QueryParam("properties") String properties, @QueryParam("$top") Integer top,
            @QueryParam("continuationToken") String continuationToken,
            @QueryParam("maxBuildsPerDefinition") Integer maxBuildsPerDefinition,
            @QueryParam("deletedFilter") QueryDeletedOption deletedFilter,
            @QueryParam("queryOrder") BuildQueryOrder queryOrder, @QueryParam("branchName") String branchName,
            @QueryParam("buildIds") String buildIds, @QueryParam("repositoryId") String repositoryId,
            @QueryParam("repositoryType") String repositoryType, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{organization}/{project}/_apis/build/builds")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BuildInner>> queue(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @QueryParam("ignoreWarnings") Boolean ignoreWarnings, @QueryParam("checkInTicket") String checkInTicket,
            @QueryParam("sourceBuildId") Integer sourceBuildId, @QueryParam("definitionId") Integer definitionId,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BuildInner body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/{organization}/{project}/_apis/build/builds")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<BuildInner>>> updateBuilds(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") List<BuildInner> body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/{organization}/{project}/_apis/build/builds/{buildId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @PathParam("organization") String organization,
            @PathParam("project") String project, @PathParam("buildId") int buildId,
            @QueryParam("api-version") String apiVersion, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BuildInner>> get(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("propertyFilters") String propertyFilters,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/{organization}/{project}/_apis/build/builds/{buildId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<BuildInner>> updateBuild(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("retry") Boolean retry,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") BuildInner body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/changes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<ChangeInner>>> getBuildChanges(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("continuationToken") String continuationToken,
            @QueryParam("$top") Integer top, @QueryParam("includeSourceChange") Boolean includeSourceChange,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/leases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesForBuild(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/logs")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<BuildLogInner>>> getBuildLogs(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/logs/{logId}")
        @ExpectedResponses({ 200, 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<String>> getBuildLog(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @PathParam("logId") int logId, @QueryParam("startLine") Long startLine,
            @QueryParam("endLine") Long endLine, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/builds/{buildId}/workitems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<ResourceRefInner>>> getBuildWorkItemsRefs(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("$top") Integer top,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Post("/{organization}/{project}/_apis/build/builds/{buildId}/workitems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<ResourceRefInner>>> getBuildWorkItemsRefsFromCommits(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("buildId") int buildId, @QueryParam("$top") Integer top,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") List<String> body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/changes")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<ChangeInner>>> getChangesBetweenBuilds(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @QueryParam("fromBuildId") Integer fromBuildId, @QueryParam("toBuildId") Integer toBuildId,
            @QueryParam("$top") Integer top, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/workitems")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<ResourceRefInner>>> getWorkItemsBetweenBuilds(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @QueryParam("fromBuildId") int fromBuildId, @QueryParam("toBuildId") int toBuildId,
            @QueryParam("$top") Integer top, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets a list of builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitions A comma-delimited list of definition IDs. If specified, filters to builds for these
     * definitions.
     * @param queues A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.
     * @param buildNumber If specified, filters to builds that match this build number. Append * to do a prefix search.
     * @param minTime If specified, filters to builds that finished/started/queued after this date based on the
     * queryOrder specified.
     * @param maxTime If specified, filters to builds that finished/started/queued before this date based on the
     * queryOrder specified.
     * @param requestedFor If specified, filters to builds requested for the specified user.
     * @param reasonFilter If specified, filters to builds that match this reason.
     * @param statusFilter If specified, filters to builds that match this status.
     * @param resultFilter If specified, filters to builds that match this result.
     * @param tagFilters A comma-delimited list of tags. If specified, filters to builds that have the specified tags.
     * @param properties A comma-delimited list of properties to retrieve.
     * @param top The maximum number of builds to return.
     * @param continuationToken A continuation token, returned by a previous call to this method, that can be used to
     * return the next set of builds.
     * @param maxBuildsPerDefinition The maximum number of builds to return per definition.
     * @param deletedFilter Indicates whether to exclude, include, or only return deleted builds.
     * @param queryOrder The order in which builds should be returned.
     * @param branchName If specified, filters to builds that built branches that built this branch.
     * @param buildIds A comma-delimited list that specifies the IDs of builds to retrieve.
     * @param repositoryId If specified, filters to builds that built from this repository.
     * @param repositoryType If specified, filters to builds that built from repositories of this type.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of builds along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildInner>>> listWithResponseAsync(String organization, String project,
        String definitions, String queues, String buildNumber, OffsetDateTime minTime, OffsetDateTime maxTime,
        String requestedFor, BuildReason reasonFilter, BuildStatus statusFilter, BuildResult resultFilter,
        String tagFilters, String properties, Integer top, String continuationToken, Integer maxBuildsPerDefinition,
        QueryDeletedOption deletedFilter, BuildQueryOrder queryOrder, String branchName, String buildIds,
        String repositoryId, String repositoryType) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.list(this.client.getEndpoint(), organization, project, definitions, queues,
                buildNumber, minTime, maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters,
                properties, top, continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName,
                buildIds, repositoryId, repositoryType, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a list of builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitions A comma-delimited list of definition IDs. If specified, filters to builds for these
     * definitions.
     * @param queues A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.
     * @param buildNumber If specified, filters to builds that match this build number. Append * to do a prefix search.
     * @param minTime If specified, filters to builds that finished/started/queued after this date based on the
     * queryOrder specified.
     * @param maxTime If specified, filters to builds that finished/started/queued before this date based on the
     * queryOrder specified.
     * @param requestedFor If specified, filters to builds requested for the specified user.
     * @param reasonFilter If specified, filters to builds that match this reason.
     * @param statusFilter If specified, filters to builds that match this status.
     * @param resultFilter If specified, filters to builds that match this result.
     * @param tagFilters A comma-delimited list of tags. If specified, filters to builds that have the specified tags.
     * @param properties A comma-delimited list of properties to retrieve.
     * @param top The maximum number of builds to return.
     * @param continuationToken A continuation token, returned by a previous call to this method, that can be used to
     * return the next set of builds.
     * @param maxBuildsPerDefinition The maximum number of builds to return per definition.
     * @param deletedFilter Indicates whether to exclude, include, or only return deleted builds.
     * @param queryOrder The order in which builds should be returned.
     * @param branchName If specified, filters to builds that built branches that built this branch.
     * @param buildIds A comma-delimited list that specifies the IDs of builds to retrieve.
     * @param repositoryId If specified, filters to builds that built from this repository.
     * @param repositoryType If specified, filters to builds that built from repositories of this type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of builds along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildInner>>> listWithResponseAsync(String organization, String project,
        String definitions, String queues, String buildNumber, OffsetDateTime minTime, OffsetDateTime maxTime,
        String requestedFor, BuildReason reasonFilter, BuildStatus statusFilter, BuildResult resultFilter,
        String tagFilters, String properties, Integer top, String continuationToken, Integer maxBuildsPerDefinition,
        QueryDeletedOption deletedFilter, BuildQueryOrder queryOrder, String branchName, String buildIds,
        String repositoryId, String repositoryType, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.list(this.client.getEndpoint(), organization, project, definitions, queues, buildNumber, minTime,
            maxTime, requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top,
            continuationToken, maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId,
            repositoryType, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets a list of builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of builds on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<BuildInner>> listAsync(String organization, String project) {
        final String definitions = null;
        final String queues = null;
        final String buildNumber = null;
        final OffsetDateTime minTime = null;
        final OffsetDateTime maxTime = null;
        final String requestedFor = null;
        final BuildReason reasonFilter = null;
        final BuildStatus statusFilter = null;
        final BuildResult resultFilter = null;
        final String tagFilters = null;
        final String properties = null;
        final Integer top = null;
        final String continuationToken = null;
        final Integer maxBuildsPerDefinition = null;
        final QueryDeletedOption deletedFilter = null;
        final BuildQueryOrder queryOrder = null;
        final String branchName = null;
        final String buildIds = null;
        final String repositoryId = null;
        final String repositoryType = null;
        return listWithResponseAsync(organization, project, definitions, queues, buildNumber, minTime, maxTime,
            requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken,
            maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a list of builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitions A comma-delimited list of definition IDs. If specified, filters to builds for these
     * definitions.
     * @param queues A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.
     * @param buildNumber If specified, filters to builds that match this build number. Append * to do a prefix search.
     * @param minTime If specified, filters to builds that finished/started/queued after this date based on the
     * queryOrder specified.
     * @param maxTime If specified, filters to builds that finished/started/queued before this date based on the
     * queryOrder specified.
     * @param requestedFor If specified, filters to builds requested for the specified user.
     * @param reasonFilter If specified, filters to builds that match this reason.
     * @param statusFilter If specified, filters to builds that match this status.
     * @param resultFilter If specified, filters to builds that match this result.
     * @param tagFilters A comma-delimited list of tags. If specified, filters to builds that have the specified tags.
     * @param properties A comma-delimited list of properties to retrieve.
     * @param top The maximum number of builds to return.
     * @param continuationToken A continuation token, returned by a previous call to this method, that can be used to
     * return the next set of builds.
     * @param maxBuildsPerDefinition The maximum number of builds to return per definition.
     * @param deletedFilter Indicates whether to exclude, include, or only return deleted builds.
     * @param queryOrder The order in which builds should be returned.
     * @param branchName If specified, filters to builds that built branches that built this branch.
     * @param buildIds A comma-delimited list that specifies the IDs of builds to retrieve.
     * @param repositoryId If specified, filters to builds that built from this repository.
     * @param repositoryType If specified, filters to builds that built from repositories of this type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of builds along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<BuildInner>> listWithResponse(String organization, String project, String definitions,
        String queues, String buildNumber, OffsetDateTime minTime, OffsetDateTime maxTime, String requestedFor,
        BuildReason reasonFilter, BuildStatus statusFilter, BuildResult resultFilter, String tagFilters,
        String properties, Integer top, String continuationToken, Integer maxBuildsPerDefinition,
        QueryDeletedOption deletedFilter, BuildQueryOrder queryOrder, String branchName, String buildIds,
        String repositoryId, String repositoryType, Context context) {
        return listWithResponseAsync(organization, project, definitions, queues, buildNumber, minTime, maxTime,
            requestedFor, reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken,
            maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType,
            context).block();
    }

    /**
     * Gets a list of builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of builds.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<BuildInner> list(String organization, String project) {
        final String definitions = null;
        final String queues = null;
        final String buildNumber = null;
        final OffsetDateTime minTime = null;
        final OffsetDateTime maxTime = null;
        final String requestedFor = null;
        final BuildReason reasonFilter = null;
        final BuildStatus statusFilter = null;
        final BuildResult resultFilter = null;
        final String tagFilters = null;
        final String properties = null;
        final Integer top = null;
        final String continuationToken = null;
        final Integer maxBuildsPerDefinition = null;
        final QueryDeletedOption deletedFilter = null;
        final BuildQueryOrder queryOrder = null;
        final String branchName = null;
        final String buildIds = null;
        final String repositoryId = null;
        final String repositoryType = null;
        return listWithResponse(organization, project, definitions, queues, buildNumber, minTime, maxTime, requestedFor,
            reasonFilter, statusFilter, resultFilter, tagFilters, properties, top, continuationToken,
            maxBuildsPerDefinition, deletedFilter, queryOrder, branchName, buildIds, repositoryId, repositoryType,
            Context.NONE).getValue();
    }

    /**
     * Queues a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Data representation of a build.
     * @param ignoreWarnings The ignoreWarnings parameter.
     * @param checkInTicket The checkInTicket parameter.
     * @param sourceBuildId The sourceBuildId parameter.
     * @param definitionId Optional definition id to queue a build without a body. Ignored if there's a valid body.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildInner>> queueWithResponseAsync(String organization, String project, BuildInner body,
        Boolean ignoreWarnings, String checkInTicket, Integer sourceBuildId, Integer definitionId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.queue(this.client.getEndpoint(), organization, project, ignoreWarnings,
                checkInTicket, sourceBuildId, definitionId, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Queues a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Data representation of a build.
     * @param ignoreWarnings The ignoreWarnings parameter.
     * @param checkInTicket The checkInTicket parameter.
     * @param sourceBuildId The sourceBuildId parameter.
     * @param definitionId Optional definition id to queue a build without a body. Ignored if there's a valid body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildInner>> queueWithResponseAsync(String organization, String project, BuildInner body,
        Boolean ignoreWarnings, String checkInTicket, Integer sourceBuildId, Integer definitionId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.queue(this.client.getEndpoint(), organization, project, ignoreWarnings, checkInTicket,
            sourceBuildId, definitionId, this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Queues a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Data representation of a build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BuildInner> queueAsync(String organization, String project, BuildInner body) {
        final Boolean ignoreWarnings = null;
        final String checkInTicket = null;
        final Integer sourceBuildId = null;
        final Integer definitionId = null;
        return queueWithResponseAsync(organization, project, body, ignoreWarnings, checkInTicket, sourceBuildId,
            definitionId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Queues a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Data representation of a build.
     * @param ignoreWarnings The ignoreWarnings parameter.
     * @param checkInTicket The checkInTicket parameter.
     * @param sourceBuildId The sourceBuildId parameter.
     * @param definitionId Optional definition id to queue a build without a body. Ignored if there's a valid body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BuildInner> queueWithResponse(String organization, String project, BuildInner body,
        Boolean ignoreWarnings, String checkInTicket, Integer sourceBuildId, Integer definitionId, Context context) {
        return queueWithResponseAsync(organization, project, body, ignoreWarnings, checkInTicket, sourceBuildId,
            definitionId, context).block();
    }

    /**
     * Queues a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Data representation of a build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildInner queue(String organization, String project, BuildInner body) {
        final Boolean ignoreWarnings = null;
        final String checkInTicket = null;
        final Integer sourceBuildId = null;
        final Integer definitionId = null;
        return queueWithResponse(organization, project, body, ignoreWarnings, checkInTicket, sourceBuildId,
            definitionId, Context.NONE).getValue();
    }

    /**
     * Updates multiple builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body The builds to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildInner>>> updateBuildsWithResponseAsync(String organization, String project,
        List<BuildInner> body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.forEach(e -> e.validate());
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateBuilds(this.client.getEndpoint(), organization, project,
                this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates multiple builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body The builds to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildInner>>> updateBuildsWithResponseAsync(String organization, String project,
        List<BuildInner> body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.forEach(e -> e.validate());
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateBuilds(this.client.getEndpoint(), organization, project, this.client.getApiVersion(), body,
            accept, context);
    }

    /**
     * Updates multiple builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body The builds to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<BuildInner>> updateBuildsAsync(String organization, String project, List<BuildInner> body) {
        return updateBuildsWithResponseAsync(organization, project, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates multiple builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body The builds to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<BuildInner>> updateBuildsWithResponse(String organization, String project,
        List<BuildInner> body, Context context) {
        return updateBuildsWithResponseAsync(organization, project, body, context).block();
    }

    /**
     * Updates multiple builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body The builds to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<BuildInner> updateBuilds(String organization, String project, List<BuildInner> body) {
        return updateBuildsWithResponse(organization, project, body, Context.NONE).getValue();
    }

    /**
     * Deletes a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String organization, String project, int buildId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), organization, project, buildId,
                this.client.getApiVersion(), context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Deletes a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String organization, String project, int buildId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), organization, project, buildId, this.client.getApiVersion(),
            context);
    }

    /**
     * Deletes a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String organization, String project, int buildId) {
        return deleteWithResponseAsync(organization, project, buildId).flatMap(ignored -> Mono.empty());
    }

    /**
     * Deletes a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String organization, String project, int buildId, Context context) {
        return deleteWithResponseAsync(organization, project, buildId, context).block();
    }

    /**
     * Deletes a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String organization, String project, int buildId) {
        deleteWithResponse(organization, project, buildId, Context.NONE);
    }

    /**
     * Gets a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @param propertyFilters The propertyFilters parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildInner>> getWithResponseAsync(String organization, String project, int buildId,
        String propertyFilters) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), organization, project, buildId,
                propertyFilters, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @param propertyFilters The propertyFilters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildInner>> getWithResponseAsync(String organization, String project, int buildId,
        String propertyFilters, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), organization, project, buildId, propertyFilters,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BuildInner> getAsync(String organization, String project, int buildId) {
        final String propertyFilters = null;
        return getWithResponseAsync(organization, project, buildId, propertyFilters)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @param propertyFilters The propertyFilters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BuildInner> getWithResponse(String organization, String project, int buildId,
        String propertyFilters, Context context) {
        return getWithResponseAsync(organization, project, buildId, propertyFilters, context).block();
    }

    /**
     * Gets a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildInner get(String organization, String project, int buildId) {
        final String propertyFilters = null;
        return getWithResponse(organization, project, buildId, propertyFilters, Context.NONE).getValue();
    }

    /**
     * Updates a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The build.
     * @param retry The retry parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildInner>> updateBuildWithResponseAsync(String organization, String project, int buildId,
        BuildInner body, Boolean retry) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.updateBuild(this.client.getEndpoint(), organization, project, buildId,
                retry, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The build.
     * @param retry The retry parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<BuildInner>> updateBuildWithResponseAsync(String organization, String project, int buildId,
        BuildInner body, Boolean retry, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.updateBuild(this.client.getEndpoint(), organization, project, buildId, retry,
            this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Updates a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<BuildInner> updateBuildAsync(String organization, String project, int buildId, BuildInner body) {
        final Boolean retry = null;
        return updateBuildWithResponseAsync(organization, project, buildId, body, retry)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The build.
     * @param retry The retry parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<BuildInner> updateBuildWithResponse(String organization, String project, int buildId,
        BuildInner body, Boolean retry, Context context) {
        return updateBuildWithResponseAsync(organization, project, buildId, body, retry, context).block();
    }

    /**
     * Updates a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public BuildInner updateBuild(String organization, String project, int buildId, BuildInner body) {
        final Boolean retry = null;
        return updateBuildWithResponse(organization, project, buildId, body, retry, Context.NONE).getValue();
    }

    /**
     * Gets the changes associated with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @param continuationToken The continuationToken parameter.
     * @param top The maximum number of changes to return.
     * @param includeSourceChange The includeSourceChange parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes associated with a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ChangeInner>>> getBuildChangesWithResponseAsync(String organization, String project,
        int buildId, String continuationToken, Integer top, Boolean includeSourceChange) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getBuildChanges(this.client.getEndpoint(), organization, project, buildId,
                continuationToken, top, includeSourceChange, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the changes associated with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @param continuationToken The continuationToken parameter.
     * @param top The maximum number of changes to return.
     * @param includeSourceChange The includeSourceChange parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes associated with a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ChangeInner>>> getBuildChangesWithResponseAsync(String organization, String project,
        int buildId, String continuationToken, Integer top, Boolean includeSourceChange, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getBuildChanges(this.client.getEndpoint(), organization, project, buildId, continuationToken,
            top, includeSourceChange, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the changes associated with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes associated with a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<ChangeInner>> getBuildChangesAsync(String organization, String project, int buildId) {
        final String continuationToken = null;
        final Integer top = null;
        final Boolean includeSourceChange = null;
        return getBuildChangesWithResponseAsync(organization, project, buildId, continuationToken, top,
            includeSourceChange).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the changes associated with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @param continuationToken The continuationToken parameter.
     * @param top The maximum number of changes to return.
     * @param includeSourceChange The includeSourceChange parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes associated with a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<ChangeInner>> getBuildChangesWithResponse(String organization, String project, int buildId,
        String continuationToken, Integer top, Boolean includeSourceChange, Context context) {
        return getBuildChangesWithResponseAsync(organization, project, buildId, continuationToken, top,
            includeSourceChange, context).block();
    }

    /**
     * Gets the changes associated with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes associated with a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<ChangeInner> getBuildChanges(String organization, String project, int buildId) {
        final String continuationToken = null;
        final Integer top = null;
        final Boolean includeSourceChange = null;
        return getBuildChangesWithResponse(organization, project, buildId, continuationToken, top, includeSourceChange,
            Context.NONE).getValue();
    }

    /**
     * Gets all retention leases that apply to a specific build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all retention leases that apply to a specific build along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesForBuildWithResponseAsync(String organization,
        String project, int buildId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getRetentionLeasesForBuild(this.client.getEndpoint(), organization, project,
                buildId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all retention leases that apply to a specific build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all retention leases that apply to a specific build along with {@link Response} on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesForBuildWithResponseAsync(String organization,
        String project, int buildId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getRetentionLeasesForBuild(this.client.getEndpoint(), organization, project, buildId,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets all retention leases that apply to a specific build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all retention leases that apply to a specific build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<RetentionLeaseInner>> getRetentionLeasesForBuildAsync(String organization, String project,
        int buildId) {
        return getRetentionLeasesForBuildWithResponseAsync(organization, project, buildId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets all retention leases that apply to a specific build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all retention leases that apply to a specific build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<RetentionLeaseInner>> getRetentionLeasesForBuildWithResponse(String organization,
        String project, int buildId, Context context) {
        return getRetentionLeasesForBuildWithResponseAsync(organization, project, buildId, context).block();
    }

    /**
     * Gets all retention leases that apply to a specific build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all retention leases that apply to a specific build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<RetentionLeaseInner> getRetentionLeasesForBuild(String organization, String project, int buildId) {
        return getRetentionLeasesForBuildWithResponse(organization, project, buildId, Context.NONE).getValue();
    }

    /**
     * Gets the logs for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildLogInner>>> getBuildLogsWithResponseAsync(String organization, String project,
        int buildId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getBuildLogs(this.client.getEndpoint(), organization, project, buildId,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the logs for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildLogInner>>> getBuildLogsWithResponseAsync(String organization, String project,
        int buildId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getBuildLogs(this.client.getEndpoint(), organization, project, buildId,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the logs for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<BuildLogInner>> getBuildLogsAsync(String organization, String project, int buildId) {
        return getBuildLogsWithResponseAsync(organization, project, buildId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the logs for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<BuildLogInner>> getBuildLogsWithResponse(String organization, String project, int buildId,
        Context context) {
        return getBuildLogsWithResponseAsync(organization, project, buildId, context).block();
    }

    /**
     * Gets the logs for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<BuildLogInner> getBuildLogs(String organization, String project, int buildId) {
        return getBuildLogsWithResponse(organization, project, buildId, Context.NONE).getValue();
    }

    /**
     * Gets an individual log file for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param logId The ID of the log file.
     * @param startLine The start line.
     * @param endLine The end line.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an individual log file for a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<String>> getBuildLogWithResponseAsync(String organization, String project, int buildId,
        int logId, Long startLine, Long endLine) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json, text/plain";
        return FluxUtil
            .withContext(context -> service.getBuildLog(this.client.getEndpoint(), organization, project, buildId,
                logId, startLine, endLine, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets an individual log file for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param logId The ID of the log file.
     * @param startLine The start line.
     * @param endLine The end line.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an individual log file for a build along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<String>> getBuildLogWithResponseAsync(String organization, String project, int buildId,
        int logId, Long startLine, Long endLine, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json, text/plain";
        context = this.client.mergeContext(context);
        return service.getBuildLog(this.client.getEndpoint(), organization, project, buildId, logId, startLine, endLine,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets an individual log file for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param logId The ID of the log file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an individual log file for a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<String> getBuildLogAsync(String organization, String project, int buildId, int logId) {
        final Long startLine = null;
        final Long endLine = null;
        return getBuildLogWithResponseAsync(organization, project, buildId, logId, startLine, endLine)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets an individual log file for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param logId The ID of the log file.
     * @param startLine The start line.
     * @param endLine The end line.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an individual log file for a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<String> getBuildLogWithResponse(String organization, String project, int buildId, int logId,
        Long startLine, Long endLine, Context context) {
        return getBuildLogWithResponseAsync(organization, project, buildId, logId, startLine, endLine, context).block();
    }

    /**
     * Gets an individual log file for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param logId The ID of the log file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an individual log file for a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public String getBuildLog(String organization, String project, int buildId, int logId) {
        final Long startLine = null;
        final Long endLine = null;
        return getBuildLogWithResponse(organization, project, buildId, logId, startLine, endLine, Context.NONE)
            .getValue();
    }

    /**
     * Gets the work items associated with a build. Only work items in the same project are returned.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param top The maximum number of work items to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ResourceRefInner>>> getBuildWorkItemsRefsWithResponseAsync(String organization,
        String project, int buildId, Integer top) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getBuildWorkItemsRefs(this.client.getEndpoint(), organization, project,
                buildId, top, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the work items associated with a build. Only work items in the same project are returned.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param top The maximum number of work items to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ResourceRefInner>>> getBuildWorkItemsRefsWithResponseAsync(String organization,
        String project, int buildId, Integer top, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getBuildWorkItemsRefs(this.client.getEndpoint(), organization, project, buildId, top,
            this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the work items associated with a build. Only work items in the same project are returned.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<ResourceRefInner>> getBuildWorkItemsRefsAsync(String organization, String project, int buildId) {
        final Integer top = null;
        return getBuildWorkItemsRefsWithResponseAsync(organization, project, buildId, top)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the work items associated with a build. Only work items in the same project are returned.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param top The maximum number of work items to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<ResourceRefInner>> getBuildWorkItemsRefsWithResponse(String organization, String project,
        int buildId, Integer top, Context context) {
        return getBuildWorkItemsRefsWithResponseAsync(organization, project, buildId, top, context).block();
    }

    /**
     * Gets the work items associated with a build. Only work items in the same project are returned.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<ResourceRefInner> getBuildWorkItemsRefs(String organization, String project, int buildId) {
        final Integer top = null;
        return getBuildWorkItemsRefsWithResponse(organization, project, buildId, top, Context.NONE).getValue();
    }

    /**
     * Gets the work items associated with a build, filtered to specific commits.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body A comma-delimited list of commit IDs.
     * @param top The maximum number of work items to return, or the number of commits to consider if no commit IDs are
     * specified.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build, filtered to specific commits along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ResourceRefInner>>> getBuildWorkItemsRefsFromCommitsWithResponseAsync(
        String organization, String project, int buildId, List<String> body, Integer top) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getBuildWorkItemsRefsFromCommits(this.client.getEndpoint(), organization,
                project, buildId, top, this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the work items associated with a build, filtered to specific commits.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body A comma-delimited list of commit IDs.
     * @param top The maximum number of work items to return, or the number of commits to consider if no commit IDs are
     * specified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build, filtered to specific commits along with {@link Response} on
     * successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ResourceRefInner>>> getBuildWorkItemsRefsFromCommitsWithResponseAsync(
        String organization, String project, int buildId, List<String> body, Integer top, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getBuildWorkItemsRefsFromCommits(this.client.getEndpoint(), organization, project, buildId, top,
            this.client.getApiVersion(), body, accept, context);
    }

    /**
     * Gets the work items associated with a build, filtered to specific commits.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body A comma-delimited list of commit IDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build, filtered to specific commits on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<ResourceRefInner>> getBuildWorkItemsRefsFromCommitsAsync(String organization, String project,
        int buildId, List<String> body) {
        final Integer top = null;
        return getBuildWorkItemsRefsFromCommitsWithResponseAsync(organization, project, buildId, body, top)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the work items associated with a build, filtered to specific commits.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body A comma-delimited list of commit IDs.
     * @param top The maximum number of work items to return, or the number of commits to consider if no commit IDs are
     * specified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build, filtered to specific commits along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<ResourceRefInner>> getBuildWorkItemsRefsFromCommitsWithResponse(String organization,
        String project, int buildId, List<String> body, Integer top, Context context) {
        return getBuildWorkItemsRefsFromCommitsWithResponseAsync(organization, project, buildId, body, top, context)
            .block();
    }

    /**
     * Gets the work items associated with a build, filtered to specific commits.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body A comma-delimited list of commit IDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build, filtered to specific commits.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<ResourceRefInner> getBuildWorkItemsRefsFromCommits(String organization, String project, int buildId,
        List<String> body) {
        final Integer top = null;
        return getBuildWorkItemsRefsFromCommitsWithResponse(organization, project, buildId, body, top, Context.NONE)
            .getValue();
    }

    /**
     * Gets the changes made to the repository between two given builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @param top The maximum number of changes to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes made to the repository between two given builds along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ChangeInner>>> getChangesBetweenBuildsWithResponseAsync(String organization,
        String project, Integer fromBuildId, Integer toBuildId, Integer top) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getChangesBetweenBuilds(this.client.getEndpoint(), organization, project,
                fromBuildId, toBuildId, top, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets the changes made to the repository between two given builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @param top The maximum number of changes to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes made to the repository between two given builds along with {@link Response} on successful
     * completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ChangeInner>>> getChangesBetweenBuildsWithResponseAsync(String organization,
        String project, Integer fromBuildId, Integer toBuildId, Integer top, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getChangesBetweenBuilds(this.client.getEndpoint(), organization, project, fromBuildId, toBuildId,
            top, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets the changes made to the repository between two given builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes made to the repository between two given builds on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<ChangeInner>> getChangesBetweenBuildsAsync(String organization, String project) {
        final Integer fromBuildId = null;
        final Integer toBuildId = null;
        final Integer top = null;
        return getChangesBetweenBuildsWithResponseAsync(organization, project, fromBuildId, toBuildId, top)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets the changes made to the repository between two given builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @param top The maximum number of changes to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes made to the repository between two given builds along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<ChangeInner>> getChangesBetweenBuildsWithResponse(String organization, String project,
        Integer fromBuildId, Integer toBuildId, Integer top, Context context) {
        return getChangesBetweenBuildsWithResponseAsync(organization, project, fromBuildId, toBuildId, top, context)
            .block();
    }

    /**
     * Gets the changes made to the repository between two given builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes made to the repository between two given builds.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<ChangeInner> getChangesBetweenBuilds(String organization, String project) {
        final Integer fromBuildId = null;
        final Integer toBuildId = null;
        final Integer top = null;
        return getChangesBetweenBuildsWithResponse(organization, project, fromBuildId, toBuildId, top, Context.NONE)
            .getValue();
    }

    /**
     * Gets all the work items between two builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @param top The maximum number of work items to return.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the work items between two builds along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ResourceRefInner>>> getWorkItemsBetweenBuildsWithResponseAsync(String organization,
        String project, int fromBuildId, int toBuildId, Integer top) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getWorkItemsBetweenBuilds(this.client.getEndpoint(), organization, project,
                fromBuildId, toBuildId, top, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets all the work items between two builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @param top The maximum number of work items to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the work items between two builds along with {@link Response} on successful completion of
     * {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<ResourceRefInner>>> getWorkItemsBetweenBuildsWithResponseAsync(String organization,
        String project, int fromBuildId, int toBuildId, Integer top, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getWorkItemsBetweenBuilds(this.client.getEndpoint(), organization, project, fromBuildId,
            toBuildId, top, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets all the work items between two builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the work items between two builds on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<ResourceRefInner>> getWorkItemsBetweenBuildsAsync(String organization, String project,
        int fromBuildId, int toBuildId) {
        final Integer top = null;
        return getWorkItemsBetweenBuildsWithResponseAsync(organization, project, fromBuildId, toBuildId, top)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets all the work items between two builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @param top The maximum number of work items to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the work items between two builds along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<ResourceRefInner>> getWorkItemsBetweenBuildsWithResponse(String organization, String project,
        int fromBuildId, int toBuildId, Integer top, Context context) {
        return getWorkItemsBetweenBuildsWithResponseAsync(organization, project, fromBuildId, toBuildId, top, context)
            .block();
    }

    /**
     * Gets all the work items between two builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the work items between two builds.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<ResourceRefInner> getWorkItemsBetweenBuilds(String organization, String project, int fromBuildId,
        int toBuildId) {
        final Integer top = null;
        return getWorkItemsBetweenBuildsWithResponse(organization, project, fromBuildId, toBuildId, top, Context.NONE)
            .getValue();
    }
}

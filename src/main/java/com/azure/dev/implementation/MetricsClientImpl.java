// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.dev.fluent.MetricsClient;
import com.azure.dev.fluent.models.BuildMetricInner;
import java.time.OffsetDateTime;
import java.util.List;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in MetricsClient.
 */
public final class MetricsClientImpl implements MetricsClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final MetricsService service;

    /**
     * The service client containing this operation class.
     */
    private final DevClientImpl client;

    /**
     * Initializes an instance of MetricsClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    MetricsClientImpl(DevClientImpl client) {
        this.service = RestProxy.create(MetricsService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientMetrics to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientMetrics")
    public interface MetricsService {
        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/definitions/{definitionId}/metrics")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<BuildMetricInner>>> getDefinitionMetrics(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("definitionId") int definitionId, @QueryParam("minMetricsTime") OffsetDateTime minMetricsTime,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/metrics/{metricAggregationType}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<BuildMetricInner>>> getProjectMetrics(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("metricAggregationType") String metricAggregationType,
            @QueryParam("minMetricsTime") OffsetDateTime minMetricsTime, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Gets build metrics for a definition.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param minMetricsTime The date from which to calculate metrics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildMetricInner>>> getDefinitionMetricsWithResponseAsync(String organization,
        String project, int definitionId, OffsetDateTime minMetricsTime) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getDefinitionMetrics(this.client.getEndpoint(), organization, project,
                definitionId, minMetricsTime, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets build metrics for a definition.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param minMetricsTime The date from which to calculate metrics.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a definition along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildMetricInner>>> getDefinitionMetricsWithResponseAsync(String organization,
        String project, int definitionId, OffsetDateTime minMetricsTime, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getDefinitionMetrics(this.client.getEndpoint(), organization, project, definitionId,
            minMetricsTime, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets build metrics for a definition.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a definition on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<BuildMetricInner>> getDefinitionMetricsAsync(String organization, String project,
        int definitionId) {
        final OffsetDateTime minMetricsTime = null;
        return getDefinitionMetricsWithResponseAsync(organization, project, definitionId, minMetricsTime)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets build metrics for a definition.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @param minMetricsTime The date from which to calculate metrics.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a definition along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<BuildMetricInner>> getDefinitionMetricsWithResponse(String organization, String project,
        int definitionId, OffsetDateTime minMetricsTime, Context context) {
        return getDefinitionMetricsWithResponseAsync(organization, project, definitionId, minMetricsTime, context)
            .block();
    }

    /**
     * Gets build metrics for a definition.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitionId The ID of the definition.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a definition.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<BuildMetricInner> getDefinitionMetrics(String organization, String project, int definitionId) {
        final OffsetDateTime minMetricsTime = null;
        return getDefinitionMetricsWithResponse(organization, project, definitionId, minMetricsTime, Context.NONE)
            .getValue();
    }

    /**
     * Gets build metrics for a project.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param metricAggregationType The aggregation type to use (hourly, daily).
     * @param minMetricsTime The date from which to calculate metrics.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a project along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildMetricInner>>> getProjectMetricsWithResponseAsync(String organization,
        String project, String metricAggregationType, OffsetDateTime minMetricsTime) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (metricAggregationType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter metricAggregationType is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getProjectMetrics(this.client.getEndpoint(), organization, project,
                metricAggregationType, minMetricsTime, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Gets build metrics for a project.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param metricAggregationType The aggregation type to use (hourly, daily).
     * @param minMetricsTime The date from which to calculate metrics.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a project along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<BuildMetricInner>>> getProjectMetricsWithResponseAsync(String organization,
        String project, String metricAggregationType, OffsetDateTime minMetricsTime, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (metricAggregationType == null) {
            return Mono
                .error(new IllegalArgumentException("Parameter metricAggregationType is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getProjectMetrics(this.client.getEndpoint(), organization, project, metricAggregationType,
            minMetricsTime, this.client.getApiVersion(), accept, context);
    }

    /**
     * Gets build metrics for a project.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param metricAggregationType The aggregation type to use (hourly, daily).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a project on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<BuildMetricInner>> getProjectMetricsAsync(String organization, String project,
        String metricAggregationType) {
        final OffsetDateTime minMetricsTime = null;
        return getProjectMetricsWithResponseAsync(organization, project, metricAggregationType, minMetricsTime)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Gets build metrics for a project.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param metricAggregationType The aggregation type to use (hourly, daily).
     * @param minMetricsTime The date from which to calculate metrics.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a project along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<BuildMetricInner>> getProjectMetricsWithResponse(String organization, String project,
        String metricAggregationType, OffsetDateTime minMetricsTime, Context context) {
        return getProjectMetricsWithResponseAsync(organization, project, metricAggregationType, minMetricsTime, context)
            .block();
    }

    /**
     * Gets build metrics for a project.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param metricAggregationType The aggregation type to use (hourly, daily).
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return build metrics for a project.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<BuildMetricInner> getProjectMetrics(String organization, String project, String metricAggregationType) {
        final OffsetDateTime minMetricsTime = null;
        return getProjectMetricsWithResponse(organization, project, metricAggregationType, minMetricsTime, Context.NONE)
            .getValue();
    }
}

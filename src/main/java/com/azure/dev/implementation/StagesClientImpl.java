// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.dev.fluent.StagesClient;
import com.azure.dev.models.UpdateStageParameters;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in StagesClient.
 */
public final class StagesClientImpl implements StagesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final StagesService service;

    /**
     * The service client containing this operation class.
     */
    private final DevClientImpl client;

    /**
     * Initializes an instance of StagesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    StagesClientImpl(DevClientImpl client) {
        this.service = RestProxy.create(StagesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientStages to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientStages")
    public interface StagesService {
        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Patch("/{organization}/{project}/_apis/build/builds/{buildId}/stages/{stageRefName}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> update(@HostParam("$host") String endpoint, @PathParam("organization") String organization,
            @PathParam("buildId") int buildId, @PathParam("stageRefName") String stageRefName,
            @PathParam("project") String project, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") UpdateStageParameters body, Context context);
    }

    /**
     * Update a build stage.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param buildId The buildId parameter.
     * @param stageRefName The stageRefName parameter.
     * @param project Project ID or project name.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateWithResponseAsync(String organization, int buildId, String stageRefName,
        String project, UpdateStageParameters body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (stageRefName == null) {
            return Mono.error(new IllegalArgumentException("Parameter stageRefName is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), organization, buildId, stageRefName,
                project, this.client.getApiVersion(), body, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Update a build stage.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param buildId The buildId parameter.
     * @param stageRefName The stageRefName parameter.
     * @param project Project ID or project name.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> updateWithResponseAsync(String organization, int buildId, String stageRefName,
        String project, UpdateStageParameters body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (stageRefName == null) {
            return Mono.error(new IllegalArgumentException("Parameter stageRefName is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), organization, buildId, stageRefName, project,
            this.client.getApiVersion(), body, context);
    }

    /**
     * Update a build stage.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param buildId The buildId parameter.
     * @param stageRefName The stageRefName parameter.
     * @param project Project ID or project name.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> updateAsync(String organization, int buildId, String stageRefName, String project,
        UpdateStageParameters body) {
        return updateWithResponseAsync(organization, buildId, stageRefName, project, body)
            .flatMap(ignored -> Mono.empty());
    }

    /**
     * Update a build stage.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param buildId The buildId parameter.
     * @param stageRefName The stageRefName parameter.
     * @param project Project ID or project name.
     * @param body The body parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> updateWithResponse(String organization, int buildId, String stageRefName, String project,
        UpdateStageParameters body, Context context) {
        return updateWithResponseAsync(organization, buildId, stageRefName, project, body, context).block();
    }

    /**
     * Update a build stage.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param buildId The buildId parameter.
     * @param stageRefName The stageRefName parameter.
     * @param project Project ID or project name.
     * @param body The body parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void update(String organization, int buildId, String stageRefName, String project,
        UpdateStageParameters body) {
        updateWithResponse(organization, buildId, stageRefName, project, body, Context.NONE);
    }
}

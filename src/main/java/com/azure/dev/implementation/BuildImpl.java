// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.dev.fluent.models.BuildControllerInner;
import com.azure.dev.fluent.models.BuildInner;
import com.azure.dev.fluent.models.PropertiesCollectionInner;
import com.azure.dev.models.AgentPoolQueue;
import com.azure.dev.models.AgentSpecification;
import com.azure.dev.models.Build;
import com.azure.dev.models.BuildController;
import com.azure.dev.models.BuildLogReference;
import com.azure.dev.models.BuildReason;
import com.azure.dev.models.BuildRepository;
import com.azure.dev.models.BuildRequestValidationResult;
import com.azure.dev.models.BuildResult;
import com.azure.dev.models.BuildStatus;
import com.azure.dev.models.DefinitionReference;
import com.azure.dev.models.Demand;
import com.azure.dev.models.IdentityRef;
import com.azure.dev.models.PropertiesCollection;
import com.azure.dev.models.QueueOptions;
import com.azure.dev.models.QueuePriority;
import com.azure.dev.models.ReferenceLinks;
import com.azure.dev.models.TaskOrchestrationPlanReference;
import com.azure.dev.models.TeamProjectReference;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.Map;

public final class BuildImpl implements Build {
    private BuildInner innerObject;

    private final com.azure.dev.DevManager serviceManager;

    BuildImpl(BuildInner innerObject, com.azure.dev.DevManager serviceManager) {
        this.innerObject = innerObject;
        this.serviceManager = serviceManager;
    }

    public ReferenceLinks links() {
        return this.innerModel().links();
    }

    public AgentSpecification agentSpecification() {
        return this.innerModel().agentSpecification();
    }

    public Boolean appendCommitMessageToRunName() {
        return this.innerModel().appendCommitMessageToRunName();
    }

    public String buildNumber() {
        return this.innerModel().buildNumber();
    }

    public Integer buildNumberRevision() {
        return this.innerModel().buildNumberRevision();
    }

    public BuildController controller() {
        BuildControllerInner inner = this.innerModel().controller();
        if (inner != null) {
            return new BuildControllerImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public DefinitionReference definition() {
        return this.innerModel().definition();
    }

    public Boolean deleted() {
        return this.innerModel().deleted();
    }

    public IdentityRef deletedBy() {
        return this.innerModel().deletedBy();
    }

    public OffsetDateTime deletedDate() {
        return this.innerModel().deletedDate();
    }

    public String deletedReason() {
        return this.innerModel().deletedReason();
    }

    public List<Demand> demands() {
        List<Demand> inner = this.innerModel().demands();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public OffsetDateTime finishTime() {
        return this.innerModel().finishTime();
    }

    public Integer id() {
        return this.innerModel().id();
    }

    public IdentityRef lastChangedBy() {
        return this.innerModel().lastChangedBy();
    }

    public OffsetDateTime lastChangedDate() {
        return this.innerModel().lastChangedDate();
    }

    public BuildLogReference logs() {
        return this.innerModel().logs();
    }

    public TaskOrchestrationPlanReference orchestrationPlan() {
        return this.innerModel().orchestrationPlan();
    }

    public String parameters() {
        return this.innerModel().parameters();
    }

    public List<TaskOrchestrationPlanReference> plans() {
        List<TaskOrchestrationPlanReference> inner = this.innerModel().plans();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public QueuePriority priority() {
        return this.innerModel().priority();
    }

    public TeamProjectReference project() {
        return this.innerModel().project();
    }

    public PropertiesCollection properties() {
        PropertiesCollectionInner inner = this.innerModel().properties();
        if (inner != null) {
            return new PropertiesCollectionImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public String quality() {
        return this.innerModel().quality();
    }

    public AgentPoolQueue queue() {
        return this.innerModel().queue();
    }

    public QueueOptions queueOptions() {
        return this.innerModel().queueOptions();
    }

    public Integer queuePosition() {
        return this.innerModel().queuePosition();
    }

    public OffsetDateTime queueTime() {
        return this.innerModel().queueTime();
    }

    public BuildReason reason() {
        return this.innerModel().reason();
    }

    public BuildRepository repository() {
        return this.innerModel().repository();
    }

    public IdentityRef requestedBy() {
        return this.innerModel().requestedBy();
    }

    public IdentityRef requestedFor() {
        return this.innerModel().requestedFor();
    }

    public BuildResult result() {
        return this.innerModel().result();
    }

    public Boolean retainedByRelease() {
        return this.innerModel().retainedByRelease();
    }

    public String sourceBranch() {
        return this.innerModel().sourceBranch();
    }

    public String sourceVersion() {
        return this.innerModel().sourceVersion();
    }

    public OffsetDateTime startTime() {
        return this.innerModel().startTime();
    }

    public BuildStatus status() {
        return this.innerModel().status();
    }

    public List<String> tags() {
        List<String> inner = this.innerModel().tags();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public Map<String, String> templateParameters() {
        Map<String, String> inner = this.innerModel().templateParameters();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public Build triggeredByBuild() {
        BuildInner inner = this.innerModel().triggeredByBuild();
        if (inner != null) {
            return new BuildImpl(inner, this.manager());
        } else {
            return null;
        }
    }

    public Map<String, String> triggerInfo() {
        Map<String, String> inner = this.innerModel().triggerInfo();
        if (inner != null) {
            return Collections.unmodifiableMap(inner);
        } else {
            return Collections.emptyMap();
        }
    }

    public String uri() {
        return this.innerModel().uri();
    }

    public String url() {
        return this.innerModel().url();
    }

    public List<BuildRequestValidationResult> validationResults() {
        List<BuildRequestValidationResult> inner = this.innerModel().validationResults();
        if (inner != null) {
            return Collections.unmodifiableList(inner);
        } else {
            return Collections.emptyList();
        }
    }

    public BuildInner innerModel() {
        return this.innerObject;
    }

    private com.azure.dev.DevManager manager() {
        return this.serviceManager;
    }
}

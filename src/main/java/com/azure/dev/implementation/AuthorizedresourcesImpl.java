// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.AuthorizedresourcesClient;
import com.azure.dev.fluent.models.DefinitionResourceReferenceInner;
import com.azure.dev.models.Authorizedresources;
import com.azure.dev.models.DefinitionResourceReference;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class AuthorizedresourcesImpl implements Authorizedresources {
    private static final ClientLogger LOGGER = new ClientLogger(AuthorizedresourcesImpl.class);

    private final AuthorizedresourcesClient innerClient;

    private final com.azure.dev.DevManager serviceManager;

    public AuthorizedresourcesImpl(AuthorizedresourcesClient innerClient, com.azure.dev.DevManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<List<DefinitionResourceReference>> authorizeProjectResourcesWithResponse(String organization,
        String project, List<DefinitionResourceReferenceInner> body, Context context) {
        Response<List<DefinitionResourceReferenceInner>> inner
            = this.serviceClient().authorizeProjectResourcesWithResponse(organization, project, body, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new DefinitionResourceReferenceImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<DefinitionResourceReference> authorizeProjectResources(String organization, String project,
        List<DefinitionResourceReferenceInner> body) {
        List<DefinitionResourceReferenceInner> inner
            = this.serviceClient().authorizeProjectResources(organization, project, body);
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new DefinitionResourceReferenceImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<DefinitionResourceReference>> listWithResponse(String organization, String project,
        String type, String id, Context context) {
        Response<List<DefinitionResourceReferenceInner>> inner
            = this.serviceClient().listWithResponse(organization, project, type, id, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new DefinitionResourceReferenceImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<DefinitionResourceReference> list(String organization, String project) {
        List<DefinitionResourceReferenceInner> inner = this.serviceClient().list(organization, project);
        if (inner != null) {
            return Collections.unmodifiableList(inner.stream()
                .map(inner1 -> new DefinitionResourceReferenceImpl(inner1, this.manager()))
                .collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    private AuthorizedresourcesClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.dev.DevManager manager() {
        return this.serviceManager;
    }
}

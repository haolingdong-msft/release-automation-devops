// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.SimpleResponse;
import com.azure.core.util.Context;
import com.azure.core.util.logging.ClientLogger;
import com.azure.dev.fluent.MetricsClient;
import com.azure.dev.fluent.models.BuildMetricInner;
import com.azure.dev.models.BuildMetric;
import com.azure.dev.models.Metrics;
import java.time.OffsetDateTime;
import java.util.Collections;
import java.util.List;
import java.util.stream.Collectors;

public final class MetricsImpl implements Metrics {
    private static final ClientLogger LOGGER = new ClientLogger(MetricsImpl.class);

    private final MetricsClient innerClient;

    private final com.azure.dev.DevManager serviceManager;

    public MetricsImpl(MetricsClient innerClient, com.azure.dev.DevManager serviceManager) {
        this.innerClient = innerClient;
        this.serviceManager = serviceManager;
    }

    public Response<List<BuildMetric>> getDefinitionMetricsWithResponse(String organization, String project,
        int definitionId, OffsetDateTime minMetricsTime, Context context) {
        Response<List<BuildMetricInner>> inner = this.serviceClient()
            .getDefinitionMetricsWithResponse(organization, project, definitionId, minMetricsTime, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new BuildMetricImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<BuildMetric> getDefinitionMetrics(String organization, String project, int definitionId) {
        List<BuildMetricInner> inner = this.serviceClient().getDefinitionMetrics(organization, project, definitionId);
        if (inner != null) {
            return Collections.unmodifiableList(
                inner.stream().map(inner1 -> new BuildMetricImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    public Response<List<BuildMetric>> getProjectMetricsWithResponse(String organization, String project,
        String metricAggregationType, OffsetDateTime minMetricsTime, Context context) {
        Response<List<BuildMetricInner>> inner = this.serviceClient()
            .getProjectMetricsWithResponse(organization, project, metricAggregationType, minMetricsTime, context);
        if (inner != null) {
            return new SimpleResponse<>(inner.getRequest(), inner.getStatusCode(), inner.getHeaders(),
                inner.getValue()
                    .stream()
                    .map(inner1 -> new BuildMetricImpl(inner1, this.manager()))
                    .collect(Collectors.toList()));
        } else {
            return null;
        }
    }

    public List<BuildMetric> getProjectMetrics(String organization, String project, String metricAggregationType) {
        List<BuildMetricInner> inner
            = this.serviceClient().getProjectMetrics(organization, project, metricAggregationType);
        if (inner != null) {
            return Collections.unmodifiableList(
                inner.stream().map(inner1 -> new BuildMetricImpl(inner1, this.manager())).collect(Collectors.toList()));
        } else {
            return Collections.emptyList();
        }
    }

    private MetricsClient serviceClient() {
        return this.innerClient;
    }

    private com.azure.dev.DevManager manager() {
        return this.serviceManager;
    }
}

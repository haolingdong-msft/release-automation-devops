// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.implementation;

import com.azure.core.annotation.BodyParam;
import com.azure.core.annotation.Delete;
import com.azure.core.annotation.ExpectedResponses;
import com.azure.core.annotation.Get;
import com.azure.core.annotation.HeaderParam;
import com.azure.core.annotation.Headers;
import com.azure.core.annotation.Host;
import com.azure.core.annotation.HostParam;
import com.azure.core.annotation.Patch;
import com.azure.core.annotation.PathParam;
import com.azure.core.annotation.Post;
import com.azure.core.annotation.QueryParam;
import com.azure.core.annotation.ReturnType;
import com.azure.core.annotation.ServiceInterface;
import com.azure.core.annotation.ServiceMethod;
import com.azure.core.annotation.UnexpectedResponseExceptionType;
import com.azure.core.http.rest.Response;
import com.azure.core.http.rest.RestProxy;
import com.azure.core.management.exception.ManagementException;
import com.azure.core.util.Context;
import com.azure.core.util.FluxUtil;
import com.azure.dev.fluent.LeasesClient;
import com.azure.dev.fluent.models.RetentionLeaseInner;
import com.azure.dev.models.NewRetentionLease;
import com.azure.dev.models.RetentionLeaseUpdate;
import java.util.List;
import java.util.UUID;
import reactor.core.publisher.Mono;

/**
 * An instance of this class provides access to all the operations defined in LeasesClient.
 */
public final class LeasesClientImpl implements LeasesClient {
    /**
     * The proxy service used to perform REST calls.
     */
    private final LeasesService service;

    /**
     * The service client containing this operation class.
     */
    private final DevClientImpl client;

    /**
     * Initializes an instance of LeasesClientImpl.
     * 
     * @param client the instance of the service client containing this operation class.
     */
    LeasesClientImpl(DevClientImpl client) {
        this.service = RestProxy.create(LeasesService.class, client.getHttpPipeline(), client.getSerializerAdapter());
        this.client = client;
    }

    /**
     * The interface defining all the services for DevClientLeases to be used by the proxy service to perform REST
     * calls.
     */
    @Host("{$host}")
    @ServiceInterface(name = "DevClientLeases")
    public interface LeasesService {
        @Headers({ "Content-Type: application/json" })
        @Post("/{organization}/{project}/_apis/build/retention/leases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<RetentionLeaseInner>>> add(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @QueryParam("api-version") String apiVersion, @BodyParam("application/json") List<NewRetentionLease> body,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Accept: application/json;q=0.9", "Content-Type: application/json" })
        @Delete("/{organization}/{project}/_apis/build/retention/leases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<Void>> delete(@HostParam("$host") String endpoint, @PathParam("organization") String organization,
            @PathParam("project") String project, @QueryParam("ids") String ids,
            @QueryParam("api-version") String apiVersion, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/retention/leases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesByMinimalRetentionLeases(
            @HostParam("$host") String endpoint, @PathParam("organization") String organization,
            @PathParam("project") String project, @QueryParam("leasesToFetch") String leasesToFetch,
            @QueryParam("api-version") String apiVersion, @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/retention/leases/{leaseId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RetentionLeaseInner>> get(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("leaseId") int leaseId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Patch("/{organization}/{project}/_apis/build/retention/leases/{leaseId}")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<RetentionLeaseInner>> update(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @PathParam("leaseId") int leaseId, @QueryParam("api-version") String apiVersion,
            @BodyParam("application/json") RetentionLeaseUpdate body, @HeaderParam("Accept") String accept,
            Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/retention/leases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesByUserId(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @QueryParam("userOwnerId") UUID userOwnerId, @QueryParam("definitionId") Integer definitionId,
            @QueryParam("runId") Integer runId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);

        @Headers({ "Content-Type: application/json" })
        @Get("/{organization}/{project}/_apis/build/retention/leases")
        @ExpectedResponses({ 200 })
        @UnexpectedResponseExceptionType(ManagementException.class)
        Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesByOwnerId(@HostParam("$host") String endpoint,
            @PathParam("organization") String organization, @PathParam("project") String project,
            @QueryParam("ownerId") String ownerId, @QueryParam("definitionId") Integer definitionId,
            @QueryParam("runId") Integer runId, @QueryParam("api-version") String apiVersion,
            @HeaderParam("Accept") String accept, Context context);
    }

    /**
     * Adds new leases for pipeline runs.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Array of NewRetentionLease.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> addWithResponseAsync(String organization, String project,
        List<NewRetentionLease> body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.forEach(e -> e.validate());
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.add(this.client.getEndpoint(), organization, project,
                this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Adds new leases for pipeline runs.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Array of NewRetentionLease.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> addWithResponseAsync(String organization, String project,
        List<NewRetentionLease> body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.forEach(e -> e.validate());
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.add(this.client.getEndpoint(), organization, project, this.client.getApiVersion(), body, accept,
            context);
    }

    /**
     * Adds new leases for pipeline runs.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Array of NewRetentionLease.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<RetentionLeaseInner>> addAsync(String organization, String project,
        List<NewRetentionLease> body) {
        return addWithResponseAsync(organization, project, body).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Adds new leases for pipeline runs.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Array of NewRetentionLease.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<RetentionLeaseInner>> addWithResponse(String organization, String project,
        List<NewRetentionLease> body, Context context) {
        return addWithResponseAsync(organization, project, body, context).block();
    }

    /**
     * Adds new leases for pipeline runs.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Array of NewRetentionLease.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<RetentionLeaseInner> add(String organization, String project, List<NewRetentionLease> body) {
        return addWithResponse(organization, project, body, Context.NONE).getValue();
    }

    /**
     * Removes specific retention leases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ids The ids parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String organization, String project, String ids) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (ids == null) {
            return Mono.error(new IllegalArgumentException("Parameter ids is required and cannot be null."));
        }
        return FluxUtil
            .withContext(context -> service.delete(this.client.getEndpoint(), organization, project, ids,
                this.client.getApiVersion(), context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Removes specific retention leases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ids The ids parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<Void>> deleteWithResponseAsync(String organization, String project, String ids,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (ids == null) {
            return Mono.error(new IllegalArgumentException("Parameter ids is required and cannot be null."));
        }
        context = this.client.mergeContext(context);
        return service.delete(this.client.getEndpoint(), organization, project, ids, this.client.getApiVersion(),
            context);
    }

    /**
     * Removes specific retention leases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ids The ids parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return A {@link Mono} that completes when a successful response is received.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Void> deleteAsync(String organization, String project, String ids) {
        return deleteWithResponseAsync(organization, project, ids).flatMap(ignored -> Mono.empty());
    }

    /**
     * Removes specific retention leases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ids The ids parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<Void> deleteWithResponse(String organization, String project, String ids, Context context) {
        return deleteWithResponseAsync(organization, project, ids, context).block();
    }

    /**
     * Removes specific retention leases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ids The ids parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public void delete(String organization, String project, String ids) {
        deleteWithResponse(organization, project, ids, Context.NONE);
    }

    /**
     * Returns any leases matching the specified MinimalRetentionLeases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leasesToFetch List of JSON-serialized MinimalRetentionLeases separated by '|'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesByMinimalRetentionLeasesWithResponseAsync(
        String organization, String project, String leasesToFetch) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (leasesToFetch == null) {
            return Mono.error(new IllegalArgumentException("Parameter leasesToFetch is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getRetentionLeasesByMinimalRetentionLeases(this.client.getEndpoint(),
                organization, project, leasesToFetch, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns any leases matching the specified MinimalRetentionLeases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leasesToFetch List of JSON-serialized MinimalRetentionLeases separated by '|'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesByMinimalRetentionLeasesWithResponseAsync(
        String organization, String project, String leasesToFetch, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (leasesToFetch == null) {
            return Mono.error(new IllegalArgumentException("Parameter leasesToFetch is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getRetentionLeasesByMinimalRetentionLeases(this.client.getEndpoint(), organization, project,
            leasesToFetch, this.client.getApiVersion(), accept, context);
    }

    /**
     * Returns any leases matching the specified MinimalRetentionLeases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leasesToFetch List of JSON-serialized MinimalRetentionLeases separated by '|'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<RetentionLeaseInner>> getRetentionLeasesByMinimalRetentionLeasesAsync(String organization,
        String project, String leasesToFetch) {
        return getRetentionLeasesByMinimalRetentionLeasesWithResponseAsync(organization, project, leasesToFetch)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns any leases matching the specified MinimalRetentionLeases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leasesToFetch List of JSON-serialized MinimalRetentionLeases separated by '|'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<RetentionLeaseInner>> getRetentionLeasesByMinimalRetentionLeasesWithResponse(
        String organization, String project, String leasesToFetch, Context context) {
        return getRetentionLeasesByMinimalRetentionLeasesWithResponseAsync(organization, project, leasesToFetch,
            context).block();
    }

    /**
     * Returns any leases matching the specified MinimalRetentionLeases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leasesToFetch List of JSON-serialized MinimalRetentionLeases separated by '|'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<RetentionLeaseInner> getRetentionLeasesByMinimalRetentionLeases(String organization, String project,
        String leasesToFetch) {
        return getRetentionLeasesByMinimalRetentionLeasesWithResponse(organization, project, leasesToFetch,
            Context.NONE).getValue();
    }

    /**
     * Returns the details of the retention lease given a lease id.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The leaseId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RetentionLeaseInner>> getWithResponseAsync(String organization, String project, int leaseId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.get(this.client.getEndpoint(), organization, project, leaseId,
                this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns the details of the retention lease given a lease id.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The leaseId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RetentionLeaseInner>> getWithResponseAsync(String organization, String project, int leaseId,
        Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.get(this.client.getEndpoint(), organization, project, leaseId, this.client.getApiVersion(),
            accept, context);
    }

    /**
     * Returns the details of the retention lease given a lease id.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The leaseId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RetentionLeaseInner> getAsync(String organization, String project, int leaseId) {
        return getWithResponseAsync(organization, project, leaseId).flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns the details of the retention lease given a lease id.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The leaseId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RetentionLeaseInner> getWithResponse(String organization, String project, int leaseId,
        Context context) {
        return getWithResponseAsync(organization, project, leaseId, context).block();
    }

    /**
     * Returns the details of the retention lease given a lease id.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The leaseId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RetentionLeaseInner get(String organization, String project, int leaseId) {
        return getWithResponse(organization, project, leaseId, Context.NONE).getValue();
    }

    /**
     * Updates the duration or pipeline protection status of a retention lease.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The ID of the lease to update.
     * @param body The new data for the retention lease.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RetentionLeaseInner>> updateWithResponseAsync(String organization, String project,
        int leaseId, RetentionLeaseUpdate body) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.update(this.client.getEndpoint(), organization, project, leaseId,
                this.client.getApiVersion(), body, accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Updates the duration or pipeline protection status of a retention lease.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The ID of the lease to update.
     * @param body The new data for the retention lease.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run along with
     * {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<RetentionLeaseInner>> updateWithResponseAsync(String organization, String project,
        int leaseId, RetentionLeaseUpdate body, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (body == null) {
            return Mono.error(new IllegalArgumentException("Parameter body is required and cannot be null."));
        } else {
            body.validate();
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.update(this.client.getEndpoint(), organization, project, leaseId, this.client.getApiVersion(),
            body, accept, context);
    }

    /**
     * Updates the duration or pipeline protection status of a retention lease.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The ID of the lease to update.
     * @param body The new data for the retention lease.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run on successful completion
     * of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<RetentionLeaseInner> updateAsync(String organization, String project, int leaseId,
        RetentionLeaseUpdate body) {
        return updateWithResponseAsync(organization, project, leaseId, body)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Updates the duration or pipeline protection status of a retention lease.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The ID of the lease to update.
     * @param body The new data for the retention lease.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run along with
     * {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<RetentionLeaseInner> updateWithResponse(String organization, String project, int leaseId,
        RetentionLeaseUpdate body, Context context) {
        return updateWithResponseAsync(organization, project, leaseId, body, context).block();
    }

    /**
     * Updates the duration or pipeline protection status of a retention lease.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The ID of the lease to update.
     * @param body The new data for the retention lease.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public RetentionLeaseInner update(String organization, String project, int leaseId, RetentionLeaseUpdate body) {
        return updateWithResponse(organization, project, leaseId, body, Context.NONE).getValue();
    }

    /**
     * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param userOwnerId The user id to search for.
     * @param definitionId An optional parameter to limit the search to a specific pipeline definition.
     * @param runId An optional parameter to limit the search to a single pipeline run. Requires definitionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesByUserIdWithResponseAsync(String organization,
        String project, UUID userOwnerId, Integer definitionId, Integer runId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (userOwnerId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userOwnerId is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getRetentionLeasesByUserId(this.client.getEndpoint(), organization, project,
                userOwnerId, definitionId, runId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param userOwnerId The user id to search for.
     * @param definitionId An optional parameter to limit the search to a specific pipeline definition.
     * @param runId An optional parameter to limit the search to a single pipeline run. Requires definitionId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesByUserIdWithResponseAsync(String organization,
        String project, UUID userOwnerId, Integer definitionId, Integer runId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        if (userOwnerId == null) {
            return Mono.error(new IllegalArgumentException("Parameter userOwnerId is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getRetentionLeasesByUserId(this.client.getEndpoint(), organization, project, userOwnerId,
            definitionId, runId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param userOwnerId The user id to search for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<RetentionLeaseInner>> getRetentionLeasesByUserIdAsync(String organization, String project,
        UUID userOwnerId) {
        final Integer definitionId = null;
        final Integer runId = null;
        return getRetentionLeasesByUserIdWithResponseAsync(organization, project, userOwnerId, definitionId, runId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param userOwnerId The user id to search for.
     * @param definitionId An optional parameter to limit the search to a specific pipeline definition.
     * @param runId An optional parameter to limit the search to a single pipeline run. Requires definitionId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<RetentionLeaseInner>> getRetentionLeasesByUserIdWithResponse(String organization,
        String project, UUID userOwnerId, Integer definitionId, Integer runId, Context context) {
        return getRetentionLeasesByUserIdWithResponseAsync(organization, project, userOwnerId, definitionId, runId,
            context).block();
    }

    /**
     * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param userOwnerId The user id to search for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<RetentionLeaseInner> getRetentionLeasesByUserId(String organization, String project, UUID userOwnerId) {
        final Integer definitionId = null;
        final Integer runId = null;
        return getRetentionLeasesByUserIdWithResponse(organization, project, userOwnerId, definitionId, runId,
            Context.NONE).getValue();
    }

    /**
     * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ownerId The ownerId parameter.
     * @param definitionId An optional parameter to limit the search to a specific pipeline definition.
     * @param runId An optional parameter to limit the search to a single pipeline run. Requires definitionId.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesByOwnerIdWithResponseAsync(String organization,
        String project, String ownerId, Integer definitionId, Integer runId) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        return FluxUtil
            .withContext(context -> service.getRetentionLeasesByOwnerId(this.client.getEndpoint(), organization,
                project, ownerId, definitionId, runId, this.client.getApiVersion(), accept, context))
            .contextWrite(context -> context.putAll(FluxUtil.toReactorContext(this.client.getContext()).readOnly()));
    }

    /**
     * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ownerId The ownerId parameter.
     * @param definitionId An optional parameter to limit the search to a specific pipeline definition.
     * @param runId An optional parameter to limit the search to a single pipeline run. Requires definitionId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response} on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<Response<List<RetentionLeaseInner>>> getRetentionLeasesByOwnerIdWithResponseAsync(String organization,
        String project, String ownerId, Integer definitionId, Integer runId, Context context) {
        if (this.client.getEndpoint() == null) {
            return Mono.error(
                new IllegalArgumentException("Parameter this.client.getEndpoint() is required and cannot be null."));
        }
        if (organization == null) {
            return Mono.error(new IllegalArgumentException("Parameter organization is required and cannot be null."));
        }
        if (project == null) {
            return Mono.error(new IllegalArgumentException("Parameter project is required and cannot be null."));
        }
        final String accept = "application/json";
        context = this.client.mergeContext(context);
        return service.getRetentionLeasesByOwnerId(this.client.getEndpoint(), organization, project, ownerId,
            definitionId, runId, this.client.getApiVersion(), accept, context);
    }

    /**
     * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease on successful completion of {@link Mono}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    private Mono<List<RetentionLeaseInner>> getRetentionLeasesByOwnerIdAsync(String organization, String project) {
        final String ownerId = null;
        final Integer definitionId = null;
        final Integer runId = null;
        return getRetentionLeasesByOwnerIdWithResponseAsync(organization, project, ownerId, definitionId, runId)
            .flatMap(res -> Mono.justOrEmpty(res.getValue()));
    }

    /**
     * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ownerId The ownerId parameter.
     * @param definitionId An optional parameter to limit the search to a specific pipeline definition.
     * @param runId An optional parameter to limit the search to a single pipeline run. Requires definitionId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response}.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public Response<List<RetentionLeaseInner>> getRetentionLeasesByOwnerIdWithResponse(String organization,
        String project, String ownerId, Integer definitionId, Integer runId, Context context) {
        return getRetentionLeasesByOwnerIdWithResponseAsync(organization, project, ownerId, definitionId, runId,
            context).block();
    }

    /**
     * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease.
     */
    @ServiceMethod(returns = ReturnType.SINGLE)
    public List<RetentionLeaseInner> getRetentionLeasesByOwnerId(String organization, String project) {
        final String ownerId = null;
        final Integer definitionId = null;
        final Integer runId = null;
        return getRetentionLeasesByOwnerIdWithResponse(organization, project, ownerId, definitionId, runId,
            Context.NONE).getValue();
    }
}

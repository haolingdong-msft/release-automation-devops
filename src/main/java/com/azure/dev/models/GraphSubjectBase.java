// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * The GraphSubjectBase model.
 */
@Fluent
public class GraphSubjectBase {
    /*
     * This field contains zero or more interesting links about the graph subject. These links may be invoked to obtain additional relationships or more detailed information about this graph subject.
     */
    @JsonProperty(value = "_links")
    private ReferenceLinks links;

    /*
     * The descriptor is the primary way to reference the graph subject while the system is running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
     */
    @JsonProperty(value = "descriptor")
    private String descriptor;

    /*
     * This is the non-unique display name of the graph subject. To change this field, you must alter its value in the source provider.
     */
    @JsonProperty(value = "displayName")
    private String displayName;

    /*
     * This url is the full route to the source resource of this graph subject.
     */
    @JsonProperty(value = "url")
    private String url;

    /**
     * Creates an instance of GraphSubjectBase class.
     */
    public GraphSubjectBase() {
    }

    /**
     * Get the links property: This field contains zero or more interesting links about the graph subject. These links
     * may be invoked to obtain additional relationships or more detailed information about this graph subject.
     * 
     * @return the links value.
     */
    public ReferenceLinks links() {
        return this.links;
    }

    /**
     * Set the links property: This field contains zero or more interesting links about the graph subject. These links
     * may be invoked to obtain additional relationships or more detailed information about this graph subject.
     * 
     * @param links the links value to set.
     * @return the GraphSubjectBase object itself.
     */
    public GraphSubjectBase withLinks(ReferenceLinks links) {
        this.links = links;
        return this;
    }

    /**
     * Get the descriptor property: The descriptor is the primary way to reference the graph subject while the system is
     * running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
     * 
     * @return the descriptor value.
     */
    public String descriptor() {
        return this.descriptor;
    }

    /**
     * Set the descriptor property: The descriptor is the primary way to reference the graph subject while the system is
     * running. This field will uniquely identify the same graph subject across both Accounts and Organizations.
     * 
     * @param descriptor the descriptor value to set.
     * @return the GraphSubjectBase object itself.
     */
    public GraphSubjectBase withDescriptor(String descriptor) {
        this.descriptor = descriptor;
        return this;
    }

    /**
     * Get the displayName property: This is the non-unique display name of the graph subject. To change this field, you
     * must alter its value in the source provider.
     * 
     * @return the displayName value.
     */
    public String displayName() {
        return this.displayName;
    }

    /**
     * Set the displayName property: This is the non-unique display name of the graph subject. To change this field, you
     * must alter its value in the source provider.
     * 
     * @param displayName the displayName value to set.
     * @return the GraphSubjectBase object itself.
     */
    public GraphSubjectBase withDisplayName(String displayName) {
        this.displayName = displayName;
        return this;
    }

    /**
     * Get the url property: This url is the full route to the source resource of this graph subject.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: This url is the full route to the source resource of this graph subject.
     * 
     * @param url the url value to set.
     * @return the GraphSubjectBase object itself.
     */
    public GraphSubjectBase withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (links() != null) {
            links().validate();
        }
    }
}

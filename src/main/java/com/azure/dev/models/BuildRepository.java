// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Represents a repository used by a build definition.
 */
@Fluent
public final class BuildRepository {
    /*
     * Indicates whether to checkout submodules.
     */
    @JsonProperty(value = "checkoutSubmodules")
    private Boolean checkoutSubmodules;

    /*
     * Indicates whether to clean the target folder when getting code from the repository.
     */
    @JsonProperty(value = "clean")
    private String clean;

    /*
     * The name of the default branch.
     */
    @JsonProperty(value = "defaultBranch")
    private String defaultBranch;

    /*
     * The ID of the repository.
     */
    @JsonProperty(value = "id")
    private String id;

    /*
     * The friendly name of the repository.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Dictionary of <string>
     */
    @JsonProperty(value = "properties")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> properties;

    /*
     * The root folder.
     */
    @JsonProperty(value = "rootFolder")
    private String rootFolder;

    /*
     * The type of the repository.
     */
    @JsonProperty(value = "type")
    private String type;

    /*
     * The URL of the repository.
     */
    @JsonProperty(value = "url")
    private String url;

    /**
     * Creates an instance of BuildRepository class.
     */
    public BuildRepository() {
    }

    /**
     * Get the checkoutSubmodules property: Indicates whether to checkout submodules.
     * 
     * @return the checkoutSubmodules value.
     */
    public Boolean checkoutSubmodules() {
        return this.checkoutSubmodules;
    }

    /**
     * Set the checkoutSubmodules property: Indicates whether to checkout submodules.
     * 
     * @param checkoutSubmodules the checkoutSubmodules value to set.
     * @return the BuildRepository object itself.
     */
    public BuildRepository withCheckoutSubmodules(Boolean checkoutSubmodules) {
        this.checkoutSubmodules = checkoutSubmodules;
        return this;
    }

    /**
     * Get the clean property: Indicates whether to clean the target folder when getting code from the repository.
     * 
     * @return the clean value.
     */
    public String clean() {
        return this.clean;
    }

    /**
     * Set the clean property: Indicates whether to clean the target folder when getting code from the repository.
     * 
     * @param clean the clean value to set.
     * @return the BuildRepository object itself.
     */
    public BuildRepository withClean(String clean) {
        this.clean = clean;
        return this;
    }

    /**
     * Get the defaultBranch property: The name of the default branch.
     * 
     * @return the defaultBranch value.
     */
    public String defaultBranch() {
        return this.defaultBranch;
    }

    /**
     * Set the defaultBranch property: The name of the default branch.
     * 
     * @param defaultBranch the defaultBranch value to set.
     * @return the BuildRepository object itself.
     */
    public BuildRepository withDefaultBranch(String defaultBranch) {
        this.defaultBranch = defaultBranch;
        return this;
    }

    /**
     * Get the id property: The ID of the repository.
     * 
     * @return the id value.
     */
    public String id() {
        return this.id;
    }

    /**
     * Set the id property: The ID of the repository.
     * 
     * @param id the id value to set.
     * @return the BuildRepository object itself.
     */
    public BuildRepository withId(String id) {
        this.id = id;
        return this;
    }

    /**
     * Get the name property: The friendly name of the repository.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The friendly name of the repository.
     * 
     * @param name the name value to set.
     * @return the BuildRepository object itself.
     */
    public BuildRepository withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the properties property: Dictionary of &lt;string&gt;.
     * 
     * @return the properties value.
     */
    public Map<String, String> properties() {
        return this.properties;
    }

    /**
     * Set the properties property: Dictionary of &lt;string&gt;.
     * 
     * @param properties the properties value to set.
     * @return the BuildRepository object itself.
     */
    public BuildRepository withProperties(Map<String, String> properties) {
        this.properties = properties;
        return this;
    }

    /**
     * Get the rootFolder property: The root folder.
     * 
     * @return the rootFolder value.
     */
    public String rootFolder() {
        return this.rootFolder;
    }

    /**
     * Set the rootFolder property: The root folder.
     * 
     * @param rootFolder the rootFolder value to set.
     * @return the BuildRepository object itself.
     */
    public BuildRepository withRootFolder(String rootFolder) {
        this.rootFolder = rootFolder;
        return this;
    }

    /**
     * Get the type property: The type of the repository.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of the repository.
     * 
     * @param type the type value to set.
     * @return the BuildRepository object itself.
     */
    public BuildRepository withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the url property: The URL of the repository.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: The URL of the repository.
     * 
     * @param url the url value to set.
     * @return the BuildRepository object itself.
     */
    public BuildRepository withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}

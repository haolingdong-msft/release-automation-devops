// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * Represents binding of data source for the service endpoint request.
 */
@Fluent
public final class DataSourceBindingBase {
    /*
     * Pagination format supported by this data source(ContinuationToken/SkipTop).
     */
    @JsonProperty(value = "callbackContextTemplate")
    private String callbackContextTemplate;

    /*
     * Subsequent calls needed?
     */
    @JsonProperty(value = "callbackRequiredTemplate")
    private String callbackRequiredTemplate;

    /*
     * Gets or sets the name of the data source.
     */
    @JsonProperty(value = "dataSourceName")
    private String dataSourceName;

    /*
     * Gets or sets the endpoint Id.
     */
    @JsonProperty(value = "endpointId")
    private String endpointId;

    /*
     * Gets or sets the url of the service endpoint.
     */
    @JsonProperty(value = "endpointUrl")
    private String endpointUrl;

    /*
     * Gets or sets the authorization headers.
     */
    @JsonProperty(value = "headers")
    private List<AuthorizationHeader> headers;

    /*
     * Defines the initial value of the query params
     */
    @JsonProperty(value = "initialContextTemplate")
    private String initialContextTemplate;

    /*
     * Gets or sets the parameters for the data source.
     */
    @JsonProperty(value = "parameters")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> parameters;

    /*
     * Gets or sets http request body
     */
    @JsonProperty(value = "requestContent")
    private String requestContent;

    /*
     * Gets or sets http request verb
     */
    @JsonProperty(value = "requestVerb")
    private String requestVerb;

    /*
     * Gets or sets the result selector.
     */
    @JsonProperty(value = "resultSelector")
    private String resultSelector;

    /*
     * Gets or sets the result template.
     */
    @JsonProperty(value = "resultTemplate")
    private String resultTemplate;

    /*
     * Gets or sets the target of the data source.
     */
    @JsonProperty(value = "target")
    private String target;

    /**
     * Creates an instance of DataSourceBindingBase class.
     */
    public DataSourceBindingBase() {
    }

    /**
     * Get the callbackContextTemplate property: Pagination format supported by this data
     * source(ContinuationToken/SkipTop).
     * 
     * @return the callbackContextTemplate value.
     */
    public String callbackContextTemplate() {
        return this.callbackContextTemplate;
    }

    /**
     * Set the callbackContextTemplate property: Pagination format supported by this data
     * source(ContinuationToken/SkipTop).
     * 
     * @param callbackContextTemplate the callbackContextTemplate value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withCallbackContextTemplate(String callbackContextTemplate) {
        this.callbackContextTemplate = callbackContextTemplate;
        return this;
    }

    /**
     * Get the callbackRequiredTemplate property: Subsequent calls needed?.
     * 
     * @return the callbackRequiredTemplate value.
     */
    public String callbackRequiredTemplate() {
        return this.callbackRequiredTemplate;
    }

    /**
     * Set the callbackRequiredTemplate property: Subsequent calls needed?.
     * 
     * @param callbackRequiredTemplate the callbackRequiredTemplate value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withCallbackRequiredTemplate(String callbackRequiredTemplate) {
        this.callbackRequiredTemplate = callbackRequiredTemplate;
        return this;
    }

    /**
     * Get the dataSourceName property: Gets or sets the name of the data source.
     * 
     * @return the dataSourceName value.
     */
    public String dataSourceName() {
        return this.dataSourceName;
    }

    /**
     * Set the dataSourceName property: Gets or sets the name of the data source.
     * 
     * @param dataSourceName the dataSourceName value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withDataSourceName(String dataSourceName) {
        this.dataSourceName = dataSourceName;
        return this;
    }

    /**
     * Get the endpointId property: Gets or sets the endpoint Id.
     * 
     * @return the endpointId value.
     */
    public String endpointId() {
        return this.endpointId;
    }

    /**
     * Set the endpointId property: Gets or sets the endpoint Id.
     * 
     * @param endpointId the endpointId value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withEndpointId(String endpointId) {
        this.endpointId = endpointId;
        return this;
    }

    /**
     * Get the endpointUrl property: Gets or sets the url of the service endpoint.
     * 
     * @return the endpointUrl value.
     */
    public String endpointUrl() {
        return this.endpointUrl;
    }

    /**
     * Set the endpointUrl property: Gets or sets the url of the service endpoint.
     * 
     * @param endpointUrl the endpointUrl value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withEndpointUrl(String endpointUrl) {
        this.endpointUrl = endpointUrl;
        return this;
    }

    /**
     * Get the headers property: Gets or sets the authorization headers.
     * 
     * @return the headers value.
     */
    public List<AuthorizationHeader> headers() {
        return this.headers;
    }

    /**
     * Set the headers property: Gets or sets the authorization headers.
     * 
     * @param headers the headers value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withHeaders(List<AuthorizationHeader> headers) {
        this.headers = headers;
        return this;
    }

    /**
     * Get the initialContextTemplate property: Defines the initial value of the query params.
     * 
     * @return the initialContextTemplate value.
     */
    public String initialContextTemplate() {
        return this.initialContextTemplate;
    }

    /**
     * Set the initialContextTemplate property: Defines the initial value of the query params.
     * 
     * @param initialContextTemplate the initialContextTemplate value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withInitialContextTemplate(String initialContextTemplate) {
        this.initialContextTemplate = initialContextTemplate;
        return this;
    }

    /**
     * Get the parameters property: Gets or sets the parameters for the data source.
     * 
     * @return the parameters value.
     */
    public Map<String, String> parameters() {
        return this.parameters;
    }

    /**
     * Set the parameters property: Gets or sets the parameters for the data source.
     * 
     * @param parameters the parameters value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withParameters(Map<String, String> parameters) {
        this.parameters = parameters;
        return this;
    }

    /**
     * Get the requestContent property: Gets or sets http request body.
     * 
     * @return the requestContent value.
     */
    public String requestContent() {
        return this.requestContent;
    }

    /**
     * Set the requestContent property: Gets or sets http request body.
     * 
     * @param requestContent the requestContent value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withRequestContent(String requestContent) {
        this.requestContent = requestContent;
        return this;
    }

    /**
     * Get the requestVerb property: Gets or sets http request verb.
     * 
     * @return the requestVerb value.
     */
    public String requestVerb() {
        return this.requestVerb;
    }

    /**
     * Set the requestVerb property: Gets or sets http request verb.
     * 
     * @param requestVerb the requestVerb value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withRequestVerb(String requestVerb) {
        this.requestVerb = requestVerb;
        return this;
    }

    /**
     * Get the resultSelector property: Gets or sets the result selector.
     * 
     * @return the resultSelector value.
     */
    public String resultSelector() {
        return this.resultSelector;
    }

    /**
     * Set the resultSelector property: Gets or sets the result selector.
     * 
     * @param resultSelector the resultSelector value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withResultSelector(String resultSelector) {
        this.resultSelector = resultSelector;
        return this;
    }

    /**
     * Get the resultTemplate property: Gets or sets the result template.
     * 
     * @return the resultTemplate value.
     */
    public String resultTemplate() {
        return this.resultTemplate;
    }

    /**
     * Set the resultTemplate property: Gets or sets the result template.
     * 
     * @param resultTemplate the resultTemplate value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withResultTemplate(String resultTemplate) {
        this.resultTemplate = resultTemplate;
        return this;
    }

    /**
     * Get the target property: Gets or sets the target of the data source.
     * 
     * @return the target value.
     */
    public String target() {
        return this.target;
    }

    /**
     * Set the target property: Gets or sets the target of the data source.
     * 
     * @param target the target value to set.
     * @return the DataSourceBindingBase object itself.
     */
    public DataSourceBindingBase withTarget(String target) {
        this.target = target;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (headers() != null) {
            headers().forEach(e -> e.validate());
        }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * The RunResources model.
 */
@Fluent
public final class RunResources {
    /*
     * Dictionary of <ContainerResource>
     */
    @JsonProperty(value = "containers")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, ContainerResource> containers;

    /*
     * Dictionary of <PipelineResource>
     */
    @JsonProperty(value = "pipelines")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, PipelineResource> pipelines;

    /*
     * Dictionary of <RepositoryResource>
     */
    @JsonProperty(value = "repositories")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, RepositoryResource> repositories;

    /**
     * Creates an instance of RunResources class.
     */
    public RunResources() {
    }

    /**
     * Get the containers property: Dictionary of &lt;ContainerResource&gt;.
     * 
     * @return the containers value.
     */
    public Map<String, ContainerResource> containers() {
        return this.containers;
    }

    /**
     * Set the containers property: Dictionary of &lt;ContainerResource&gt;.
     * 
     * @param containers the containers value to set.
     * @return the RunResources object itself.
     */
    public RunResources withContainers(Map<String, ContainerResource> containers) {
        this.containers = containers;
        return this;
    }

    /**
     * Get the pipelines property: Dictionary of &lt;PipelineResource&gt;.
     * 
     * @return the pipelines value.
     */
    public Map<String, PipelineResource> pipelines() {
        return this.pipelines;
    }

    /**
     * Set the pipelines property: Dictionary of &lt;PipelineResource&gt;.
     * 
     * @param pipelines the pipelines value to set.
     * @return the RunResources object itself.
     */
    public RunResources withPipelines(Map<String, PipelineResource> pipelines) {
        this.pipelines = pipelines;
        return this;
    }

    /**
     * Get the repositories property: Dictionary of &lt;RepositoryResource&gt;.
     * 
     * @return the repositories value.
     */
    public Map<String, RepositoryResource> repositories() {
        return this.repositories;
    }

    /**
     * Set the repositories property: Dictionary of &lt;RepositoryResource&gt;.
     * 
     * @param repositories the repositories value to set.
     * @return the RunResources object itself.
     */
    public RunResources withRepositories(Map<String, RepositoryResource> repositories) {
        this.repositories = repositories;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (containers() != null) {
            containers().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (pipelines() != null) {
            pipelines().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (repositories() != null) {
            repositories().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }
}

// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * An update to the retention parameters of a retention lease.
 */
@Fluent
public final class RetentionLeaseUpdate {
    /*
     * The number of days to consider the lease valid. A retention lease valid for more than 100 years (36500 days) will display as retaining the build "forever".
     */
    @JsonProperty(value = "daysValid")
    private Integer daysValid;

    /*
     * If set, this lease will also prevent the pipeline from being deleted while the lease is still valid.
     */
    @JsonProperty(value = "protectPipeline")
    private Boolean protectPipeline;

    /**
     * Creates an instance of RetentionLeaseUpdate class.
     */
    public RetentionLeaseUpdate() {
    }

    /**
     * Get the daysValid property: The number of days to consider the lease valid. A retention lease valid for more than
     * 100 years (36500 days) will display as retaining the build "forever".
     * 
     * @return the daysValid value.
     */
    public Integer daysValid() {
        return this.daysValid;
    }

    /**
     * Set the daysValid property: The number of days to consider the lease valid. A retention lease valid for more than
     * 100 years (36500 days) will display as retaining the build "forever".
     * 
     * @param daysValid the daysValid value to set.
     * @return the RetentionLeaseUpdate object itself.
     */
    public RetentionLeaseUpdate withDaysValid(Integer daysValid) {
        this.daysValid = daysValid;
        return this;
    }

    /**
     * Get the protectPipeline property: If set, this lease will also prevent the pipeline from being deleted while the
     * lease is still valid.
     * 
     * @return the protectPipeline value.
     */
    public Boolean protectPipeline() {
        return this.protectPipeline;
    }

    /**
     * Set the protectPipeline property: If set, this lease will also prevent the pipeline from being deleted while the
     * lease is still valid.
     * 
     * @param protectPipeline the protectPipeline value to set.
     * @return the RetentionLeaseUpdate object itself.
     */
    public RetentionLeaseUpdate withProtectPipeline(Boolean protectPipeline) {
        this.protectPipeline = protectPipeline;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}

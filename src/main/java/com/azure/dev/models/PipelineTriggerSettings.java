// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;

/**
 * Represents the effective settings applicable to individual pipeline triggers.
 */
@Fluent
public final class PipelineTriggerSettings {
    /*
     * Enable forked repositories to build pull requests.
     */
    @JsonProperty(value = "buildsEnabledForForks")
    private Boolean buildsEnabledForForks;

    /*
     * Enforce job auth scope for builds of forked repositories.
     */
    @JsonProperty(value = "enforceJobAuthScopeForForks")
    private Boolean enforceJobAuthScopeForForks;

    /*
     * Enforce no access to secrets for builds of forked repositories.
     */
    @JsonProperty(value = "enforceNoAccessToSecretsFromForks")
    private Boolean enforceNoAccessToSecretsFromForks;

    /*
     * Enable settings that enforce certain levels of protection for building pull requests from forks globally.
     */
    @JsonProperty(value = "forkProtectionEnabled")
    private Boolean forkProtectionEnabled;

    /*
     * Make comments required to have builds in all pull requests.
     */
    @JsonProperty(value = "isCommentRequiredForPullRequest")
    private Boolean isCommentRequiredForPullRequest;

    /*
     * Make comments required to have builds in pull requests from non-team members and non-contributors.
     */
    @JsonProperty(value = "requireCommentsForNonTeamMemberAndNonContributors")
    private Boolean requireCommentsForNonTeamMemberAndNonContributors;

    /*
     * Make comments required to have builds in pull requests from non-team members.
     */
    @JsonProperty(value = "requireCommentsForNonTeamMembersOnly")
    private Boolean requireCommentsForNonTeamMembersOnly;

    /**
     * Creates an instance of PipelineTriggerSettings class.
     */
    public PipelineTriggerSettings() {
    }

    /**
     * Get the buildsEnabledForForks property: Enable forked repositories to build pull requests.
     * 
     * @return the buildsEnabledForForks value.
     */
    public Boolean buildsEnabledForForks() {
        return this.buildsEnabledForForks;
    }

    /**
     * Set the buildsEnabledForForks property: Enable forked repositories to build pull requests.
     * 
     * @param buildsEnabledForForks the buildsEnabledForForks value to set.
     * @return the PipelineTriggerSettings object itself.
     */
    public PipelineTriggerSettings withBuildsEnabledForForks(Boolean buildsEnabledForForks) {
        this.buildsEnabledForForks = buildsEnabledForForks;
        return this;
    }

    /**
     * Get the enforceJobAuthScopeForForks property: Enforce job auth scope for builds of forked repositories.
     * 
     * @return the enforceJobAuthScopeForForks value.
     */
    public Boolean enforceJobAuthScopeForForks() {
        return this.enforceJobAuthScopeForForks;
    }

    /**
     * Set the enforceJobAuthScopeForForks property: Enforce job auth scope for builds of forked repositories.
     * 
     * @param enforceJobAuthScopeForForks the enforceJobAuthScopeForForks value to set.
     * @return the PipelineTriggerSettings object itself.
     */
    public PipelineTriggerSettings withEnforceJobAuthScopeForForks(Boolean enforceJobAuthScopeForForks) {
        this.enforceJobAuthScopeForForks = enforceJobAuthScopeForForks;
        return this;
    }

    /**
     * Get the enforceNoAccessToSecretsFromForks property: Enforce no access to secrets for builds of forked
     * repositories.
     * 
     * @return the enforceNoAccessToSecretsFromForks value.
     */
    public Boolean enforceNoAccessToSecretsFromForks() {
        return this.enforceNoAccessToSecretsFromForks;
    }

    /**
     * Set the enforceNoAccessToSecretsFromForks property: Enforce no access to secrets for builds of forked
     * repositories.
     * 
     * @param enforceNoAccessToSecretsFromForks the enforceNoAccessToSecretsFromForks value to set.
     * @return the PipelineTriggerSettings object itself.
     */
    public PipelineTriggerSettings withEnforceNoAccessToSecretsFromForks(Boolean enforceNoAccessToSecretsFromForks) {
        this.enforceNoAccessToSecretsFromForks = enforceNoAccessToSecretsFromForks;
        return this;
    }

    /**
     * Get the forkProtectionEnabled property: Enable settings that enforce certain levels of protection for building
     * pull requests from forks globally.
     * 
     * @return the forkProtectionEnabled value.
     */
    public Boolean forkProtectionEnabled() {
        return this.forkProtectionEnabled;
    }

    /**
     * Set the forkProtectionEnabled property: Enable settings that enforce certain levels of protection for building
     * pull requests from forks globally.
     * 
     * @param forkProtectionEnabled the forkProtectionEnabled value to set.
     * @return the PipelineTriggerSettings object itself.
     */
    public PipelineTriggerSettings withForkProtectionEnabled(Boolean forkProtectionEnabled) {
        this.forkProtectionEnabled = forkProtectionEnabled;
        return this;
    }

    /**
     * Get the isCommentRequiredForPullRequest property: Make comments required to have builds in all pull requests.
     * 
     * @return the isCommentRequiredForPullRequest value.
     */
    public Boolean isCommentRequiredForPullRequest() {
        return this.isCommentRequiredForPullRequest;
    }

    /**
     * Set the isCommentRequiredForPullRequest property: Make comments required to have builds in all pull requests.
     * 
     * @param isCommentRequiredForPullRequest the isCommentRequiredForPullRequest value to set.
     * @return the PipelineTriggerSettings object itself.
     */
    public PipelineTriggerSettings withIsCommentRequiredForPullRequest(Boolean isCommentRequiredForPullRequest) {
        this.isCommentRequiredForPullRequest = isCommentRequiredForPullRequest;
        return this;
    }

    /**
     * Get the requireCommentsForNonTeamMemberAndNonContributors property: Make comments required to have builds in pull
     * requests from non-team members and non-contributors.
     * 
     * @return the requireCommentsForNonTeamMemberAndNonContributors value.
     */
    public Boolean requireCommentsForNonTeamMemberAndNonContributors() {
        return this.requireCommentsForNonTeamMemberAndNonContributors;
    }

    /**
     * Set the requireCommentsForNonTeamMemberAndNonContributors property: Make comments required to have builds in pull
     * requests from non-team members and non-contributors.
     * 
     * @param requireCommentsForNonTeamMemberAndNonContributors the requireCommentsForNonTeamMemberAndNonContributors
     * value to set.
     * @return the PipelineTriggerSettings object itself.
     */
    public PipelineTriggerSettings withRequireCommentsForNonTeamMemberAndNonContributors(
        Boolean requireCommentsForNonTeamMemberAndNonContributors) {
        this.requireCommentsForNonTeamMemberAndNonContributors = requireCommentsForNonTeamMemberAndNonContributors;
        return this;
    }

    /**
     * Get the requireCommentsForNonTeamMembersOnly property: Make comments required to have builds in pull requests
     * from non-team members.
     * 
     * @return the requireCommentsForNonTeamMembersOnly value.
     */
    public Boolean requireCommentsForNonTeamMembersOnly() {
        return this.requireCommentsForNonTeamMembersOnly;
    }

    /**
     * Set the requireCommentsForNonTeamMembersOnly property: Make comments required to have builds in pull requests
     * from non-team members.
     * 
     * @param requireCommentsForNonTeamMembersOnly the requireCommentsForNonTeamMembersOnly value to set.
     * @return the PipelineTriggerSettings object itself.
     */
    public PipelineTriggerSettings
        withRequireCommentsForNonTeamMembersOnly(Boolean requireCommentsForNonTeamMembersOnly) {
        this.requireCommentsForNonTeamMembersOnly = requireCommentsForNonTeamMembersOnly;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}

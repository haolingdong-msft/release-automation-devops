// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import com.azure.dev.fluent.models.BuildInner;
import java.time.OffsetDateTime;
import java.util.List;

/**
 * Resource collection API of Builds.
 */
public interface Builds {
    /**
     * Gets a list of builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param definitions A comma-delimited list of definition IDs. If specified, filters to builds for these
     * definitions.
     * @param queues A comma-delimited list of queue IDs. If specified, filters to builds that ran against these queues.
     * @param buildNumber If specified, filters to builds that match this build number. Append * to do a prefix search.
     * @param minTime If specified, filters to builds that finished/started/queued after this date based on the
     * queryOrder specified.
     * @param maxTime If specified, filters to builds that finished/started/queued before this date based on the
     * queryOrder specified.
     * @param requestedFor If specified, filters to builds requested for the specified user.
     * @param reasonFilter If specified, filters to builds that match this reason.
     * @param statusFilter If specified, filters to builds that match this status.
     * @param resultFilter If specified, filters to builds that match this result.
     * @param tagFilters A comma-delimited list of tags. If specified, filters to builds that have the specified tags.
     * @param properties A comma-delimited list of properties to retrieve.
     * @param top The maximum number of builds to return.
     * @param continuationToken A continuation token, returned by a previous call to this method, that can be used to
     * return the next set of builds.
     * @param maxBuildsPerDefinition The maximum number of builds to return per definition.
     * @param deletedFilter Indicates whether to exclude, include, or only return deleted builds.
     * @param queryOrder The order in which builds should be returned.
     * @param branchName If specified, filters to builds that built branches that built this branch.
     * @param buildIds A comma-delimited list that specifies the IDs of builds to retrieve.
     * @param repositoryId If specified, filters to builds that built from this repository.
     * @param repositoryType If specified, filters to builds that built from repositories of this type.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of builds along with {@link Response}.
     */
    Response<List<Build>> listWithResponse(String organization, String project, String definitions, String queues,
        String buildNumber, OffsetDateTime minTime, OffsetDateTime maxTime, String requestedFor,
        BuildReason reasonFilter, BuildStatus statusFilter, BuildResult resultFilter, String tagFilters,
        String properties, Integer top, String continuationToken, Integer maxBuildsPerDefinition,
        QueryDeletedOption deletedFilter, BuildQueryOrder queryOrder, String branchName, String buildIds,
        String repositoryId, String repositoryType, Context context);

    /**
     * Gets a list of builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a list of builds.
     */
    List<Build> list(String organization, String project);

    /**
     * Queues a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Data representation of a build.
     * @param ignoreWarnings The ignoreWarnings parameter.
     * @param checkInTicket The checkInTicket parameter.
     * @param sourceBuildId The sourceBuildId parameter.
     * @param definitionId Optional definition id to queue a build without a body. Ignored if there's a valid body.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build along with {@link Response}.
     */
    Response<Build> queueWithResponse(String organization, String project, BuildInner body, Boolean ignoreWarnings,
        String checkInTicket, Integer sourceBuildId, Integer definitionId, Context context);

    /**
     * Queues a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Data representation of a build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build.
     */
    Build queue(String organization, String project, BuildInner body);

    /**
     * Updates multiple builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body The builds to update.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Build along with {@link Response}.
     */
    Response<List<Build>> updateBuildsWithResponse(String organization, String project, List<BuildInner> body,
        Context context);

    /**
     * Updates multiple builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body The builds to update.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of Build.
     */
    List<Build> updateBuilds(String organization, String project, List<BuildInner> body);

    /**
     * Deletes a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String organization, String project, int buildId, Context context);

    /**
     * Deletes a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String organization, String project, int buildId);

    /**
     * Gets a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @param propertyFilters The propertyFilters parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a build along with {@link Response}.
     */
    Response<Build> getWithResponse(String organization, String project, int buildId, String propertyFilters,
        Context context);

    /**
     * Gets a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a build.
     */
    Build get(String organization, String project, int buildId);

    /**
     * Updates a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The build.
     * @param retry The retry parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build along with {@link Response}.
     */
    Response<Build> updateBuildWithResponse(String organization, String project, int buildId, BuildInner body,
        Boolean retry, Context context);

    /**
     * Updates a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body The build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return data representation of a build.
     */
    Build updateBuild(String organization, String project, int buildId, BuildInner body);

    /**
     * Gets the changes associated with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @param continuationToken The continuationToken parameter.
     * @param top The maximum number of changes to return.
     * @param includeSourceChange The includeSourceChange parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes associated with a build along with {@link Response}.
     */
    Response<List<Change>> getBuildChangesWithResponse(String organization, String project, int buildId,
        String continuationToken, Integer top, Boolean includeSourceChange, Context context);

    /**
     * Gets the changes associated with a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The buildId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes associated with a build.
     */
    List<Change> getBuildChanges(String organization, String project, int buildId);

    /**
     * Gets all retention leases that apply to a specific build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all retention leases that apply to a specific build along with {@link Response}.
     */
    Response<List<RetentionLease>> getRetentionLeasesForBuildWithResponse(String organization, String project,
        int buildId, Context context);

    /**
     * Gets all retention leases that apply to a specific build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all retention leases that apply to a specific build.
     */
    List<RetentionLease> getRetentionLeasesForBuild(String organization, String project, int buildId);

    /**
     * Gets the logs for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for a build along with {@link Response}.
     */
    Response<List<BuildLog>> getBuildLogsWithResponse(String organization, String project, int buildId,
        Context context);

    /**
     * Gets the logs for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the logs for a build.
     */
    List<BuildLog> getBuildLogs(String organization, String project, int buildId);

    /**
     * Gets an individual log file for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param logId The ID of the log file.
     * @param startLine The start line.
     * @param endLine The end line.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an individual log file for a build along with {@link Response}.
     */
    Response<String> getBuildLogWithResponse(String organization, String project, int buildId, int logId,
        Long startLine, Long endLine, Context context);

    /**
     * Gets an individual log file for a build.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param logId The ID of the log file.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return an individual log file for a build.
     */
    String getBuildLog(String organization, String project, int buildId, int logId);

    /**
     * Gets the work items associated with a build. Only work items in the same project are returned.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param top The maximum number of work items to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build along with {@link Response}.
     */
    Response<List<ResourceRef>> getBuildWorkItemsRefsWithResponse(String organization, String project, int buildId,
        Integer top, Context context);

    /**
     * Gets the work items associated with a build. Only work items in the same project are returned.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build.
     */
    List<ResourceRef> getBuildWorkItemsRefs(String organization, String project, int buildId);

    /**
     * Gets the work items associated with a build, filtered to specific commits.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body A comma-delimited list of commit IDs.
     * @param top The maximum number of work items to return, or the number of commits to consider if no commit IDs are
     * specified.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build, filtered to specific commits along with {@link Response}.
     */
    Response<List<ResourceRef>> getBuildWorkItemsRefsFromCommitsWithResponse(String organization, String project,
        int buildId, List<String> body, Integer top, Context context);

    /**
     * Gets the work items associated with a build, filtered to specific commits.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param buildId The ID of the build.
     * @param body A comma-delimited list of commit IDs.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the work items associated with a build, filtered to specific commits.
     */
    List<ResourceRef> getBuildWorkItemsRefsFromCommits(String organization, String project, int buildId,
        List<String> body);

    /**
     * Gets the changes made to the repository between two given builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @param top The maximum number of changes to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes made to the repository between two given builds along with {@link Response}.
     */
    Response<List<Change>> getChangesBetweenBuildsWithResponse(String organization, String project, Integer fromBuildId,
        Integer toBuildId, Integer top, Context context);

    /**
     * Gets the changes made to the repository between two given builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the changes made to the repository between two given builds.
     */
    List<Change> getChangesBetweenBuilds(String organization, String project);

    /**
     * Gets all the work items between two builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @param top The maximum number of work items to return.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the work items between two builds along with {@link Response}.
     */
    Response<List<ResourceRef>> getWorkItemsBetweenBuildsWithResponse(String organization, String project,
        int fromBuildId, int toBuildId, Integer top, Context context);

    /**
     * Gets all the work items between two builds.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param fromBuildId The ID of the first build.
     * @param toBuildId The ID of the last build.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return all the work items between two builds.
     */
    List<ResourceRef> getWorkItemsBetweenBuilds(String organization, String project, int fromBuildId, int toBuildId);
}

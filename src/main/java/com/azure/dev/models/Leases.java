// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.http.rest.Response;
import com.azure.core.util.Context;
import java.util.List;
import java.util.UUID;

/**
 * Resource collection API of Leases.
 */
public interface Leases {
    /**
     * Adds new leases for pipeline runs.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Array of NewRetentionLease.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response}.
     */
    Response<List<RetentionLease>> addWithResponse(String organization, String project, List<NewRetentionLease> body,
        Context context);

    /**
     * Adds new leases for pipeline runs.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param body Array of NewRetentionLease.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease.
     */
    List<RetentionLease> add(String organization, String project, List<NewRetentionLease> body);

    /**
     * Removes specific retention leases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ids The ids parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return the {@link Response}.
     */
    Response<Void> deleteWithResponse(String organization, String project, String ids, Context context);

    /**
     * Removes specific retention leases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ids The ids parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     */
    void delete(String organization, String project, String ids);

    /**
     * Returns any leases matching the specified MinimalRetentionLeases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leasesToFetch List of JSON-serialized MinimalRetentionLeases separated by '|'.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response}.
     */
    Response<List<RetentionLease>> getRetentionLeasesByMinimalRetentionLeasesWithResponse(String organization,
        String project, String leasesToFetch, Context context);

    /**
     * Returns any leases matching the specified MinimalRetentionLeases.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leasesToFetch List of JSON-serialized MinimalRetentionLeases separated by '|'.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease.
     */
    List<RetentionLease> getRetentionLeasesByMinimalRetentionLeases(String organization, String project,
        String leasesToFetch);

    /**
     * Returns the details of the retention lease given a lease id.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The leaseId parameter.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run along with
     * {@link Response}.
     */
    Response<RetentionLease> getWithResponse(String organization, String project, int leaseId, Context context);

    /**
     * Returns the details of the retention lease given a lease id.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The leaseId parameter.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run.
     */
    RetentionLease get(String organization, String project, int leaseId);

    /**
     * Updates the duration or pipeline protection status of a retention lease.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The ID of the lease to update.
     * @param body The new data for the retention lease.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run along with
     * {@link Response}.
     */
    Response<RetentionLease> updateWithResponse(String organization, String project, int leaseId,
        RetentionLeaseUpdate body, Context context);

    /**
     * Updates the duration or pipeline protection status of a retention lease.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param leaseId The ID of the lease to update.
     * @param body The new data for the retention lease.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return a valid retention lease prevents automated systems from deleting a pipeline run.
     */
    RetentionLease update(String organization, String project, int leaseId, RetentionLeaseUpdate body);

    /**
     * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param userOwnerId The user id to search for.
     * @param definitionId An optional parameter to limit the search to a specific pipeline definition.
     * @param runId An optional parameter to limit the search to a single pipeline run. Requires definitionId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response}.
     */
    Response<List<RetentionLease>> getRetentionLeasesByUserIdWithResponse(String organization, String project,
        UUID userOwnerId, Integer definitionId, Integer runId, Context context);

    /**
     * Returns any leases owned by the specified user, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param userOwnerId The user id to search for.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease.
     */
    List<RetentionLease> getRetentionLeasesByUserId(String organization, String project, UUID userOwnerId);

    /**
     * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @param ownerId The ownerId parameter.
     * @param definitionId An optional parameter to limit the search to a specific pipeline definition.
     * @param runId An optional parameter to limit the search to a single pipeline run. Requires definitionId.
     * @param context The context to associate with this operation.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease along with {@link Response}.
     */
    Response<List<RetentionLease>> getRetentionLeasesByOwnerIdWithResponse(String organization, String project,
        String ownerId, Integer definitionId, Integer runId, Context context);

    /**
     * Returns any leases owned by the specified entity, optionally scoped to a single pipeline definition and run.
     * 
     * @param organization The name of the Azure DevOps organization.
     * @param project Project ID or project name.
     * @throws IllegalArgumentException thrown if parameters fail the validation.
     * @throws com.azure.core.management.exception.ManagementException thrown if the request is rejected by server.
     * @throws RuntimeException all other wrapped checked exceptions if the request fails to be sent.
     * @return array of RetentionLease.
     */
    List<RetentionLease> getRetentionLeasesByOwnerId(String organization, String project);
}

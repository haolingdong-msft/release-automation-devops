// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.UUID;

/**
 * Represents a continuous integration (CI) trigger.
 */
@Fluent
public final class ContinuousIntegrationTrigger extends BuildTrigger {
    /*
     * Indicates whether changes should be batched while another CI build is running.
     */
    @JsonProperty(value = "batchChanges")
    private Boolean batchChanges;

    /*
     * The branchFilters property.
     */
    @JsonProperty(value = "branchFilters")
    private List<String> branchFilters;

    /*
     * The maximum number of simultaneous CI builds that will run per branch.
     */
    @JsonProperty(value = "maxConcurrentBuildsPerBranch")
    private Integer maxConcurrentBuildsPerBranch;

    /*
     * The pathFilters property.
     */
    @JsonProperty(value = "pathFilters")
    private List<String> pathFilters;

    /*
     * The polling interval, in seconds.
     */
    @JsonProperty(value = "pollingInterval")
    private Integer pollingInterval;

    /*
     * The ID of the job used to poll an external repository.
     */
    @JsonProperty(value = "pollingJobId")
    private UUID pollingJobId;

    /*
     * The settingsSourceType property.
     */
    @JsonProperty(value = "settingsSourceType")
    private Integer settingsSourceType;

    /**
     * Creates an instance of ContinuousIntegrationTrigger class.
     */
    public ContinuousIntegrationTrigger() {
    }

    /**
     * Get the batchChanges property: Indicates whether changes should be batched while another CI build is running.
     * 
     * @return the batchChanges value.
     */
    public Boolean batchChanges() {
        return this.batchChanges;
    }

    /**
     * Set the batchChanges property: Indicates whether changes should be batched while another CI build is running.
     * 
     * @param batchChanges the batchChanges value to set.
     * @return the ContinuousIntegrationTrigger object itself.
     */
    public ContinuousIntegrationTrigger withBatchChanges(Boolean batchChanges) {
        this.batchChanges = batchChanges;
        return this;
    }

    /**
     * Get the branchFilters property: The branchFilters property.
     * 
     * @return the branchFilters value.
     */
    public List<String> branchFilters() {
        return this.branchFilters;
    }

    /**
     * Set the branchFilters property: The branchFilters property.
     * 
     * @param branchFilters the branchFilters value to set.
     * @return the ContinuousIntegrationTrigger object itself.
     */
    public ContinuousIntegrationTrigger withBranchFilters(List<String> branchFilters) {
        this.branchFilters = branchFilters;
        return this;
    }

    /**
     * Get the maxConcurrentBuildsPerBranch property: The maximum number of simultaneous CI builds that will run per
     * branch.
     * 
     * @return the maxConcurrentBuildsPerBranch value.
     */
    public Integer maxConcurrentBuildsPerBranch() {
        return this.maxConcurrentBuildsPerBranch;
    }

    /**
     * Set the maxConcurrentBuildsPerBranch property: The maximum number of simultaneous CI builds that will run per
     * branch.
     * 
     * @param maxConcurrentBuildsPerBranch the maxConcurrentBuildsPerBranch value to set.
     * @return the ContinuousIntegrationTrigger object itself.
     */
    public ContinuousIntegrationTrigger withMaxConcurrentBuildsPerBranch(Integer maxConcurrentBuildsPerBranch) {
        this.maxConcurrentBuildsPerBranch = maxConcurrentBuildsPerBranch;
        return this;
    }

    /**
     * Get the pathFilters property: The pathFilters property.
     * 
     * @return the pathFilters value.
     */
    public List<String> pathFilters() {
        return this.pathFilters;
    }

    /**
     * Set the pathFilters property: The pathFilters property.
     * 
     * @param pathFilters the pathFilters value to set.
     * @return the ContinuousIntegrationTrigger object itself.
     */
    public ContinuousIntegrationTrigger withPathFilters(List<String> pathFilters) {
        this.pathFilters = pathFilters;
        return this;
    }

    /**
     * Get the pollingInterval property: The polling interval, in seconds.
     * 
     * @return the pollingInterval value.
     */
    public Integer pollingInterval() {
        return this.pollingInterval;
    }

    /**
     * Set the pollingInterval property: The polling interval, in seconds.
     * 
     * @param pollingInterval the pollingInterval value to set.
     * @return the ContinuousIntegrationTrigger object itself.
     */
    public ContinuousIntegrationTrigger withPollingInterval(Integer pollingInterval) {
        this.pollingInterval = pollingInterval;
        return this;
    }

    /**
     * Get the pollingJobId property: The ID of the job used to poll an external repository.
     * 
     * @return the pollingJobId value.
     */
    public UUID pollingJobId() {
        return this.pollingJobId;
    }

    /**
     * Set the pollingJobId property: The ID of the job used to poll an external repository.
     * 
     * @param pollingJobId the pollingJobId value to set.
     * @return the ContinuousIntegrationTrigger object itself.
     */
    public ContinuousIntegrationTrigger withPollingJobId(UUID pollingJobId) {
        this.pollingJobId = pollingJobId;
        return this;
    }

    /**
     * Get the settingsSourceType property: The settingsSourceType property.
     * 
     * @return the settingsSourceType value.
     */
    public Integer settingsSourceType() {
        return this.settingsSourceType;
    }

    /**
     * Set the settingsSourceType property: The settingsSourceType property.
     * 
     * @param settingsSourceType the settingsSourceType value to set.
     * @return the ContinuousIntegrationTrigger object itself.
     */
    public ContinuousIntegrationTrigger withSettingsSourceType(Integer settingsSourceType) {
        this.settingsSourceType = settingsSourceType;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ContinuousIntegrationTrigger withTriggerType(DefinitionTriggerType triggerType) {
        super.withTriggerType(triggerType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}

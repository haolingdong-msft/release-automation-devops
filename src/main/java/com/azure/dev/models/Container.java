// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;
import java.util.Map;

/**
 * The Container model.
 */
@Fluent
public final class Container {
    /*
     * Dictionary of <string>
     */
    @JsonProperty(value = "environment")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> environment;

    /*
     * The image property.
     */
    @JsonProperty(value = "image")
    private String image;

    /*
     * The mapDockerSocket property.
     */
    @JsonProperty(value = "mapDockerSocket")
    private Boolean mapDockerSocket;

    /*
     * The options property.
     */
    @JsonProperty(value = "options")
    private String options;

    /*
     * The ports property.
     */
    @JsonProperty(value = "ports")
    private List<String> ports;

    /*
     * The volumes property.
     */
    @JsonProperty(value = "volumes")
    private List<String> volumes;

    /**
     * Creates an instance of Container class.
     */
    public Container() {
    }

    /**
     * Get the environment property: Dictionary of &lt;string&gt;.
     * 
     * @return the environment value.
     */
    public Map<String, String> environment() {
        return this.environment;
    }

    /**
     * Set the environment property: Dictionary of &lt;string&gt;.
     * 
     * @param environment the environment value to set.
     * @return the Container object itself.
     */
    public Container withEnvironment(Map<String, String> environment) {
        this.environment = environment;
        return this;
    }

    /**
     * Get the image property: The image property.
     * 
     * @return the image value.
     */
    public String image() {
        return this.image;
    }

    /**
     * Set the image property: The image property.
     * 
     * @param image the image value to set.
     * @return the Container object itself.
     */
    public Container withImage(String image) {
        this.image = image;
        return this;
    }

    /**
     * Get the mapDockerSocket property: The mapDockerSocket property.
     * 
     * @return the mapDockerSocket value.
     */
    public Boolean mapDockerSocket() {
        return this.mapDockerSocket;
    }

    /**
     * Set the mapDockerSocket property: The mapDockerSocket property.
     * 
     * @param mapDockerSocket the mapDockerSocket value to set.
     * @return the Container object itself.
     */
    public Container withMapDockerSocket(Boolean mapDockerSocket) {
        this.mapDockerSocket = mapDockerSocket;
        return this;
    }

    /**
     * Get the options property: The options property.
     * 
     * @return the options value.
     */
    public String options() {
        return this.options;
    }

    /**
     * Set the options property: The options property.
     * 
     * @param options the options value to set.
     * @return the Container object itself.
     */
    public Container withOptions(String options) {
        this.options = options;
        return this;
    }

    /**
     * Get the ports property: The ports property.
     * 
     * @return the ports value.
     */
    public List<String> ports() {
        return this.ports;
    }

    /**
     * Set the ports property: The ports property.
     * 
     * @param ports the ports value to set.
     * @return the Container object itself.
     */
    public Container withPorts(List<String> ports) {
        this.ports = ports;
        return this;
    }

    /**
     * Get the volumes property: The volumes property.
     * 
     * @return the volumes value.
     */
    public List<String> volumes() {
        return this.volumes;
    }

    /**
     * Set the volumes property: The volumes property.
     * 
     * @param volumes the volumes value to set.
     * @return the Container object itself.
     */
    public Container withVolumes(List<String> volumes) {
        this.volumes = volumes;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}

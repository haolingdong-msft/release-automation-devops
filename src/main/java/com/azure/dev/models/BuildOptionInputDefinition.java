// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * Represents an input for a build option.
 */
@Fluent
public final class BuildOptionInputDefinition {
    /*
     * The default value.
     */
    @JsonProperty(value = "defaultValue")
    private String defaultValue;

    /*
     * The name of the input group that this input belongs to.
     */
    @JsonProperty(value = "groupName")
    private String groupName;

    /*
     * Dictionary of <string>
     */
    @JsonProperty(value = "help")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> help;

    /*
     * The label for the input.
     */
    @JsonProperty(value = "label")
    private String label;

    /*
     * The name of the input.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * Dictionary of <string>
     */
    @JsonProperty(value = "options")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, String> options;

    /*
     * Indicates whether the input is required to have a value.
     */
    @JsonProperty(value = "required")
    private Boolean required;

    /*
     * Indicates the type of the input value.
     */
    @JsonProperty(value = "type")
    private BuildOptionInputType type;

    /*
     * The rule that is applied to determine whether the input is visible in the UI.
     */
    @JsonProperty(value = "visibleRule")
    private String visibleRule;

    /**
     * Creates an instance of BuildOptionInputDefinition class.
     */
    public BuildOptionInputDefinition() {
    }

    /**
     * Get the defaultValue property: The default value.
     * 
     * @return the defaultValue value.
     */
    public String defaultValue() {
        return this.defaultValue;
    }

    /**
     * Set the defaultValue property: The default value.
     * 
     * @param defaultValue the defaultValue value to set.
     * @return the BuildOptionInputDefinition object itself.
     */
    public BuildOptionInputDefinition withDefaultValue(String defaultValue) {
        this.defaultValue = defaultValue;
        return this;
    }

    /**
     * Get the groupName property: The name of the input group that this input belongs to.
     * 
     * @return the groupName value.
     */
    public String groupName() {
        return this.groupName;
    }

    /**
     * Set the groupName property: The name of the input group that this input belongs to.
     * 
     * @param groupName the groupName value to set.
     * @return the BuildOptionInputDefinition object itself.
     */
    public BuildOptionInputDefinition withGroupName(String groupName) {
        this.groupName = groupName;
        return this;
    }

    /**
     * Get the help property: Dictionary of &lt;string&gt;.
     * 
     * @return the help value.
     */
    public Map<String, String> help() {
        return this.help;
    }

    /**
     * Set the help property: Dictionary of &lt;string&gt;.
     * 
     * @param help the help value to set.
     * @return the BuildOptionInputDefinition object itself.
     */
    public BuildOptionInputDefinition withHelp(Map<String, String> help) {
        this.help = help;
        return this;
    }

    /**
     * Get the label property: The label for the input.
     * 
     * @return the label value.
     */
    public String label() {
        return this.label;
    }

    /**
     * Set the label property: The label for the input.
     * 
     * @param label the label value to set.
     * @return the BuildOptionInputDefinition object itself.
     */
    public BuildOptionInputDefinition withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Get the name property: The name of the input.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name of the input.
     * 
     * @param name the name value to set.
     * @return the BuildOptionInputDefinition object itself.
     */
    public BuildOptionInputDefinition withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the options property: Dictionary of &lt;string&gt;.
     * 
     * @return the options value.
     */
    public Map<String, String> options() {
        return this.options;
    }

    /**
     * Set the options property: Dictionary of &lt;string&gt;.
     * 
     * @param options the options value to set.
     * @return the BuildOptionInputDefinition object itself.
     */
    public BuildOptionInputDefinition withOptions(Map<String, String> options) {
        this.options = options;
        return this;
    }

    /**
     * Get the required property: Indicates whether the input is required to have a value.
     * 
     * @return the required value.
     */
    public Boolean required() {
        return this.required;
    }

    /**
     * Set the required property: Indicates whether the input is required to have a value.
     * 
     * @param required the required value to set.
     * @return the BuildOptionInputDefinition object itself.
     */
    public BuildOptionInputDefinition withRequired(Boolean required) {
        this.required = required;
        return this;
    }

    /**
     * Get the type property: Indicates the type of the input value.
     * 
     * @return the type value.
     */
    public BuildOptionInputType type() {
        return this.type;
    }

    /**
     * Set the type property: Indicates the type of the input value.
     * 
     * @param type the type value to set.
     * @return the BuildOptionInputDefinition object itself.
     */
    public BuildOptionInputDefinition withType(BuildOptionInputType type) {
        this.type = type;
        return this;
    }

    /**
     * Get the visibleRule property: The rule that is applied to determine whether the input is visible in the UI.
     * 
     * @return the visibleRule value.
     */
    public String visibleRule() {
        return this.visibleRule;
    }

    /**
     * Set the visibleRule property: The rule that is applied to determine whether the input is visible in the UI.
     * 
     * @param visibleRule the visibleRule value to set.
     * @return the BuildOptionInputDefinition object itself.
     */
    public BuildOptionInputDefinition withVisibleRule(String visibleRule) {
        this.visibleRule = visibleRule;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
    }
}

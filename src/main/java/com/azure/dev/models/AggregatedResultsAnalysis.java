// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * The AggregatedResultsAnalysis model.
 */
@Fluent
public final class AggregatedResultsAnalysis {
    /*
     * The duration property.
     */
    @JsonProperty(value = "duration")
    private String duration;

    /*
     * Dictionary of <AggregatedResultsByOutcome>
     */
    @JsonProperty(value = "notReportedResultsByOutcome")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, AggregatedResultsByOutcome> notReportedResultsByOutcome;

    /*
     * The previousContext property.
     */
    @JsonProperty(value = "previousContext")
    private TestResultsContext previousContext;

    /*
     * Dictionary of <AggregatedResultsByOutcome>
     */
    @JsonProperty(value = "resultsByOutcome")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, AggregatedResultsByOutcome> resultsByOutcome;

    /*
     * The resultsDifference property.
     */
    @JsonProperty(value = "resultsDifference")
    private AggregatedResultsDifference resultsDifference;

    /*
     * Dictionary of <AggregatedRunsByOutcome>
     */
    @JsonProperty(value = "runSummaryByOutcome")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, AggregatedRunsByOutcome> runSummaryByOutcome;

    /*
     * Dictionary of <AggregatedRunsByState>
     */
    @JsonProperty(value = "runSummaryByState")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, AggregatedRunsByState> runSummaryByState;

    /*
     * The totalTests property.
     */
    @JsonProperty(value = "totalTests")
    private Integer totalTests;

    /**
     * Creates an instance of AggregatedResultsAnalysis class.
     */
    public AggregatedResultsAnalysis() {
    }

    /**
     * Get the duration property: The duration property.
     * 
     * @return the duration value.
     */
    public String duration() {
        return this.duration;
    }

    /**
     * Set the duration property: The duration property.
     * 
     * @param duration the duration value to set.
     * @return the AggregatedResultsAnalysis object itself.
     */
    public AggregatedResultsAnalysis withDuration(String duration) {
        this.duration = duration;
        return this;
    }

    /**
     * Get the notReportedResultsByOutcome property: Dictionary of &lt;AggregatedResultsByOutcome&gt;.
     * 
     * @return the notReportedResultsByOutcome value.
     */
    public Map<String, AggregatedResultsByOutcome> notReportedResultsByOutcome() {
        return this.notReportedResultsByOutcome;
    }

    /**
     * Set the notReportedResultsByOutcome property: Dictionary of &lt;AggregatedResultsByOutcome&gt;.
     * 
     * @param notReportedResultsByOutcome the notReportedResultsByOutcome value to set.
     * @return the AggregatedResultsAnalysis object itself.
     */
    public AggregatedResultsAnalysis
        withNotReportedResultsByOutcome(Map<String, AggregatedResultsByOutcome> notReportedResultsByOutcome) {
        this.notReportedResultsByOutcome = notReportedResultsByOutcome;
        return this;
    }

    /**
     * Get the previousContext property: The previousContext property.
     * 
     * @return the previousContext value.
     */
    public TestResultsContext previousContext() {
        return this.previousContext;
    }

    /**
     * Set the previousContext property: The previousContext property.
     * 
     * @param previousContext the previousContext value to set.
     * @return the AggregatedResultsAnalysis object itself.
     */
    public AggregatedResultsAnalysis withPreviousContext(TestResultsContext previousContext) {
        this.previousContext = previousContext;
        return this;
    }

    /**
     * Get the resultsByOutcome property: Dictionary of &lt;AggregatedResultsByOutcome&gt;.
     * 
     * @return the resultsByOutcome value.
     */
    public Map<String, AggregatedResultsByOutcome> resultsByOutcome() {
        return this.resultsByOutcome;
    }

    /**
     * Set the resultsByOutcome property: Dictionary of &lt;AggregatedResultsByOutcome&gt;.
     * 
     * @param resultsByOutcome the resultsByOutcome value to set.
     * @return the AggregatedResultsAnalysis object itself.
     */
    public AggregatedResultsAnalysis withResultsByOutcome(Map<String, AggregatedResultsByOutcome> resultsByOutcome) {
        this.resultsByOutcome = resultsByOutcome;
        return this;
    }

    /**
     * Get the resultsDifference property: The resultsDifference property.
     * 
     * @return the resultsDifference value.
     */
    public AggregatedResultsDifference resultsDifference() {
        return this.resultsDifference;
    }

    /**
     * Set the resultsDifference property: The resultsDifference property.
     * 
     * @param resultsDifference the resultsDifference value to set.
     * @return the AggregatedResultsAnalysis object itself.
     */
    public AggregatedResultsAnalysis withResultsDifference(AggregatedResultsDifference resultsDifference) {
        this.resultsDifference = resultsDifference;
        return this;
    }

    /**
     * Get the runSummaryByOutcome property: Dictionary of &lt;AggregatedRunsByOutcome&gt;.
     * 
     * @return the runSummaryByOutcome value.
     */
    public Map<String, AggregatedRunsByOutcome> runSummaryByOutcome() {
        return this.runSummaryByOutcome;
    }

    /**
     * Set the runSummaryByOutcome property: Dictionary of &lt;AggregatedRunsByOutcome&gt;.
     * 
     * @param runSummaryByOutcome the runSummaryByOutcome value to set.
     * @return the AggregatedResultsAnalysis object itself.
     */
    public AggregatedResultsAnalysis withRunSummaryByOutcome(Map<String, AggregatedRunsByOutcome> runSummaryByOutcome) {
        this.runSummaryByOutcome = runSummaryByOutcome;
        return this;
    }

    /**
     * Get the runSummaryByState property: Dictionary of &lt;AggregatedRunsByState&gt;.
     * 
     * @return the runSummaryByState value.
     */
    public Map<String, AggregatedRunsByState> runSummaryByState() {
        return this.runSummaryByState;
    }

    /**
     * Set the runSummaryByState property: Dictionary of &lt;AggregatedRunsByState&gt;.
     * 
     * @param runSummaryByState the runSummaryByState value to set.
     * @return the AggregatedResultsAnalysis object itself.
     */
    public AggregatedResultsAnalysis withRunSummaryByState(Map<String, AggregatedRunsByState> runSummaryByState) {
        this.runSummaryByState = runSummaryByState;
        return this;
    }

    /**
     * Get the totalTests property: The totalTests property.
     * 
     * @return the totalTests value.
     */
    public Integer totalTests() {
        return this.totalTests;
    }

    /**
     * Set the totalTests property: The totalTests property.
     * 
     * @param totalTests the totalTests value to set.
     * @return the AggregatedResultsAnalysis object itself.
     */
    public AggregatedResultsAnalysis withTotalTests(Integer totalTests) {
        this.totalTests = totalTests;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (notReportedResultsByOutcome() != null) {
            notReportedResultsByOutcome().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (previousContext() != null) {
            previousContext().validate();
        }
        if (resultsByOutcome() != null) {
            resultsByOutcome().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (resultsDifference() != null) {
            resultsDifference().validate();
        }
        if (runSummaryByOutcome() != null) {
            runSummaryByOutcome().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (runSummaryByState() != null) {
            runSummaryByState().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }
}

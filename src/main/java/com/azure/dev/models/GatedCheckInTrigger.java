// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.List;

/**
 * Represents a gated check-in trigger.
 */
@Fluent
public final class GatedCheckInTrigger extends BuildTrigger {
    /*
     * The pathFilters property.
     */
    @JsonProperty(value = "pathFilters")
    private List<String> pathFilters;

    /*
     * Indicates whether CI triggers should run after the gated check-in succeeds.
     */
    @JsonProperty(value = "runContinuousIntegration")
    private Boolean runContinuousIntegration;

    /*
     * Indicates whether to take workspace mappings into account when determining whether a build should run.
     */
    @JsonProperty(value = "useWorkspaceMappings")
    private Boolean useWorkspaceMappings;

    /**
     * Creates an instance of GatedCheckInTrigger class.
     */
    public GatedCheckInTrigger() {
    }

    /**
     * Get the pathFilters property: The pathFilters property.
     * 
     * @return the pathFilters value.
     */
    public List<String> pathFilters() {
        return this.pathFilters;
    }

    /**
     * Set the pathFilters property: The pathFilters property.
     * 
     * @param pathFilters the pathFilters value to set.
     * @return the GatedCheckInTrigger object itself.
     */
    public GatedCheckInTrigger withPathFilters(List<String> pathFilters) {
        this.pathFilters = pathFilters;
        return this;
    }

    /**
     * Get the runContinuousIntegration property: Indicates whether CI triggers should run after the gated check-in
     * succeeds.
     * 
     * @return the runContinuousIntegration value.
     */
    public Boolean runContinuousIntegration() {
        return this.runContinuousIntegration;
    }

    /**
     * Set the runContinuousIntegration property: Indicates whether CI triggers should run after the gated check-in
     * succeeds.
     * 
     * @param runContinuousIntegration the runContinuousIntegration value to set.
     * @return the GatedCheckInTrigger object itself.
     */
    public GatedCheckInTrigger withRunContinuousIntegration(Boolean runContinuousIntegration) {
        this.runContinuousIntegration = runContinuousIntegration;
        return this;
    }

    /**
     * Get the useWorkspaceMappings property: Indicates whether to take workspace mappings into account when determining
     * whether a build should run.
     * 
     * @return the useWorkspaceMappings value.
     */
    public Boolean useWorkspaceMappings() {
        return this.useWorkspaceMappings;
    }

    /**
     * Set the useWorkspaceMappings property: Indicates whether to take workspace mappings into account when determining
     * whether a build should run.
     * 
     * @param useWorkspaceMappings the useWorkspaceMappings value to set.
     * @return the GatedCheckInTrigger object itself.
     */
    public GatedCheckInTrigger withUseWorkspaceMappings(Boolean useWorkspaceMappings) {
        this.useWorkspaceMappings = useWorkspaceMappings;
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public GatedCheckInTrigger withTriggerType(DefinitionTriggerType triggerType) {
        super.withTriggerType(triggerType);
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    @Override
    public void validate() {
        super.validate();
    }
}

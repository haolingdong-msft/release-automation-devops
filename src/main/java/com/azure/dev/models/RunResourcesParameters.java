// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.util.Map;

/**
 * The RunResourcesParameters model.
 */
@Fluent
public final class RunResourcesParameters {
    /*
     * Dictionary of <BuildResourceParameters>
     */
    @JsonProperty(value = "builds")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, BuildResourceParameters> builds;

    /*
     * Dictionary of <ContainerResourceParameters>
     */
    @JsonProperty(value = "containers")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, ContainerResourceParameters> containers;

    /*
     * Dictionary of <PackageResourceParameters>
     */
    @JsonProperty(value = "packages")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, PackageResourceParameters> packages;

    /*
     * Dictionary of <PipelineResourceParameters>
     */
    @JsonProperty(value = "pipelines")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, PipelineResourceParameters> pipelines;

    /*
     * Dictionary of <RepositoryResourceParameters>
     */
    @JsonProperty(value = "repositories")
    @JsonInclude(value = JsonInclude.Include.NON_NULL, content = JsonInclude.Include.ALWAYS)
    private Map<String, RepositoryResourceParameters> repositories;

    /**
     * Creates an instance of RunResourcesParameters class.
     */
    public RunResourcesParameters() {
    }

    /**
     * Get the builds property: Dictionary of &lt;BuildResourceParameters&gt;.
     * 
     * @return the builds value.
     */
    public Map<String, BuildResourceParameters> builds() {
        return this.builds;
    }

    /**
     * Set the builds property: Dictionary of &lt;BuildResourceParameters&gt;.
     * 
     * @param builds the builds value to set.
     * @return the RunResourcesParameters object itself.
     */
    public RunResourcesParameters withBuilds(Map<String, BuildResourceParameters> builds) {
        this.builds = builds;
        return this;
    }

    /**
     * Get the containers property: Dictionary of &lt;ContainerResourceParameters&gt;.
     * 
     * @return the containers value.
     */
    public Map<String, ContainerResourceParameters> containers() {
        return this.containers;
    }

    /**
     * Set the containers property: Dictionary of &lt;ContainerResourceParameters&gt;.
     * 
     * @param containers the containers value to set.
     * @return the RunResourcesParameters object itself.
     */
    public RunResourcesParameters withContainers(Map<String, ContainerResourceParameters> containers) {
        this.containers = containers;
        return this;
    }

    /**
     * Get the packages property: Dictionary of &lt;PackageResourceParameters&gt;.
     * 
     * @return the packages value.
     */
    public Map<String, PackageResourceParameters> packages() {
        return this.packages;
    }

    /**
     * Set the packages property: Dictionary of &lt;PackageResourceParameters&gt;.
     * 
     * @param packages the packages value to set.
     * @return the RunResourcesParameters object itself.
     */
    public RunResourcesParameters withPackages(Map<String, PackageResourceParameters> packages) {
        this.packages = packages;
        return this;
    }

    /**
     * Get the pipelines property: Dictionary of &lt;PipelineResourceParameters&gt;.
     * 
     * @return the pipelines value.
     */
    public Map<String, PipelineResourceParameters> pipelines() {
        return this.pipelines;
    }

    /**
     * Set the pipelines property: Dictionary of &lt;PipelineResourceParameters&gt;.
     * 
     * @param pipelines the pipelines value to set.
     * @return the RunResourcesParameters object itself.
     */
    public RunResourcesParameters withPipelines(Map<String, PipelineResourceParameters> pipelines) {
        this.pipelines = pipelines;
        return this;
    }

    /**
     * Get the repositories property: Dictionary of &lt;RepositoryResourceParameters&gt;.
     * 
     * @return the repositories value.
     */
    public Map<String, RepositoryResourceParameters> repositories() {
        return this.repositories;
    }

    /**
     * Set the repositories property: Dictionary of &lt;RepositoryResourceParameters&gt;.
     * 
     * @param repositories the repositories value to set.
     * @return the RunResourcesParameters object itself.
     */
    public RunResourcesParameters withRepositories(Map<String, RepositoryResourceParameters> repositories) {
        this.repositories = repositories;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (builds() != null) {
            builds().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (containers() != null) {
            containers().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (packages() != null) {
            packages().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (pipelines() != null) {
            pipelines().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
        if (repositories() != null) {
            repositories().values().forEach(e -> {
                if (e != null) {
                    e.validate();
                }
            });
        }
    }
}

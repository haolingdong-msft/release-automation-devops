// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;

/**
 * Represents a reference to a build.
 */
@Fluent
public final class BuildReference {
    /*
     * The class to represent a collection of REST reference links.
     */
    @JsonProperty(value = "_links")
    private ReferenceLinks links;

    /*
     * The build number.
     */
    @JsonProperty(value = "buildNumber")
    private String buildNumber;

    /*
     * Indicates whether the build has been deleted.
     */
    @JsonProperty(value = "deleted")
    private Boolean deleted;

    /*
     * The time that the build was completed.
     */
    @JsonProperty(value = "finishTime")
    private OffsetDateTime finishTime;

    /*
     * The ID of the build.
     */
    @JsonProperty(value = "id")
    private Integer id;

    /*
     * The time that the build was queued.
     */
    @JsonProperty(value = "queueTime")
    private OffsetDateTime queueTime;

    /*
     * The identity on whose behalf the build was queued.
     */
    @JsonProperty(value = "requestedFor")
    private IdentityRef requestedFor;

    /*
     * The build result.
     */
    @JsonProperty(value = "result")
    private BuildResult result;

    /*
     * The time that the build was started.
     */
    @JsonProperty(value = "startTime")
    private OffsetDateTime startTime;

    /*
     * The build status.
     */
    @JsonProperty(value = "status")
    private BuildStatus status;

    /**
     * Creates an instance of BuildReference class.
     */
    public BuildReference() {
    }

    /**
     * Get the links property: The class to represent a collection of REST reference links.
     * 
     * @return the links value.
     */
    public ReferenceLinks links() {
        return this.links;
    }

    /**
     * Set the links property: The class to represent a collection of REST reference links.
     * 
     * @param links the links value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withLinks(ReferenceLinks links) {
        this.links = links;
        return this;
    }

    /**
     * Get the buildNumber property: The build number.
     * 
     * @return the buildNumber value.
     */
    public String buildNumber() {
        return this.buildNumber;
    }

    /**
     * Set the buildNumber property: The build number.
     * 
     * @param buildNumber the buildNumber value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withBuildNumber(String buildNumber) {
        this.buildNumber = buildNumber;
        return this;
    }

    /**
     * Get the deleted property: Indicates whether the build has been deleted.
     * 
     * @return the deleted value.
     */
    public Boolean deleted() {
        return this.deleted;
    }

    /**
     * Set the deleted property: Indicates whether the build has been deleted.
     * 
     * @param deleted the deleted value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withDeleted(Boolean deleted) {
        this.deleted = deleted;
        return this;
    }

    /**
     * Get the finishTime property: The time that the build was completed.
     * 
     * @return the finishTime value.
     */
    public OffsetDateTime finishTime() {
        return this.finishTime;
    }

    /**
     * Set the finishTime property: The time that the build was completed.
     * 
     * @param finishTime the finishTime value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withFinishTime(OffsetDateTime finishTime) {
        this.finishTime = finishTime;
        return this;
    }

    /**
     * Get the id property: The ID of the build.
     * 
     * @return the id value.
     */
    public Integer id() {
        return this.id;
    }

    /**
     * Set the id property: The ID of the build.
     * 
     * @param id the id value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withId(Integer id) {
        this.id = id;
        return this;
    }

    /**
     * Get the queueTime property: The time that the build was queued.
     * 
     * @return the queueTime value.
     */
    public OffsetDateTime queueTime() {
        return this.queueTime;
    }

    /**
     * Set the queueTime property: The time that the build was queued.
     * 
     * @param queueTime the queueTime value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withQueueTime(OffsetDateTime queueTime) {
        this.queueTime = queueTime;
        return this;
    }

    /**
     * Get the requestedFor property: The identity on whose behalf the build was queued.
     * 
     * @return the requestedFor value.
     */
    public IdentityRef requestedFor() {
        return this.requestedFor;
    }

    /**
     * Set the requestedFor property: The identity on whose behalf the build was queued.
     * 
     * @param requestedFor the requestedFor value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withRequestedFor(IdentityRef requestedFor) {
        this.requestedFor = requestedFor;
        return this;
    }

    /**
     * Get the result property: The build result.
     * 
     * @return the result value.
     */
    public BuildResult result() {
        return this.result;
    }

    /**
     * Set the result property: The build result.
     * 
     * @param result the result value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withResult(BuildResult result) {
        this.result = result;
        return this;
    }

    /**
     * Get the startTime property: The time that the build was started.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The time that the build was started.
     * 
     * @param startTime the startTime value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the status property: The build status.
     * 
     * @return the status value.
     */
    public BuildStatus status() {
        return this.status;
    }

    /**
     * Set the status property: The build status.
     * 
     * @param status the status value to set.
     * @return the BuildReference object itself.
     */
    public BuildReference withStatus(BuildStatus status) {
        this.status = status;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (links() != null) {
            links().validate();
        }
        if (requestedFor() != null) {
            requestedFor().validate();
        }
    }
}

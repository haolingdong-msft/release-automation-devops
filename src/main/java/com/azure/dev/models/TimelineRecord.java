// Copyright (c) Microsoft Corporation. All rights reserved.
// Licensed under the MIT License.
// Code generated by Microsoft (R) AutoRest Code Generator.

package com.azure.dev.models;

import com.azure.core.annotation.Fluent;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.UUID;

/**
 * Represents an entry in a build's timeline.
 */
@Fluent
public final class TimelineRecord {
    /*
     * The class to represent a collection of REST reference links.
     */
    @JsonProperty(value = "_links")
    private ReferenceLinks links;

    /*
     * Attempt number of record.
     */
    @JsonProperty(value = "attempt")
    private Integer attempt;

    /*
     * The change ID.
     */
    @JsonProperty(value = "changeId")
    private Integer changeId;

    /*
     * A string that indicates the current operation.
     */
    @JsonProperty(value = "currentOperation")
    private String currentOperation;

    /*
     * A reference to a sub-timeline.
     */
    @JsonProperty(value = "details")
    private TimelineReference details;

    /*
     * The number of errors produced by this operation.
     */
    @JsonProperty(value = "errorCount")
    private Integer errorCount;

    /*
     * The finish time.
     */
    @JsonProperty(value = "finishTime")
    private OffsetDateTime finishTime;

    /*
     * The ID of the record.
     */
    @JsonProperty(value = "id")
    private UUID id;

    /*
     * String identifier that is consistent across attempts.
     */
    @JsonProperty(value = "identifier")
    private String identifier;

    /*
     * The issues property.
     */
    @JsonProperty(value = "issues")
    private List<Issue> issues;

    /*
     * The time the record was last modified.
     */
    @JsonProperty(value = "lastModified")
    private OffsetDateTime lastModified;

    /*
     * A reference to the log produced by this operation.
     */
    @JsonProperty(value = "log")
    private BuildLogReference log;

    /*
     * The name.
     */
    @JsonProperty(value = "name")
    private String name;

    /*
     * An ordinal value relative to other records.
     */
    @JsonProperty(value = "order")
    private Integer order;

    /*
     * The ID of the record's parent.
     */
    @JsonProperty(value = "parentId")
    private UUID parentId;

    /*
     * The current completion percentage.
     */
    @JsonProperty(value = "percentComplete")
    private Integer percentComplete;

    /*
     * The previousAttempts property.
     */
    @JsonProperty(value = "previousAttempts")
    private List<TimelineAttempt> previousAttempts;

    /*
     * The queue ID of the queue that the operation ran on.
     */
    @JsonProperty(value = "queueId")
    private Integer queueId;

    /*
     * The result.
     */
    @JsonProperty(value = "result")
    private TaskResult result;

    /*
     * The result code.
     */
    @JsonProperty(value = "resultCode")
    private String resultCode;

    /*
     * The start time.
     */
    @JsonProperty(value = "startTime")
    private OffsetDateTime startTime;

    /*
     * The state of the record.
     */
    @JsonProperty(value = "state")
    private TimelineRecordState state;

    /*
     * A reference to the task represented by this timeline record.
     */
    @JsonProperty(value = "task")
    private TaskReference task;

    /*
     * The type of the record.
     */
    @JsonProperty(value = "type")
    private String type;

    /*
     * The REST URL of the timeline record.
     */
    @JsonProperty(value = "url")
    private String url;

    /*
     * The number of warnings produced by this operation.
     */
    @JsonProperty(value = "warningCount")
    private Integer warningCount;

    /*
     * The name of the agent running the operation.
     */
    @JsonProperty(value = "workerName")
    private String workerName;

    /**
     * Creates an instance of TimelineRecord class.
     */
    public TimelineRecord() {
    }

    /**
     * Get the links property: The class to represent a collection of REST reference links.
     * 
     * @return the links value.
     */
    public ReferenceLinks links() {
        return this.links;
    }

    /**
     * Set the links property: The class to represent a collection of REST reference links.
     * 
     * @param links the links value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withLinks(ReferenceLinks links) {
        this.links = links;
        return this;
    }

    /**
     * Get the attempt property: Attempt number of record.
     * 
     * @return the attempt value.
     */
    public Integer attempt() {
        return this.attempt;
    }

    /**
     * Set the attempt property: Attempt number of record.
     * 
     * @param attempt the attempt value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withAttempt(Integer attempt) {
        this.attempt = attempt;
        return this;
    }

    /**
     * Get the changeId property: The change ID.
     * 
     * @return the changeId value.
     */
    public Integer changeId() {
        return this.changeId;
    }

    /**
     * Set the changeId property: The change ID.
     * 
     * @param changeId the changeId value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withChangeId(Integer changeId) {
        this.changeId = changeId;
        return this;
    }

    /**
     * Get the currentOperation property: A string that indicates the current operation.
     * 
     * @return the currentOperation value.
     */
    public String currentOperation() {
        return this.currentOperation;
    }

    /**
     * Set the currentOperation property: A string that indicates the current operation.
     * 
     * @param currentOperation the currentOperation value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withCurrentOperation(String currentOperation) {
        this.currentOperation = currentOperation;
        return this;
    }

    /**
     * Get the details property: A reference to a sub-timeline.
     * 
     * @return the details value.
     */
    public TimelineReference details() {
        return this.details;
    }

    /**
     * Set the details property: A reference to a sub-timeline.
     * 
     * @param details the details value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withDetails(TimelineReference details) {
        this.details = details;
        return this;
    }

    /**
     * Get the errorCount property: The number of errors produced by this operation.
     * 
     * @return the errorCount value.
     */
    public Integer errorCount() {
        return this.errorCount;
    }

    /**
     * Set the errorCount property: The number of errors produced by this operation.
     * 
     * @param errorCount the errorCount value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withErrorCount(Integer errorCount) {
        this.errorCount = errorCount;
        return this;
    }

    /**
     * Get the finishTime property: The finish time.
     * 
     * @return the finishTime value.
     */
    public OffsetDateTime finishTime() {
        return this.finishTime;
    }

    /**
     * Set the finishTime property: The finish time.
     * 
     * @param finishTime the finishTime value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withFinishTime(OffsetDateTime finishTime) {
        this.finishTime = finishTime;
        return this;
    }

    /**
     * Get the id property: The ID of the record.
     * 
     * @return the id value.
     */
    public UUID id() {
        return this.id;
    }

    /**
     * Set the id property: The ID of the record.
     * 
     * @param id the id value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withId(UUID id) {
        this.id = id;
        return this;
    }

    /**
     * Get the identifier property: String identifier that is consistent across attempts.
     * 
     * @return the identifier value.
     */
    public String identifier() {
        return this.identifier;
    }

    /**
     * Set the identifier property: String identifier that is consistent across attempts.
     * 
     * @param identifier the identifier value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withIdentifier(String identifier) {
        this.identifier = identifier;
        return this;
    }

    /**
     * Get the issues property: The issues property.
     * 
     * @return the issues value.
     */
    public List<Issue> issues() {
        return this.issues;
    }

    /**
     * Set the issues property: The issues property.
     * 
     * @param issues the issues value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withIssues(List<Issue> issues) {
        this.issues = issues;
        return this;
    }

    /**
     * Get the lastModified property: The time the record was last modified.
     * 
     * @return the lastModified value.
     */
    public OffsetDateTime lastModified() {
        return this.lastModified;
    }

    /**
     * Set the lastModified property: The time the record was last modified.
     * 
     * @param lastModified the lastModified value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withLastModified(OffsetDateTime lastModified) {
        this.lastModified = lastModified;
        return this;
    }

    /**
     * Get the log property: A reference to the log produced by this operation.
     * 
     * @return the log value.
     */
    public BuildLogReference log() {
        return this.log;
    }

    /**
     * Set the log property: A reference to the log produced by this operation.
     * 
     * @param log the log value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withLog(BuildLogReference log) {
        this.log = log;
        return this;
    }

    /**
     * Get the name property: The name.
     * 
     * @return the name value.
     */
    public String name() {
        return this.name;
    }

    /**
     * Set the name property: The name.
     * 
     * @param name the name value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Get the order property: An ordinal value relative to other records.
     * 
     * @return the order value.
     */
    public Integer order() {
        return this.order;
    }

    /**
     * Set the order property: An ordinal value relative to other records.
     * 
     * @param order the order value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withOrder(Integer order) {
        this.order = order;
        return this;
    }

    /**
     * Get the parentId property: The ID of the record's parent.
     * 
     * @return the parentId value.
     */
    public UUID parentId() {
        return this.parentId;
    }

    /**
     * Set the parentId property: The ID of the record's parent.
     * 
     * @param parentId the parentId value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withParentId(UUID parentId) {
        this.parentId = parentId;
        return this;
    }

    /**
     * Get the percentComplete property: The current completion percentage.
     * 
     * @return the percentComplete value.
     */
    public Integer percentComplete() {
        return this.percentComplete;
    }

    /**
     * Set the percentComplete property: The current completion percentage.
     * 
     * @param percentComplete the percentComplete value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withPercentComplete(Integer percentComplete) {
        this.percentComplete = percentComplete;
        return this;
    }

    /**
     * Get the previousAttempts property: The previousAttempts property.
     * 
     * @return the previousAttempts value.
     */
    public List<TimelineAttempt> previousAttempts() {
        return this.previousAttempts;
    }

    /**
     * Set the previousAttempts property: The previousAttempts property.
     * 
     * @param previousAttempts the previousAttempts value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withPreviousAttempts(List<TimelineAttempt> previousAttempts) {
        this.previousAttempts = previousAttempts;
        return this;
    }

    /**
     * Get the queueId property: The queue ID of the queue that the operation ran on.
     * 
     * @return the queueId value.
     */
    public Integer queueId() {
        return this.queueId;
    }

    /**
     * Set the queueId property: The queue ID of the queue that the operation ran on.
     * 
     * @param queueId the queueId value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withQueueId(Integer queueId) {
        this.queueId = queueId;
        return this;
    }

    /**
     * Get the result property: The result.
     * 
     * @return the result value.
     */
    public TaskResult result() {
        return this.result;
    }

    /**
     * Set the result property: The result.
     * 
     * @param result the result value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withResult(TaskResult result) {
        this.result = result;
        return this;
    }

    /**
     * Get the resultCode property: The result code.
     * 
     * @return the resultCode value.
     */
    public String resultCode() {
        return this.resultCode;
    }

    /**
     * Set the resultCode property: The result code.
     * 
     * @param resultCode the resultCode value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withResultCode(String resultCode) {
        this.resultCode = resultCode;
        return this;
    }

    /**
     * Get the startTime property: The start time.
     * 
     * @return the startTime value.
     */
    public OffsetDateTime startTime() {
        return this.startTime;
    }

    /**
     * Set the startTime property: The start time.
     * 
     * @param startTime the startTime value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withStartTime(OffsetDateTime startTime) {
        this.startTime = startTime;
        return this;
    }

    /**
     * Get the state property: The state of the record.
     * 
     * @return the state value.
     */
    public TimelineRecordState state() {
        return this.state;
    }

    /**
     * Set the state property: The state of the record.
     * 
     * @param state the state value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withState(TimelineRecordState state) {
        this.state = state;
        return this;
    }

    /**
     * Get the task property: A reference to the task represented by this timeline record.
     * 
     * @return the task value.
     */
    public TaskReference task() {
        return this.task;
    }

    /**
     * Set the task property: A reference to the task represented by this timeline record.
     * 
     * @param task the task value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withTask(TaskReference task) {
        this.task = task;
        return this;
    }

    /**
     * Get the type property: The type of the record.
     * 
     * @return the type value.
     */
    public String type() {
        return this.type;
    }

    /**
     * Set the type property: The type of the record.
     * 
     * @param type the type value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Get the url property: The REST URL of the timeline record.
     * 
     * @return the url value.
     */
    public String url() {
        return this.url;
    }

    /**
     * Set the url property: The REST URL of the timeline record.
     * 
     * @param url the url value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withUrl(String url) {
        this.url = url;
        return this;
    }

    /**
     * Get the warningCount property: The number of warnings produced by this operation.
     * 
     * @return the warningCount value.
     */
    public Integer warningCount() {
        return this.warningCount;
    }

    /**
     * Set the warningCount property: The number of warnings produced by this operation.
     * 
     * @param warningCount the warningCount value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withWarningCount(Integer warningCount) {
        this.warningCount = warningCount;
        return this;
    }

    /**
     * Get the workerName property: The name of the agent running the operation.
     * 
     * @return the workerName value.
     */
    public String workerName() {
        return this.workerName;
    }

    /**
     * Set the workerName property: The name of the agent running the operation.
     * 
     * @param workerName the workerName value to set.
     * @return the TimelineRecord object itself.
     */
    public TimelineRecord withWorkerName(String workerName) {
        this.workerName = workerName;
        return this;
    }

    /**
     * Validates the instance.
     * 
     * @throws IllegalArgumentException thrown if the instance is not valid.
     */
    public void validate() {
        if (links() != null) {
            links().validate();
        }
        if (details() != null) {
            details().validate();
        }
        if (issues() != null) {
            issues().forEach(e -> e.validate());
        }
        if (log() != null) {
            log().validate();
        }
        if (previousAttempts() != null) {
            previousAttempts().forEach(e -> e.validate());
        }
        if (task() != null) {
            task().validate();
        }
    }
}
